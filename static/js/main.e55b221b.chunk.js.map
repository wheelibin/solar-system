{"version":3,"sources":["app/planets/Entity.ts","app/NoiseMapGenerator.ts","app/Random.ts","app/SolarSystemGenerator.ts","app/lighting.ts","app/app.ts","app/planets/Moon.ts","app/planets/ClassM.ts","app/planets/Sun.ts","app/planets/Earth.ts","index.tsx"],"names":["EntityType","NoiseMapGenerator","seed","noiseGenerator","this","SimplexNoise","width","height","map","x","y","noise","getMixedFrequencyNoise","Math","pow","makeSeamlessVertically","makeSeamlessHorizontally","frequency","xOffset","yOffset","_x","_y","amplitude","n","noise2D","frequencies","sumOfAmplitudes","reduce","previous","index","getNoise","noiseMap","stitchWidth","length","v","o","MathUtils","lerp","stitchHeight","k","ceil","s1","s2","c","Entity","id","entityType","radius","params","entity","sphere","orbit","loader","TextureLoader","textureWidth","textureHeight","Group","terrainHeight","terrainMaps","generateTerrainMaps","heightMapTexture","CanvasTexture","heightMap","canvas","colourMapTexture","mapping","EquirectangularReflectionMapping","material","MeshPhongMaterial","bumpMap","bumpScale","displacementMap","displacementScale","texturePath","loadAsync","texture","MeshBasicMaterial","color","colour","geometry","SphereBufferGeometry","Mesh","castShadow","receiveShadow","orbitEntity","orbitEntityPos","position","orbitRadius","createOrbitCircle","add","set","z","clock","getElapsedTime","orbitSpeed","orbitDirection","rotation","spinSpeed","onShow","heightMapContext","getCanvasContext","heightMapImageData","createImageData","heightMapData","data","colourMapContext","colourMapImageData","colourMapData","baseSeed","acc","cur","generateNoiseMap","i","colourValue","heightColour","ci","mapColour","getMapColour","putImageData","level","lerpColour","dark","light","min","max","col1","col2","ratio","convertToColor","toArray","Color","setRGB","ctx","document","createElement","getContext","fillStyle","fillRect","BufferGeometry","verts","LineBasicMaterial","opacity","transparent","theta","PI","push","cos","sin","vertices","Float32Array","setAttribute","BufferAttribute","Line","Random","mt19937","factory","rand","floor","getRandom","x0","y0","z0","u","random","phi","acos","seedIndexes","SolarSystemGenerator","EntityId","solarSystem","suns","planets","getNextId","name","moons","orbitEntityId","getRandomFloat","sunIndex","sun","numberOfPlanets","getRandomInt","planetIndex","planetRadius","numberOfMoons","planetMoons","moonIndex","randomOrbitDirection","coinToss","randomOrbitSpeed","randomSpinSpeed","minOrbitRadius","moon","rgb","getRandomRgb","orbitRadiusInc","prevPlanet","undefined","prevPlanetOrbitRadius","prevPlanetMoonRadius","currentPlanetMoonRadius","orbitPadding","planet","addPointLight","scene","addLight","PointLight","showHelper","helper","PointLightHelper","intensity","multiplyScalar","camera","renderer","orbitControls","stats","cameraInitialPosition","Moon","r","g","b","rgba","ClassM","colours","oceanDark","getRandomColour","oceanLight","beachDark","beachLight","forestDark","forestLight","jungleDark","jungleLight","savannahDark","savannahLight","desertDark","desertLight","snowDark","snowLight","getColourForHeight","getRangeColour","colIndex","Sun","Earth","Clock","bodies","showPlanetId","init","a","generate","Scene","background","setHex","CubeTextureLoader","load","WebGLRenderer","powerPreference","antialias","setSize","window","innerWidth","innerHeight","setPixelRatio","devicePixelRatio","shadowMap","enabled","body","appendChild","domElement","Camera","PerspectiveCamera","lookAt","OrbitControls","Stats","dom","AmbientLight","Vector3","createSolarSystem","gui","GUI","buttonHandlers","resetView","toggleOrbits","viewActionsFolder","addFolder","open","filter","Planet","ssPlanet","find","p","handleShowPlanet","sunEntity","create","planetParams","planetEntity","moonEntity","app","animate","requestAnimationFrame","forEach","update","pos","getWorldPosition","render"],"mappings":"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","file":"static/js/main.e55b221b.chunk.js","sourcesContent":["import {\n  CanvasTexture,\n  Clock,\n  Color,\n  EquirectangularReflectionMapping,\n  Group,\n  Line,\n  LineBasicMaterial,\n  Material,\n  Mesh,\n  MeshBasicMaterial,\n  MeshPhongMaterial,\n  SphereBufferGeometry,\n  TextureLoader,\n  Vector3,\n  BufferGeometry,\n  BufferAttribute,\n} from \"three\";\n\nimport { NoiseMapGenerator } from \"../NoiseMapGenerator\";\n\nexport enum EntityType {\n  Sun,\n  Planet,\n  Moon,\n}\n\ntype TerrainMaps = {\n  heightMap: CanvasRenderingContext2D;\n  map: CanvasRenderingContext2D;\n};\n\nexport type EntityParams = {\n  baseSeed: number[];\n  position: Vector3;\n  terrainHeight: number;\n  orbitEntity: Entity | false;\n  orbitDirection: number;\n  orbitSpeed: number;\n  orbitRadius: number;\n  spinSpeed: number;\n\n  colour?: Color;\n  castShadow?: boolean;\n  receiveShadow?: boolean;\n  texturePath?: string;\n  onShow?: (id: number) => void;\n};\n\nexport abstract class Entity {\n  public id: number;\n  public entityType: EntityType;\n  public entity: Group;\n  public params: EntityParams;\n  public radius: number;\n  public sphere!: Mesh;\n  public orbit!: Material;\n\n  private loader = new TextureLoader();\n\n  protected textureWidth: number;\n  protected textureHeight: number;\n\n  constructor(id: number, entityType: EntityType, radius: number, params: EntityParams) {\n    this.id = id;\n    this.entityType = entityType;\n    this.radius = radius;\n    this.params = params;\n\n    this.entity = new Group();\n\n    this.textureWidth = 512;\n    this.textureHeight = 256;\n  }\n\n  public async create() {\n    let material: Material;\n    if (this.params.terrainHeight > 0) {\n      const terrainMaps = this.generateTerrainMaps();\n\n      const heightMapTexture = new CanvasTexture(terrainMaps.heightMap.canvas);\n      const colourMapTexture = new CanvasTexture(terrainMaps.map.canvas);\n\n      heightMapTexture.mapping = EquirectangularReflectionMapping;\n      colourMapTexture.mapping = EquirectangularReflectionMapping;\n\n      material = new MeshPhongMaterial({\n        bumpMap: heightMapTexture,\n        bumpScale: this.params.terrainHeight,\n        map: colourMapTexture,\n        displacementMap: heightMapTexture,\n        displacementScale: this.params.terrainHeight,\n      });\n    } else {\n      if (this.params.texturePath) {\n        const texture = await this.loader.loadAsync(this.params.texturePath);\n        material = new MeshBasicMaterial({ map: texture, color: this.params.colour });\n      } else {\n        material = new MeshBasicMaterial({\n          color: this.params.colour,\n        });\n      }\n    }\n\n    const geometry = new SphereBufferGeometry(this.radius, 64, 48);\n    this.sphere = new Mesh(geometry, material);\n\n    this.sphere.castShadow = !!this.params.castShadow;\n    this.sphere.receiveShadow = !!this.params.receiveShadow;\n\n    // const geom = new PlaneGeometry(this.textureWidth, this.textureHeight);\n    // this.sphere = new Mesh(geom, material);\n\n    if (this.params.orbitEntity) {\n      const orbitEntityPos = this.params.orbitEntity.sphere.position;\n      const orbitRadius = this.params.orbitRadius || 400;\n\n      // create an orbit cirlce and add it to the entity\n      const orbit = this.createOrbitCircle(orbitRadius);\n      this.entity.add(orbit);\n\n      // position the sphere at the edge of the orbit circle\n      this.sphere.position.set(orbitRadius, 0, 0);\n\n      // position the whole entity at the orbit entity position\n      this.entity.position.set(orbitEntityPos.x, orbitEntityPos.y, orbitEntityPos.z);\n    }\n\n    this.entity.add(this.sphere);\n\n    return this;\n  }\n\n  public animate(clock: Clock) {\n    clock.getElapsedTime();\n\n    if (this.params.orbitEntity) {\n      const orbitSpeed = this.params.orbitSpeed;\n      const orbitDirection = this.params.orbitDirection;\n      this.entity.rotation.y += orbitSpeed * orbitDirection;\n    }\n\n    if (this.params.spinSpeed) {\n      this.sphere.rotation.y += this.params.spinSpeed;\n    }\n  }\n\n  public show() {\n    if (this.params.onShow) {\n      this.params.onShow(this.id);\n    }\n  }\n\n  protected generateTerrainMaps(): TerrainMaps {\n    const recordSize = 4;\n\n    const heightMapContext = this.getCanvasContext();\n    const heightMapImageData = heightMapContext.createImageData(this.textureWidth, this.textureHeight);\n    const heightMapData = heightMapImageData.data;\n\n    const colourMapContext = this.getCanvasContext();\n    const colourMapImageData = colourMapContext.createImageData(this.textureWidth, this.textureHeight);\n    const colourMapData = colourMapImageData.data;\n\n    const seed = [...this.params.baseSeed, 99999].reduce((acc, cur) => (acc += cur));\n    const ng = new NoiseMapGenerator(seed);\n    const noiseMap = ng.generateNoiseMap(this.textureWidth, this.textureHeight);\n\n    for (let i = 0; i < heightMapData.length; i += recordSize) {\n      const x = (i / recordSize) % this.textureWidth;\n      const y = ~~(i / recordSize / this.textureWidth);\n\n      const noise = noiseMap[x][y];\n      const generatedColourValue = 255 * noise;\n\n      let colourValue = generatedColourValue;\n\n      // RGBA\n      const heightColour = [colourValue, colourValue, colourValue, 255];\n      for (let ci = 0; ci < heightColour.length; ci++) {\n        heightMapData[i + ci] = heightColour[ci];\n      }\n\n      let mapColour = this.getMapColour(colourValue, y);\n\n      for (let ci = 0; ci < mapColour.length; ci++) {\n        colourMapData[i + ci] = mapColour[ci];\n      }\n    }\n\n    heightMapContext.putImageData(heightMapImageData, 0, 0);\n    colourMapContext.putImageData(colourMapImageData, 0, 0);\n\n    return {\n      heightMap: heightMapContext,\n      map: colourMapContext,\n    };\n  }\n\n  protected abstract getMapColour(height: number, y: number): number[];\n\n  protected getRangeColour(level: { min: number; max: number; dark: number[]; light: number[] }, height: number) {\n    return this.lerpColour(level.dark, level.light, (height - level.min) / (level.max - level.min));\n  }\n\n  protected lerpColour(col1: number[], col2: number[], ratio: number) {\n    const c = this.convertToColor(col1).lerp(this.convertToColor(col2), ratio);\n    return [...c.toArray(), 255];\n  }\n\n  protected convertToColor(colour: number[]) {\n    return new Color().setRGB(colour[0], colour[1], colour[2]);\n  }\n\n  protected getCanvasContext() {\n    const ctx = document.createElement(\"canvas\").getContext(\"2d\") as CanvasRenderingContext2D;\n    ctx.canvas.width = this.textureWidth;\n    ctx.canvas.height = this.textureHeight;\n    ctx.fillStyle = \"#fff\";\n    ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    return ctx;\n  }\n\n  private createOrbitCircle(radius: number) {\n    var segmentCount = 128;\n    const geometry = new BufferGeometry();\n    const verts = [];\n    this.orbit = new LineBasicMaterial({ color: 0xffffff, opacity: 0.5, transparent: true });\n\n    for (var i = 0; i <= segmentCount; i++) {\n      var theta = (i / segmentCount) * Math.PI * 2;\n      verts.push(Math.cos(theta) * radius, 0, Math.sin(theta) * radius);\n    }\n    const vertices = new Float32Array(verts);\n    geometry.setAttribute(\"position\", new BufferAttribute(vertices, 3));\n    return new Line(geometry, this.orbit);\n  }\n}\n","import SimplexNoise from \"simplex-noise\";\nimport { MathUtils } from \"three\";\n\nexport class NoiseMapGenerator {\n  private noiseGenerator: SimplexNoise;\n\n  constructor(seed?: number) {\n    this.noiseGenerator = new SimplexNoise(seed);\n  }\n\n  public generateNoiseMap(width: number, height: number): number[][] {\n    const map: number[][] = [];\n\n    for (let x = 0; x < width; x++) {\n      map[x] = [];\n      for (let y = 0; y < height; y++) {\n        // add noise at various frequencies\n        let noise = this.getMixedFrequencyNoise(\n          x,\n          y,\n          [0.01, 0.02, 0.04, 0.08, 0.16, 0.32, 0.64, 1.28]\n        );\n        noise = Math.pow(noise, 2.3);\n\n        map[x][y] = noise;\n      }\n    }\n\n    this.makeSeamlessVertically(map, height * 0.2);\n    this.makeSeamlessHorizontally(map, width * 0.05);\n\n    return map;\n  }\n\n  private getNoise(\n    x: number,\n    y: number,\n    frequency: number,\n    xOffset: number = 0,\n    yOffset: number = 0\n  ) {\n    const _x = frequency * x + xOffset;\n    const _y = frequency * y + yOffset;\n    const amplitude = 1 / frequency;\n\n    // get noise in the range 0-1\n    const n = this.noiseGenerator.noise2D(_x, _y) / 2 + 0.5;\n\n    let noise = amplitude * n;\n    return noise;\n  }\n\n  private getMixedFrequencyNoise(x: number, y: number, frequencies: number[]) {\n    let sumOfAmplitudes = 0;\n    const noise = frequencies.reduce(\n      (previous: number, frequency: number, index: number) => {\n        sumOfAmplitudes += 1 / frequency;\n\n        // add offsets so different frequencies (octaves)\n        // sample from a different part of the noise space\n        const xOffset = index * 10;\n        const yOffset = index * 100;\n        return previous + this.getNoise(x, y, frequency, xOffset, yOffset);\n      },\n      0\n    );\n    return noise / sumOfAmplitudes;\n  }\n\n  // ported from here:\n  // https://medium.com/nerd-for-tech/making-a-seamless-perlin-noise-in-c-4cfc12a90f93\n  private makeSeamlessHorizontally(noiseMap: number[][], stitchWidth: number) {\n    const width = noiseMap.length;\n    const height = noiseMap[0].length;\n\n    // iterate on the stitch band (on the left\n    // of the noise)\n    for (let x = 0; x < stitchWidth; x++) {\n      // get the transparency value from\n      // a linear gradient\n      const v = x / stitchWidth;\n\n      for (let y = 0; y < height; y++) {\n        // compute the \"mirrored x position\":\n        // the far left is copied on the right\n        // and the far right on the left\n        const o = ~~(width - stitchWidth + x);\n        // copy the value on the right of the noise\n        noiseMap[o][y] = MathUtils.lerp(\n          noiseMap[o][y],\n          noiseMap[~~(stitchWidth - x)][y],\n          v\n        );\n      }\n    }\n  }\n\n  // ported from here:\n  // https://medium.com/nerd-for-tech/making-a-seamless-perlin-noise-in-c-4cfc12a90f93\n  private makeSeamlessVertically(noiseMap: number[][], stitchHeight: number) {\n    const width = noiseMap.length;\n    const height = noiseMap[0].length;\n\n    // iterate through the stitch band (both\n    // top and bottom sides are treated\n    // simultaneously because its mirrored)\n    for (let y = 0; y < stitchHeight; y++) {\n      // number of neighbour pixels to\n      // consider for the average (= kernel size)\n      const k = Math.ceil(stitchHeight - y);\n      // go through the entire row\n      for (let x = 0; x < width; x++) {\n        // compute the sum of pixel values\n        // in the top and the bottom bands\n        let s1 = 0.0;\n        let s2 = 0.0;\n        let c = 0;\n        for (let o = x - k; o < x + k; o++) {\n          if (o < 0 || o >= width) {\n            continue;\n          }\n\n          s1 += noiseMap[o][y];\n          s2 += noiseMap[o][height - y - 1];\n          c++;\n        }\n        // compute the means and assign them to\n        // the pixels in the top and the bottom\n        // rows\n        noiseMap[x][y] = s1 / c;\n        noiseMap[x][height - y - 1] = s2 / c;\n      }\n    }\n  }\n}\n","import mt19937 from \"@stdlib/random-base-mt19937\";\n\nconst MAX = 4294967295;\n\nexport class Random {\n  public static getRandom(seed: number[]) {\n    var rand = mt19937.factory({\n      seed: seed,\n    });\n\n    return rand() / MAX;\n  }\n\n  public static getRandomInt(min: number, max: number, seed: number[]) {\n    return Math.floor(Random.getRandom(seed) * (max - min + 1) + min);\n  }\n\n  public static getRandomFloat(min: number, max: number, seed: number[]) {\n    return Random.getRandom(seed) * (max - min) + min;\n  }\n\n  public static coinToss(seed: number[]) {\n    return Random.getRandom(seed) <= 0.5;\n  }\n\n  /**\n   * Gets a random point of a sphere, evenly distributed over the sphere.\n   * The sphere is centered at (x0,y0,z0) with the passed in radius.\n   * The returned point is returned as a three element array [x,y,z].\n   *\n   * @return [x,y,z]\n   */\n  public static getRandomPointInSphere(radius: number, x0: number, y0: number, z0: number) {\n    if (!x0) {\n      x0 = 0;\n    }\n    if (!y0) {\n      y0 = 0;\n    }\n    if (!z0) {\n      z0 = 0;\n    }\n\n    var u = Math.random();\n    var v = Math.random();\n    var theta = 2 * Math.PI * u;\n    var phi = Math.acos(1 - 2 * v);\n    var x = x0 + radius * Math.sin(phi) * Math.cos(theta);\n    var y = y0 + radius * Math.sin(phi) * Math.sin(theta);\n    var z = z0 + radius * Math.cos(phi);\n\n    return [x, y, z];\n  }\n}\n","import { Random } from \"./Random\";\n\ntype SolarSystemEntity = {\n  id: number;\n  name: string;\n  seed: number[];\n  radius: number;\n  terrainHeight: number;\n  moons: SolarSystemEntity[];\n  orbitEntityId: number;\n  orbitRadius: number;\n  orbitDirection: number;\n  orbitSpeed: number;\n  spinSpeed: number;\n\n  position?: [number, number, number];\n  rgb?: [number, number, number];\n};\n\nexport type SolarSystem = {\n  suns: SolarSystemEntity[];\n  planets: SolarSystemEntity[];\n};\n\nconst seedIndexes = {\n  radius: 0,\n  terrainHeight: 1,\n  colour: 2,\n  noiseMap: 3,\n  orbitDirection: 4,\n  orbitSpeed: 5,\n  spinSpeed: 6,\n  numberOfPlanets: 7,\n  orbitRadius: 8,\n};\n\nexport class SolarSystemGenerator {\n  private EntityId = 0;\n\n  private getNextId(): number {\n    this.EntityId++;\n    return this.EntityId;\n  }\n\n  public generate(seed: number): SolarSystem {\n    const solarSystem: SolarSystem = {\n      suns: [],\n      planets: [],\n    };\n\n    const suns: SolarSystemEntity[] = [\n      {\n        id: this.getNextId(),\n        name: `Sun ${this.EntityId}`,\n        seed: [seed, 0],\n        position: [0, 0, 0],\n        radius: 1280,\n        terrainHeight: 0,\n        moons: [],\n        orbitEntityId: 0,\n        orbitRadius: 0,\n        orbitSpeed: 0,\n        orbitDirection: 0,\n        spinSpeed: Random.getRandomFloat(0.0001, 0.0003, [...[seed, 0], seedIndexes.spinSpeed]),\n      },\n    ];\n\n    for (let sunIndex = 0; sunIndex < suns.length; sunIndex++) {\n      const sun = suns[sunIndex];\n\n      const numberOfPlanets = Random.getRandomInt(1, 9, [seed, sunIndex, seedIndexes.numberOfPlanets]);\n\n      for (let planetIndex = 0; planetIndex < numberOfPlanets; planetIndex++) {\n        const baseSeed = [seed, sunIndex, planetIndex];\n\n        const planetRadius = Random.getRandomInt(sun.radius * 0.1, sun.radius * 0.3, [...baseSeed, seedIndexes.radius]);\n        const numberOfMoons = Random.getRandomInt(1, 5, [...baseSeed, seedIndexes.numberOfPlanets]);\n\n        // create the moons for the planet\n        const planetMoons = [];\n        for (let moonIndex = 0; moonIndex < numberOfMoons; moonIndex++) {\n          const baseSeed = [seed, sunIndex, planetIndex, moonIndex];\n          const randomOrbitDirection = Random.coinToss([...baseSeed, seedIndexes.orbitDirection]) ? 1 : -1;\n          const randomOrbitSpeed = Random.getRandomFloat(0.001, 0.005, [...baseSeed, seedIndexes.orbitSpeed]);\n          const randomSpinSpeed = Random.getRandomFloat(0.001, 0.005, [...baseSeed, seedIndexes.spinSpeed]);\n          const minOrbitRadius = Random.getRandomInt(planetRadius * 3 * 0.5, planetRadius * 4, [\n            ...baseSeed,\n            seedIndexes.orbitRadius,\n            0,\n          ]);\n\n          const moon: SolarSystemEntity = {\n            id: this.getNextId(),\n            name: `Moon ${moonIndex}`,\n            seed: baseSeed,\n            radius: Random.getRandomInt(planetRadius / 24, planetRadius / 8, [...baseSeed, seedIndexes.radius]),\n            terrainHeight: Random.getRandomInt(1, 10, [...baseSeed, seedIndexes.terrainHeight]),\n            orbitEntityId: -1,\n            orbitRadius:\n              moonIndex === 0\n                ? minOrbitRadius\n                : planetMoons[moonIndex - 1].orbitRadius +\n                  Random.getRandomInt(minOrbitRadius * 0.2, minOrbitRadius, [...baseSeed, seedIndexes.orbitRadius, 1]),\n            orbitDirection: randomOrbitDirection,\n            orbitSpeed: randomOrbitSpeed,\n            spinSpeed: randomSpinSpeed,\n            rgb: getRandomRgb([...baseSeed, seedIndexes.colour]),\n            moons: [],\n          };\n\n          planetMoons.push(moon);\n        }\n\n        // now create the planet - ensuring the orbit is large enough to accomodate all the moons\n        const randomOrbitDirection = Random.coinToss([...baseSeed, seedIndexes.orbitDirection]) ? 1 : -1;\n        const randomOrbitSpeed = Random.getRandomFloat(0.001, 0.005, [...baseSeed, seedIndexes.orbitSpeed]);\n        const randomSpinSpeed = Random.getRandomFloat(0.002, 0.006, [...baseSeed, seedIndexes.spinSpeed]);\n        const orbitRadiusInc = Random.getRandomInt(\n          planetMoons[planetMoons.length - 1].orbitRadius * 1.1,\n          planetMoons[planetMoons.length - 1].orbitRadius * 2,\n          [...baseSeed, seedIndexes.orbitRadius, 0]\n        );\n\n        // ensure orbits of planets/moons don't overlap\n        const prevPlanet =\n          solarSystem.planets.length > 0 ? solarSystem.planets[solarSystem.planets.length - 1] : undefined;\n        const prevPlanetOrbitRadius = planetIndex === 0 ? orbitRadiusInc : prevPlanet!.orbitRadius;\n        const prevPlanetMoonRadius =\n          planetIndex === 0 ? 0 : prevPlanet!.moons[prevPlanet!.moons.length - 1].orbitRadius;\n        const currentPlanetMoonRadius = planetMoons[planetMoons.length - 1].orbitRadius;\n        const orbitPadding = planetRadius;\n\n        // create the planet\n        const planet: SolarSystemEntity = {\n          id: this.getNextId(),\n          name: `Planet ${planetIndex}`,\n          seed: baseSeed,\n          radius: planetRadius,\n          terrainHeight: 8,\n          orbitEntityId: sun.id,\n          orbitRadius: prevPlanetOrbitRadius + prevPlanetMoonRadius + currentPlanetMoonRadius + orbitPadding,\n          orbitDirection: randomOrbitDirection,\n          orbitSpeed: randomOrbitSpeed,\n          spinSpeed: randomSpinSpeed,\n          moons: planetMoons,\n        };\n\n        solarSystem.planets.push(planet);\n      }\n\n      solarSystem.suns.push(sun);\n    }\n\n    return solarSystem;\n  }\n}\n\nconst getRandomRgb = (seed: number[]): [number, number, number] => {\n  return [\n    Random.getRandomFloat(0.6, 1, [...seed, 0]),\n    Random.getRandomFloat(0.6, 1, [...seed, 1]),\n    Random.getRandomFloat(0.6, 1, [...seed, 2]),\n  ];\n};\n","import {\n  CameraHelper,\n  ColorRepresentation,\n  DirectionalLight,\n  DirectionalLightHelper,\n  HemisphereLight,\n  HemisphereLightHelper,\n  Light,\n  Object3D,\n  PointLight,\n  PointLightHelper,\n  Vector3,\n} from \"three\";\n\nexport type LightParams = {\n  colour: ColorRepresentation;\n  intensity: number;\n  position: Vector3;\n  showHelper?: boolean;\n  castShadow?: boolean;\n};\n\nexport const addHemisphereLight = (scene: Object3D, params: LightParams) => {\n  const light = addLight(new HemisphereLight(), scene, params);\n  const { showHelper } = params;\n\n  if (showHelper) {\n    const helper = new HemisphereLightHelper(light as HemisphereLight, 10);\n    scene.add(helper);\n  }\n};\n\nexport const addDirectionalLight = (scene: Object3D, params: LightParams) => {\n  const light = addLight(new DirectionalLight(), scene, params);\n\n  const { showHelper } = params;\n\n  if (showHelper) {\n    const helper = new DirectionalLightHelper(light as DirectionalLight, 10);\n    scene.add(helper);\n    const cameraHelper = new CameraHelper(light.shadow.camera);\n    scene.add(cameraHelper);\n  }\n};\n\nexport const addPointLight = (scene: Object3D, params: LightParams) => {\n  const light = addLight(new PointLight(), scene, params);\n  const { showHelper } = params;\n\n  if (showHelper) {\n    const helper = new PointLightHelper(light as PointLight, 10);\n    scene.add(helper);\n  }\n};\n\nfunction addLight(light: Light, scene: Object3D, params: LightParams): Light {\n  const { colour, intensity, position, castShadow } = params;\n\n  light.color.set(colour);\n  light.intensity = intensity;\n  light.position.set(position.x, position.y, position.z);\n  light.position.multiplyScalar(30);\n\n  scene.add(light);\n\n  light.castShadow = !!castShadow;\n  return light;\n}\n","import {\n  AmbientLight,\n  AxesHelper,\n  Camera,\n  Clock,\n  Color,\n  CubeTextureLoader,\n  PerspectiveCamera,\n  Scene,\n  Vector3,\n  WebGLRenderer,\n} from \"three\";\nimport { Entity, EntityParams, EntityType } from \"./planets/Entity\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport Stats from \"three/examples/jsm/libs/stats.module\";\nimport { GUI } from \"three/examples/jsm/libs/dat.gui.module\";\n\nimport { SolarSystem, SolarSystemGenerator } from \"./SolarSystemGenerator\";\nimport { addPointLight } from \"./lighting\";\nimport { Moon } from \"./planets/Moon\";\nimport { ClassM } from \"./planets/ClassM\";\nimport { Sun } from \"./planets/Sun\";\nimport { Earth } from \"./planets/Earth\";\n\nlet solarSystem: SolarSystem;\n\nlet scene: Scene;\nlet camera: Camera;\nlet clock = new Clock();\nlet bodies: Entity[] = [];\nlet renderer: WebGLRenderer;\nlet orbitControls: OrbitControls;\nlet stats: Stats;\nlet showPlanetId = -1;\nlet cameraInitialPosition: [number, number, number];\n\nconst SEED = 2;\nconst sunColour = 0xf7e096;\n\nexport const init = async () => {\n  solarSystem = new SolarSystemGenerator().generate(SEED);\n\n  scene = new Scene();\n  scene.background = new Color().setHex(0x000000);\n\n  const loader = new CubeTextureLoader();\n  const texture = loader.load([\n    \"assets/kurt/space_ft.png\",\n    \"assets/kurt/space_bk.png\",\n    \"assets/kurt/space_up.png\",\n    \"assets/kurt/space_dn.png\",\n    \"assets/kurt/space_rt.png\",\n    \"assets/kurt/space_lf.png\",\n  ]);\n  scene.background = texture;\n\n  // Renderer\n  renderer = new WebGLRenderer({\n    powerPreference: \"high-performance\",\n    antialias: true,\n  });\n  renderer.setSize(window.innerWidth, window.innerHeight);\n  renderer.setPixelRatio(window.devicePixelRatio);\n  renderer.shadowMap.enabled = true;\n  document.body.appendChild(renderer.domElement);\n\n  // Camera\n  camera = new Camera();\n  camera = new PerspectiveCamera(25, window.innerWidth / window.innerHeight, 50, 1e7);\n  cameraInitialPosition = [0, solarSystem.suns[0].radius * 6, solarSystem.suns[0].radius * 20];\n  camera.position.set(...cameraInitialPosition);\n\n  camera.lookAt(0, 0, 0);\n\n  // Controls\n  orbitControls = new OrbitControls(camera, renderer.domElement);\n\n  // Stats\n  stats = new (Stats as any)();\n  document.body.appendChild(stats.dom);\n\n  // Lighting\n  scene.add(new AmbientLight(0xffffff, 0.15));\n  // scene.add(new AmbientLight(0xffffff, 1));\n\n  // var axesHelper = new AxesHelper(5000);\n  // scene.add(axesHelper);\n\n  addPointLight(scene, {\n    colour: sunColour,\n    intensity: 1,\n    position: new Vector3(0, 0, 0),\n  });\n\n  await createSolarSystem();\n\n  // UI\n  const gui = new GUI();\n\n  const buttonHandlers = {\n    resetView: () => {\n      showPlanetId = -1;\n      camera.position.set(...cameraInitialPosition);\n      orbitControls = new OrbitControls(camera, renderer.domElement);\n    },\n    toggleOrbits: () => {\n      for (const body of bodies) {\n        if (body.orbit) {\n          body.orbit.opacity = body.orbit.opacity === 0 ? 0.5 : 0;\n        }\n      }\n    },\n  };\n\n  const viewActionsFolder = gui.addFolder(\"View Actions\");\n  viewActionsFolder.open();\n  viewActionsFolder.add(buttonHandlers, \"toggleOrbits\").name(\"Toggle Orbits\");\n  viewActionsFolder.add(buttonHandlers, \"resetView\").name(\"Reset View\");\n  for (const planet of bodies.filter((b) => b.entityType === EntityType.Planet)) {\n    const ssPlanet = solarSystem.planets.find((p) => p.id === planet.id);\n    viewActionsFolder.add(planet, \"show\").name(ssPlanet?.name || \"A Planet\");\n  }\n};\n\nexport const animate = () => {\n  requestAnimationFrame(animate);\n\n  bodies.forEach((body) => {\n    body.animate(clock);\n  });\n\n  orbitControls.update();\n  stats.update();\n\n  if (showPlanetId > -1) {\n    const planet = bodies.find((b) => b.id === showPlanetId);\n    if (planet) {\n      const pos = new Vector3();\n      planet.sphere.getWorldPosition(pos);\n\n      camera.position.set(pos.x + planet.radius * 2, pos.y + planet.radius * 2, pos.z + planet.radius * 8);\n      camera.lookAt(pos.x, pos.y, pos.z);\n    }\n  }\n\n  renderer.render(scene, camera);\n};\n\nconst createSolarSystem = async () => {\n  const handleShowPlanet = (id: number) => {\n    showPlanetId = id;\n  };\n\n  for (const sun of solarSystem.suns) {\n    const sunEntity = new Sun(sun.id, EntityType.Sun, sun.radius, {\n      baseSeed: sun.seed,\n      position: sun.position ? new Vector3(...sun.position) : new Vector3(0, 0, 0),\n      colour: new Color(0xffca20),\n      terrainHeight: 0,\n      texturePath: \"assets/sun.jpg\",\n      orbitEntity: false,\n      orbitRadius: sun.orbitRadius,\n      orbitDirection: sun.orbitDirection,\n      orbitSpeed: sun.orbitSpeed,\n      spinSpeed: sun.spinSpeed,\n    });\n    await sunEntity.create();\n    bodies.push(sunEntity);\n    scene.add(sunEntity.entity);\n\n    for (let planetIndex = 0; planetIndex < solarSystem.planets.length; planetIndex++) {\n      const planet = solarSystem.planets[planetIndex];\n\n      const orbitEntity = bodies.find((b) => b.id === planet.orbitEntityId) as Entity;\n      const planetParams: EntityParams = {\n        baseSeed: planet.seed,\n        position: planet.position ? new Vector3(...planet.position) : orbitEntity.entity.position,\n        terrainHeight: planet.terrainHeight,\n        orbitEntity: orbitEntity,\n        orbitRadius: planet.orbitRadius,\n        orbitDirection: planet.orbitDirection,\n        orbitSpeed: planet.orbitSpeed,\n        spinSpeed: planet.spinSpeed,\n        onShow: handleShowPlanet,\n      };\n\n      const planetEntity =\n        planetIndex === 2\n          ? new Earth(planet.id, EntityType.Planet, planet.radius, planetParams)\n          : new ClassM(planet.id, EntityType.Planet, planet.radius, planetParams);\n      await planetEntity.create();\n\n      for (const moon of planet.moons) {\n        const orbitEntity = planetEntity;\n        const moonEntity = new Moon(moon.id, EntityType.Moon, moon.radius, {\n          baseSeed: moon.seed,\n          position: moon.position ? new Vector3(...moon.position) : orbitEntity.entity.position,\n          colour: moon.rgb ? new Color(...moon.rgb) : new Color(1, 1, 1),\n          terrainHeight: moon.terrainHeight,\n          orbitEntity: orbitEntity,\n          orbitRadius: moon.orbitRadius,\n          orbitDirection: moon.orbitDirection,\n          orbitSpeed: moon.orbitSpeed,\n          spinSpeed: moon.spinSpeed,\n        });\n        await moonEntity.create();\n        bodies.push(moonEntity);\n        // add the moon to the planet (so it follows the planet's orbit)\n        planetEntity.entity.add(moonEntity.entity);\n      }\n\n      bodies.push(planetEntity);\n      scene.add(planetEntity.entity);\n    }\n  }\n};\n","import { Entity } from \"./Entity\";\n\nexport class Moon extends Entity {\n  protected getMapColour(height: number, y: number): number[] {\n    const ratio = height / 255;\n\n    const { r, g, b } = this.params.colour!;\n\n    const rgba = [Math.floor(r * 255), Math.floor(g * 255), Math.floor(b * 255), 255];\n\n    return [rgba[0] * ratio, rgba[1] * ratio, rgba[2] * ratio, rgba[3]];\n  }\n}\n","import { Random } from \"../Random\";\nimport { Entity } from \"./Entity\";\n\nexport class ClassM extends Entity {\n  private colours = {\n    oceanDark: this.getRandomColour(0),\n    oceanLight: this.getRandomColour(1),\n    beachDark: this.getRandomColour(2),\n    beachLight: this.getRandomColour(3),\n    forestDark: this.getRandomColour(4),\n    forestLight: this.getRandomColour(5),\n    jungleDark: this.getRandomColour(6),\n    jungleLight: this.getRandomColour(7),\n    savannahDark: this.getRandomColour(8),\n    savannahLight: this.getRandomColour(9),\n    desertDark: this.getRandomColour(10),\n    desertLight: this.getRandomColour(11),\n    snowDark: this.getRandomColour(12),\n    snowLight: this.getRandomColour(13),\n  };\n\n  protected getMapColour(height: number, y: number) {\n    const colour = this.getColourForHeight(height);\n    return colour;\n  }\n\n  private getColourForHeight(height: number) {\n    const levels = [\n      // sea\n      {\n        min: 0,\n        max: 60,\n        dark: this.colours.oceanDark,\n        light: this.colours.oceanLight,\n      },\n      // beach\n      {\n        min: 60,\n        max: 70,\n        dark: this.colours.oceanLight,\n        light: this.colours.beachLight,\n      },\n      // forest\n      {\n        min: 70,\n        max: 110,\n        dark: this.colours.forestDark,\n        light: this.colours.forestLight,\n      },\n      // jungle\n      {\n        min: 110,\n        max: 120,\n        dark: this.colours.jungleDark,\n        light: this.colours.jungleLight,\n      },\n      // savannah\n      {\n        min: 120,\n        max: 140,\n        dark: this.colours.savannahDark,\n        light: this.colours.savannahLight,\n      },\n      // desert\n      {\n        min: 120,\n        max: 150,\n        dark: this.colours.desertDark,\n        light: this.colours.desertLight,\n      },\n    ];\n\n    for (const level of levels) {\n      if (height < level.max) {\n        return this.getRangeColour(level, height);\n      }\n    }\n\n    return this.colours.snowLight;\n  }\n\n  private getRandomColour(colIndex: number) {\n    const seed = [...this.params.baseSeed, colIndex];\n\n    const min = 0.2;\n    return [\n      255 * Random.getRandomFloat(min, 1, [...seed, 0]),\n      255 * Random.getRandomFloat(min, 1, [...seed, 1]),\n      255 * Random.getRandomFloat(min, 1, [...seed, 2]),\n      255,\n    ];\n  }\n}\n","import { Entity } from \"./Entity\";\n\nexport class Sun extends Entity {\n  protected getMapColour(height: number, y: number): number[] {\n    const { r, g, b } = this.params.colour!;\n    const rgba = [Math.floor(r * 255), Math.floor(g * 255), Math.floor(b * 255), 255];\n    return [rgba[0], rgba[1], rgba[2], rgba[3]];\n  }\n}\n","import { Entity } from \"./Entity\";\n\nconst colours = {\n  oceanDark: [0, 24, 168, 255],\n  oceanLight: [0, 105, 148, 255],\n  beachDark: [140, 129, 95, 255],\n  beachLight: [221, 202, 146, 255],\n  forestDark: [0, 66, 37, 255],\n  forestLight: [0, 127, 72, 255],\n  jungleDark: [48, 102, 79, 255],\n  jungleLight: [57, 122, 94, 255],\n  savannahDark: [136, 155, 105, 255],\n  savannahLight: [165, 189, 126, 255],\n  desertDark: [175, 175, 144, 255],\n  desertLight: [198, 198, 167, 255],\n  snowDark: [200, 200, 200, 255],\n  snowLight: [255, 255, 255, 255],\n};\n\nexport class Earth extends Entity {\n  protected getMapColour(height: number, y: number) {\n    const colour = this.getColourForHeight(height);\n\n    // if (y > this.textureHeight * 0.9) {\n    //   return this.lerpColour(colour, colours.snow, y / this.textureHeight);\n    // }\n\n    return colour;\n  }\n\n  private getColourForHeight(height: number) {\n    const levels = [\n      // sea\n      {\n        min: 0,\n        max: 60,\n        dark: colours.oceanDark,\n        light: colours.oceanLight,\n      },\n      // beach\n      {\n        min: 60,\n        max: 70,\n        dark: colours.oceanLight,\n        light: colours.beachLight,\n      },\n      // forest\n      {\n        min: 70,\n        max: 110,\n        dark: colours.forestDark,\n        light: colours.forestLight,\n      },\n      // jungle\n      {\n        min: 110,\n        max: 120,\n        dark: colours.jungleDark,\n        light: colours.jungleLight,\n      },\n      // savannah\n      {\n        min: 120,\n        max: 140,\n        dark: colours.savannahDark,\n        light: colours.savannahLight,\n      },\n      // desert\n      {\n        min: 120,\n        max: 150,\n        dark: colours.desertDark,\n        light: colours.desertLight,\n      },\n    ];\n\n    for (const level of levels) {\n      if (height < level.max) {\n        return this.getRangeColour(level, height);\n      }\n    }\n\n    return colours.snowLight;\n  }\n}\n","import \"./index.css\";\n\nimport * as app from \"./app/app\";\n\napp.init();\napp.animate();\n"],"sourceRoot":""}