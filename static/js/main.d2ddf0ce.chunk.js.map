{"version":3,"sources":["app/entities/Entity.ts","components/LoadingIndicator/LoadingIndicator.tsx","components/PlanetDataSheet/PlanetDataSheet.tsx","components/App/App.tsx","app/utils/NoiseMapGenerator.ts","app/utils/planetNames.ts","app/utils/Random.ts","app/utils/SolarSystemGenerator.ts","app/entities/Moon.ts","app/entities/ClassM.ts","app/entities/Star.ts","app/entities/Earth.ts","index.tsx","app/SolarSystemApp.ts"],"names":["EntityType","LoadingIndicator","show","className","PlanetDataSheet","planet","properties","name","moons","length","orbitInclanation","map","prop","App","solarSystemApp","useState","isLoading","setIsLoading","undefined","selectedPlanet","setSelectedPlanet","useEffect","init","onInitialising","handleInitialising","onInitialised","handleInitialised","onSelectPlanet","handleSelectPlanet","NoiseMapGenerator","seed","noiseGenerator","this","SimplexNoise","width","height","x","y","noise","getMixedFrequencyNoise","Math","pow","makeSeamlessVertically","makeSeamlessHorizontally","frequency","xOffset","yOffset","_x","_y","amplitude","n","noise2D","frequencies","sumOfAmplitudes","reduce","previous","index","getNoise","noiseMap","stitchWidth","v","o","MathUtils","lerp","stitchHeight","k","ceil","s1","s2","c","Entity","id","entityType","radius","params","entity","sphere","orbit","textureWidth","textureHeight","maxTerrainHeight","loader","TextureLoader","sphereGeometry","orbitGeometry","material","heightMapTexture","colourMapTexture","texture","Group","terrainHeight","terrainMaps","generateTerrainMaps","CanvasTexture","heightMap","canvas","mapping","EquirectangularReflectionMapping","MeshPhongMaterial","bumpMap","bumpScale","displacementMap","displacementScale","texturePath","loadAsync","MeshBasicMaterial","color","colour","SphereBufferGeometry","Mesh","castShadow","receiveShadow","orbitEntity","orbitEntityPos","position","orbitRadius","createOrbitCircle","add","set","z","rotation","degToRad","orbitStartPosition","clock","speed","getElapsedTime","orbitSpeed","orbitDirection","spinSpeed","spinDirection","onShow","dispose","_dispose","heightMapContext","getCanvasContext","heightMapImageData","createImageData","heightMapData","data","colourMapContext","colourMapImageData","colourMapData","baseSeed","acc","cur","generateNoiseMap","i","colourValue","heightColour","ci","mapColour","getMapColour","putImageData","level","lerpColour","dark","light","min","max","col1","col2","ratio","convertToColor","toArray","Color","setRGB","ctx","document","createElement","getContext","fillStyle","fillRect","BufferGeometry","verts","LineBasicMaterial","opacity","transparent","theta","PI","push","cos","sin","vertices","Float32Array","setAttribute","BufferAttribute","Line","planetNames","Random","mt19937","factory","rand","floor","getRandom","array","getRandomInt","x0","y0","z0","u","random","phi","acos","seedIndexes","SolarSystemGenerator","EntityId","solarSystem","stars","planets","getNextId","orbitEntityId","getRandomFloat","coinToss","starIndex","star","numberOfPlanets","planetIndex","jupiterRadius","mercuryRadius","planetRadius","numberOfMoons","planetMoons","moonIndex","randomOrbitDirection","randomSpinSpeed","minOrbitRadius","moonRadius","moon","rgb","getRandomRgb","prevPlanet","currentPlanetMoonRadius","firstPlanetOrbitRadius","prevPlanetOrbitRadius","prevPlanetMoonRadius","orbitPadding","planetName","getRandomFromArray","Moon","r","g","b","rgba","ClassM","colours","oceanDark","getRandomColour","oceanLight","beachDark","beachLight","forestDark","forestLight","jungleDark","jungleLight","savannahDark","savannahLight","desertDark","desertLight","snowDark","snowLight","getColourForHeight","getRangeColour","colIndex","Star","Earth","ReactDOM","render","StrictMode","isRunning","scene","camera","Clock","bodies","renderer","orbitControls","stats","showPlanetId","cameraInitialPosition","spaceTexture","gui","guiViewActionsFolder","guiPlanetsFolder","ambientLight","pointLight","options","simulationSpeed","showOrbits","followPlanetName","buttonHandlers","resetView","newSeed","randInt","changeSeed","updateDisplay","clearScene","generate","_init","then","animate","a","AmbientLight","PointLight","createSolarSystem","filter","Planet","addFolder","open","onChange","toggleOrbits","p","requestAnimationFrame","forEach","body","update","find","pos","Vector3","getWorldPosition","lookAt","target","removeFolder","destroy","error","clear","OrbitControls","domElement","handleShowPlanet","maxPlanetOrbitSpeed","maxMoonOrbitSpeed","starEntity","create","planetParams","planetEntity","moonEntity","Scene","background","setHex","CubeTextureLoader","load","Camera","PerspectiveCamera","window","innerWidth","innerHeight","WebGLRenderer","powerPreference","antialias","setSize","setPixelRatio","devicePixelRatio","shadowMap","enabled","appendChild","enableDamping","Stats","dom","GUI","onFinishChange","getElementById"],"mappings":"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,YACA,UACA,WACA,UACA,WACA,WACA,QACA,SACA,QACA,QACA,SACA,UACA,SACA,SACA,WACA,UACA,UACA,SACA,cACA,UACA,SACA,SACA,WACA,SACA,WACA,UACA,YACA,YACA,SACA,aACA,UACA,UACA,aACA,gBACA,WACA,YACA,WACA,UACA,WACA,WACA,WACA,WACA,QACA,QACA,cACA,OACA,QACA,SACA,YACA,UACA,SACA,SACA,WACA,YACA,QACA,OACA,SACA,eACA,SACA,UACA,SACA,WACA,WACA,QACA,SACA,WACA,SACA,WACA,SACA,WACA,UACA,YACA,UACA,QACA,cACA,YACA,SACA,SACA,SACA,OACA,WACA,QACA,UACA,WACA,WACA,QACA,SACA,SACA,OACA,UACA,SACA,UACA,UACA,SACA,YACA,WACA,OACA,KACA,MACA,QACA,SACA,WACA,UACA,UACA,OACA,MACA,OACA,WACA,aACA,SACA,QACA,UACA,WACA,YACA,aACA,WACA,UACA,UACA,QACA,QACA,SACA,WACA,QACA,UACA,QACA,SACA,WACA,OACA,OACA,UACA,WACA,WACA,QACA,SACA,SACA,QACA,WACA,WACA,gBACA,UACA,SACA,SACA,SACA,UACA,OACA,QACA,QACA,WACA,aACA,UACA,MACA,SACA,SACA,gBACA,SACA,SACA,QACA,QACA,SACA,QACA,YACA,YACA,aACA,OACA,OACA,WACA,WACA,QACA,OACA,SACA,WACA,QACA,SACA,gBACA,gBACA,cACA,aACA,YACA,aACA,aACA,SACA,aACA,QACA,UACA,WACA,WACA,QACA,SACA,UACA,SACA,kBACA,KACA,UACA,QACA,YACA,UACA,OACA,SACA,QACA,QACA,UACA,OACA,UACA,WACA,QACA,UACA,SACA,QACA,UACA,iBACA,QACA,QACA,SACA,QACA,aACA,UACA,QACA,OACA,SACA,UACA,OACA,QACA,iBACA,MACA,QACA,OACA,SACA,SACA,QACA,OACA,QACA,YACA,UACA,QACA,QACA,SACA,UACA,WACA,YACA,SACA,WACA,WACA,YACA,SACA,SACA,QACA,QACA,UACA,QACA,WACA,YACA,QACA,aACA,QACA,cACA,WACA,OACA,OACA,QACA,WACA,QACA,SACA,UACA,YACA,QACA,UACA,cACA,SACA,SACA,SACA,SACA,OACA,QACA,SACA,QACA,KACA,YACA,WACA,SACA,MACA,WACA,SACA,UACA,UACA,iBACA,UACA,WACA,UACA,QACA,SACA,aACA,cACA,MACA,UACA,QACA,UACA,UACA,YACA,KACA,SACA,MACA,MACA,UACA,QACA,WACA,SACA,QACA,YACA,cACA,YACA,UACA,UACA,SACA,SACA,UACA,WACA,WACA,YACA,YACA,cACA,UACA,UACA,WACA,WACA,cACA,YACA,UACA,aACA,UACA,YACA,YACA,WACA,OACA,SACA,YACA,aACA,WACA,YACA,aACA,aACA,WACA,SACA,aACA,UACA,WACA,QACA,UACA,SACA,aACA,aACA,aACA,UACA,SACA,YACA,UACA,SACA,WACA,eACA,UACA,MACA,OACA,UACA,WACA,SACA,aACA,SACA,SACA,SACA,SACA,SACA,UACA,WACA,QACA,SACA,WACA,MACA,SACA,SACA,SACA,SACA,QACA,OACA,cACA,SACA,QACA,WACA,QACA,YACA,WACA,aACA,SACA,SACA,WACA,cACA,SACA,UACA,WACA,UACA,SACA,UACA,SACA,QACA,SACA,WACA,WACA,YACA,SACA,WACA,SACA,SACA,SACA,SACA,SACA,UACA,SACA,SACA,QACA,QACA,SACA,SACA,UACA,WACA,MACA,Q,iBC5eWC,EAAb,8FACE,SAAwB9J,GAKtB,OAJW+J,IAAQC,QAAQ,CACzBhK,KAAMA,GAGDiK,GARC,aAEZ,0BASE,SAA2BlC,EAAaC,EAAahI,GACnD,OAAOU,KAAKwJ,MAAMJ,EAAOK,UAAUnK,IAASgI,EAAMD,EAAM,GAAKA,KAVjE,4BAaE,SAA6BA,EAAaC,EAAahI,GACrD,OAAO8J,EAAOK,UAAUnK,IAASgI,EAAMD,GAAOA,IAdlD,sBAiBE,SAAuB/H,GACr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","file":"static/js/main.d2ddf0ce.chunk.js","sourcesContent":["import {\n  CanvasTexture,\n  Clock,\n  Color,\n  EquirectangularReflectionMapping,\n  Group,\n  Line,\n  LineBasicMaterial,\n  Material,\n  Mesh,\n  MeshBasicMaterial,\n  MeshPhongMaterial,\n  SphereBufferGeometry,\n  TextureLoader,\n  Vector3,\n  BufferGeometry,\n  BufferAttribute,\n  Texture,\n  MathUtils,\n} from \"three\";\n\nimport { NoiseMapGenerator } from \"../utils/NoiseMapGenerator\";\n\nexport enum EntityType {\n  Star,\n  Planet,\n  Moon,\n}\n\ntype TerrainMaps = {\n  heightMap: CanvasRenderingContext2D;\n  map: CanvasRenderingContext2D;\n};\n\nexport type EntityParams = {\n  baseSeed: number[];\n  position: Vector3;\n  orbitEntity: Entity | false;\n  orbitDirection: number;\n  orbitSpeed: number;\n  orbitRadius: number;\n  orbitInclanation: number;\n  orbitStartPosition: number;\n  spinSpeed: number;\n  spinDirection: number;\n\n  terrainHeight?: number;\n  colour?: Color;\n  castShadow?: boolean;\n  receiveShadow?: boolean;\n  texturePath?: string;\n  onShow?: (id: number) => void;\n};\n\nexport abstract class Entity {\n  public id: number;\n  public name: string;\n  public entityType: EntityType;\n  public entity: Group;\n  public params: EntityParams;\n  public radius: number;\n  public sphere!: Mesh;\n  public orbit!: Material;\n\n  protected textureWidth: number;\n  protected textureHeight: number;\n  protected abstract maxTerrainHeight: number;\n\n  private loader = new TextureLoader();\n  private sphereGeometry!: SphereBufferGeometry;\n  private orbitGeometry!: BufferGeometry;\n  private material!: Material;\n  private heightMapTexture!: CanvasTexture;\n  private colourMapTexture!: CanvasTexture;\n  private texture!: Texture;\n\n  constructor(id: number, name: string, entityType: EntityType, radius: number, params: EntityParams) {\n    this.id = id;\n    this.name = name;\n    this.entityType = entityType;\n    this.radius = radius;\n    this.params = params;\n\n    this.entity = new Group();\n\n    this.textureWidth = 512;\n    this.textureHeight = 256;\n  }\n\n  public async create() {\n    if (this.params.terrainHeight && this.params.terrainHeight > 0) {\n      const terrainMaps = this.generateTerrainMaps();\n\n      this.heightMapTexture = new CanvasTexture(terrainMaps.heightMap.canvas);\n      this.colourMapTexture = new CanvasTexture(terrainMaps.map.canvas);\n\n      this.heightMapTexture.mapping = EquirectangularReflectionMapping;\n      this.colourMapTexture.mapping = EquirectangularReflectionMapping;\n\n      const terrainHeight = Math.ceil(this.params.terrainHeight * this.maxTerrainHeight);\n\n      this.material = new MeshPhongMaterial({\n        bumpMap: this.heightMapTexture,\n        bumpScale: terrainHeight,\n        map: this.colourMapTexture,\n        displacementMap: this.heightMapTexture,\n        displacementScale: terrainHeight,\n      });\n    } else {\n      if (this.params.texturePath) {\n        this.texture = await this.loader.loadAsync(this.params.texturePath);\n        this.material = new MeshBasicMaterial({ map: this.texture, color: this.params.colour });\n      } else {\n        this.material = new MeshBasicMaterial({\n          color: this.params.colour,\n        });\n      }\n    }\n\n    this.sphereGeometry = new SphereBufferGeometry(this.radius, 64, 48);\n    this.sphere = new Mesh(this.sphereGeometry, this.material);\n\n    this.sphere.castShadow = !!this.params.castShadow;\n    this.sphere.receiveShadow = !!this.params.receiveShadow;\n\n    // const geom = new PlaneGeometry(this.textureWidth, this.textureHeight);\n    // this.sphere = new Mesh(geom, material);\n\n    if (this.params.orbitEntity) {\n      const orbitEntityPos = this.params.orbitEntity.sphere.position;\n      const orbitRadius = this.params.orbitRadius || 400;\n\n      // create an orbit cirlce and add it to the entity\n      const orbit = this.createOrbitCircle(orbitRadius);\n      this.entity.add(orbit);\n\n      // position the sphere at the edge of the orbit circle\n      this.sphere.position.set(orbitRadius, 0, 0);\n\n      // position the whole entity at the orbit entity position\n      this.entity.position.set(orbitEntityPos.x, orbitEntityPos.y, orbitEntityPos.z);\n\n      // set orbit inclanation/tilt\n      this.entity.rotation.x = MathUtils.degToRad(this.params.orbitInclanation);\n\n      // set initial orbit position\n      this.entity.rotation.y = MathUtils.degToRad(360 * this.params.orbitStartPosition);\n    }\n\n    this.entity.add(this.sphere);\n\n    return this;\n  }\n\n  public animate(clock: Clock, speed: number) {\n    clock.getElapsedTime();\n\n    if (this.params.orbitEntity) {\n      const orbitSpeed = this.params.orbitSpeed * speed;\n      const orbitDirection = this.params.orbitDirection;\n      this.entity.rotation.y += orbitSpeed * orbitDirection;\n    }\n\n    if (this.params.spinSpeed) {\n      this.sphere.rotation.y += this.params.spinSpeed * speed * this.params.spinDirection;\n    }\n  }\n\n  public show() {\n    if (this.params.onShow) {\n      this.params.onShow(this.id);\n    }\n  }\n\n  protected abstract _dispose(): void;\n  public dispose() {\n    // geometries\n    this.sphereGeometry?.dispose();\n    this.orbitGeometry?.dispose();\n\n    // materials\n    this.orbit?.dispose();\n    this.material?.dispose();\n\n    // textures\n    this.heightMapTexture?.dispose();\n    this.colourMapTexture?.dispose();\n    this.texture?.dispose();\n\n    // call implemented dispose method\n    this._dispose();\n  }\n\n  protected generateTerrainMaps(): TerrainMaps {\n    const recordSize = 4;\n\n    const heightMapContext = this.getCanvasContext();\n    const heightMapImageData = heightMapContext.createImageData(this.textureWidth, this.textureHeight);\n    const heightMapData = heightMapImageData.data;\n\n    const colourMapContext = this.getCanvasContext();\n    const colourMapImageData = colourMapContext.createImageData(this.textureWidth, this.textureHeight);\n    const colourMapData = colourMapImageData.data;\n\n    const seed = [...this.params.baseSeed, 99999].reduce((acc, cur) => (acc += cur));\n    const ng = new NoiseMapGenerator(seed);\n    const noiseMap = ng.generateNoiseMap(this.textureWidth, this.textureHeight);\n\n    for (let i = 0; i < heightMapData.length; i += recordSize) {\n      const x = (i / recordSize) % this.textureWidth;\n      const y = ~~(i / recordSize / this.textureWidth);\n\n      const noise = noiseMap[x][y];\n      const generatedColourValue = 255 * noise;\n\n      let colourValue = generatedColourValue;\n\n      // RGBA\n      const heightColour = [colourValue, colourValue, colourValue, 255];\n      for (let ci = 0; ci < heightColour.length; ci++) {\n        heightMapData[i + ci] = heightColour[ci];\n      }\n\n      let mapColour = this.getMapColour(colourValue, y);\n\n      for (let ci = 0; ci < mapColour.length; ci++) {\n        colourMapData[i + ci] = mapColour[ci];\n      }\n    }\n\n    heightMapContext.putImageData(heightMapImageData, 0, 0);\n    colourMapContext.putImageData(colourMapImageData, 0, 0);\n\n    return {\n      heightMap: heightMapContext,\n      map: colourMapContext,\n    };\n  }\n\n  protected abstract getMapColour(height: number, y: number): number[];\n\n  protected getRangeColour(level: { min: number; max: number; dark: number[]; light: number[] }, height: number) {\n    return this.lerpColour(level.dark, level.light, (height - level.min) / (level.max - level.min));\n  }\n\n  protected lerpColour(col1: number[], col2: number[], ratio: number) {\n    const c = this.convertToColor(col1).lerp(this.convertToColor(col2), ratio);\n    return [...c.toArray(), 255];\n  }\n\n  protected convertToColor(colour: number[]) {\n    return new Color().setRGB(colour[0], colour[1], colour[2]);\n  }\n\n  protected getCanvasContext() {\n    const ctx = document.createElement(\"canvas\").getContext(\"2d\") as CanvasRenderingContext2D;\n    ctx.canvas.width = this.textureWidth;\n    ctx.canvas.height = this.textureHeight;\n    ctx.fillStyle = \"#fff\";\n    ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    return ctx;\n  }\n\n  private createOrbitCircle(radius: number) {\n    var segmentCount = 128;\n    this.orbitGeometry = new BufferGeometry();\n    const verts = [];\n    this.orbit = new LineBasicMaterial({ color: 0xffffff, opacity: 0.5, transparent: true });\n\n    for (var i = 0; i <= segmentCount; i++) {\n      var theta = (i / segmentCount) * Math.PI * 2;\n      verts.push(Math.cos(theta) * radius, 0, Math.sin(theta) * radius);\n    }\n    const vertices = new Float32Array(verts);\n    this.orbitGeometry.setAttribute(\"position\", new BufferAttribute(vertices, 3));\n    return new Line(this.orbitGeometry, this.orbit);\n  }\n}\n","import React from \"react\";\n\nimport \"./LoadingIndicator.css\";\n\ntype Props = {\n  show?: boolean;\n};\n\nexport const LoadingIndicator: React.FC<Props> = ({ show }) => {\n  return show ? <div className=\"loading-indicator\">Generating Solar System...</div> : null;\n};\n","import { SolarSystemEntity } from \"../../app/utils/SolarSystemGenerator\";\nimport \"./PlanetDataSheet.css\";\n\ntype Props = {\n  planet?: SolarSystemEntity;\n};\n\nexport const PlanetDataSheet: React.FC<Props> = ({ planet }) => {\n  if (!planet) {\n    return null;\n  }\n\n  const properties = [\n    [\"Name\", planet.name],\n    [\"Moons\", planet.moons.length],\n    [\"Orbital Inclanation\", `${planet.orbitInclanation}°`],\n  ];\n\n  return (\n    <div className=\"planet-datasheet\">\n      <h2>Planet Info</h2>\n\n      <ul className=\"planet-datasheet__property-list\">\n        {properties.map((prop) => (\n          <li key={prop[0]} className=\"planet-datasheet__property\">\n            <strong>{prop[0]}</strong>\n            <p>{prop[1]}</p>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { LoadingIndicator } from \"../LoadingIndicator/LoadingIndicator\";\nimport { SolarSystemApp } from \"../../app/SolarSystemApp\";\nimport { PlanetDataSheet } from \"../PlanetDataSheet/PlanetDataSheet\";\nimport { SolarSystemEntity } from \"../../app/utils/SolarSystemGenerator\";\n\ntype Props = {\n  solarSystemApp: SolarSystemApp;\n};\n\nexport const App: React.FC<Props> = ({ solarSystemApp }) => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [selectedPlanet, setSelectedPlanet] = useState<SolarSystemEntity | undefined>(undefined);\n\n  useEffect(() => {\n    solarSystemApp.init();\n    solarSystemApp.onInitialising = handleInitialising;\n    solarSystemApp.onInitialised = handleInitialised;\n    solarSystemApp.onSelectPlanet = handleSelectPlanet;\n  }, [solarSystemApp]);\n\n  const handleInitialising = () => {\n    setIsLoading(true);\n  };\n\n  const handleInitialised = () => {\n    setIsLoading(false);\n  };\n\n  const handleSelectPlanet = (planet?: SolarSystemEntity) => {\n    setSelectedPlanet(planet);\n  };\n\n  return (\n    <>\n      <LoadingIndicator show={isLoading} />\n      <PlanetDataSheet planet={selectedPlanet}></PlanetDataSheet>\n    </>\n  );\n};\n","import SimplexNoise from \"simplex-noise\";\nimport { MathUtils } from \"three\";\n\nexport class NoiseMapGenerator {\n  private noiseGenerator: SimplexNoise;\n\n  constructor(seed?: number) {\n    this.noiseGenerator = new SimplexNoise(seed);\n  }\n\n  public generateNoiseMap(width: number, height: number): number[][] {\n    const map: number[][] = [];\n\n    for (let x = 0; x < width; x++) {\n      map[x] = [];\n      for (let y = 0; y < height; y++) {\n        // add noise at various frequencies\n        let noise = this.getMixedFrequencyNoise(\n          x,\n          y,\n          [0.01, 0.02, 0.04, 0.08, 0.16, 0.32, 0.64, 1.28]\n        );\n        noise = Math.pow(noise, 2.3);\n\n        map[x][y] = noise;\n      }\n    }\n\n    this.makeSeamlessVertically(map, height * 0.2);\n    this.makeSeamlessHorizontally(map, width * 0.05);\n\n    return map;\n  }\n\n  private getNoise(\n    x: number,\n    y: number,\n    frequency: number,\n    xOffset: number = 0,\n    yOffset: number = 0\n  ) {\n    const _x = frequency * x + xOffset;\n    const _y = frequency * y + yOffset;\n    const amplitude = 1 / frequency;\n\n    // get noise in the range 0-1\n    const n = this.noiseGenerator.noise2D(_x, _y) / 2 + 0.5;\n\n    let noise = amplitude * n;\n    return noise;\n  }\n\n  private getMixedFrequencyNoise(x: number, y: number, frequencies: number[]) {\n    let sumOfAmplitudes = 0;\n    const noise = frequencies.reduce(\n      (previous: number, frequency: number, index: number) => {\n        sumOfAmplitudes += 1 / frequency;\n\n        // add offsets so different frequencies (octaves)\n        // sample from a different part of the noise space\n        const xOffset = index * 10;\n        const yOffset = index * 100;\n        return previous + this.getNoise(x, y, frequency, xOffset, yOffset);\n      },\n      0\n    );\n    return noise / sumOfAmplitudes;\n  }\n\n  // ported from here:\n  // https://medium.com/nerd-for-tech/making-a-seamless-perlin-noise-in-c-4cfc12a90f93\n  private makeSeamlessHorizontally(noiseMap: number[][], stitchWidth: number) {\n    const width = noiseMap.length;\n    const height = noiseMap[0].length;\n\n    // iterate on the stitch band (on the left\n    // of the noise)\n    for (let x = 0; x < stitchWidth; x++) {\n      // get the transparency value from\n      // a linear gradient\n      const v = x / stitchWidth;\n\n      for (let y = 0; y < height; y++) {\n        // compute the \"mirrored x position\":\n        // the far left is copied on the right\n        // and the far right on the left\n        const o = ~~(width - stitchWidth + x);\n        // copy the value on the right of the noise\n        noiseMap[o][y] = MathUtils.lerp(\n          noiseMap[o][y],\n          noiseMap[~~(stitchWidth - x)][y],\n          v\n        );\n      }\n    }\n  }\n\n  // ported from here:\n  // https://medium.com/nerd-for-tech/making-a-seamless-perlin-noise-in-c-4cfc12a90f93\n  private makeSeamlessVertically(noiseMap: number[][], stitchHeight: number) {\n    const width = noiseMap.length;\n    const height = noiseMap[0].length;\n\n    // iterate through the stitch band (both\n    // top and bottom sides are treated\n    // simultaneously because its mirrored)\n    for (let y = 0; y < stitchHeight; y++) {\n      // number of neighbour pixels to\n      // consider for the average (= kernel size)\n      const k = Math.ceil(stitchHeight - y);\n      // go through the entire row\n      for (let x = 0; x < width; x++) {\n        // compute the sum of pixel values\n        // in the top and the bottom bands\n        let s1 = 0.0;\n        let s2 = 0.0;\n        let c = 0;\n        for (let o = x - k; o < x + k; o++) {\n          if (o < 0 || o >= width) {\n            continue;\n          }\n\n          s1 += noiseMap[o][y];\n          s2 += noiseMap[o][height - y - 1];\n          c++;\n        }\n        // compute the means and assign them to\n        // the pixels in the top and the bottom\n        // rows\n        noiseMap[x][y] = s1 / c;\n        noiseMap[x][height - y - 1] = s2 / c;\n      }\n    }\n  }\n}\n","// https://www.imagineforest.com/blog/planet-name-generator/\nexport const planetNames = [\n  \"Acanthis\",\n  \"Achelous\",\n  \"Acheron\",\n  \"Achilles\",\n  \"Achilles\",\n  \"Achlys\",\n  \"Actaeon\",\n  \"Admetus\",\n  \"Adoni\",\n  \"Aeacus\",\n  \"Aëdon\",\n  \"Aeëtes\",\n  \"Aegisthus\",\n  \"Aegyptus\",\n  \"Aella\",\n  \"Aello\",\n  \"Aeneas\",\n  \"Aeolus\",\n  \"Aeternae\",\n  \"Aethon\",\n  \"Agamemnon\",\n  \"Aglaia\",\n  \"Agreus\",\n  \"Agriopas\",\n  \"Agrius\",\n  \"Ajax\",\n  \"Alcestis\",\n  \"Alcyone\",\n  \"Alcyoneus\",\n  \"Alecto\",\n  \"Alectryon\",\n  \"Alkyonides\",\n  \"Almops\",\n  \"Aloadae\",\n  \"Althaea\",\n  \"Amazon\",\n  \"Amazons\",\n  \"Ampelos\",\n  \"Amphion\",\n  \"Amphisbaena\",\n  \"Amphithemis\",\n  \"Amphitrite\",\n  \"Amphitryon\",\n  \"Amycus\",\n  \"Anchises\",\n  \"Andromache\",\n  \"Andromeda\",\n  \"Anteros\",\n  \"Antigone\",\n  \"Antinoüs\",\n  \"Antiphates\",\n  \"Aphrodit\",\n  \"Aphrodite\",\n  \"Apollo\",\n  \"Aquilo\",\n  \"Arachne\",\n  \"Arae\",\n  \"Ares\",\n  \"Arges\",\n  \"Argo\",\n  \"Argos\",\n  \"Argus\",\n  \"Argus\",\n  \"Ariadne\",\n  \"Arion\",\n  \"Arion\",\n  \"Artemi\",\n  \"Artemis\",\n  \"Asbolus\",\n  \"Ascalaphus\",\n  \"Asclepiu\",\n  \"Asclepius\",\n  \"Astarte\",\n  \"Asterius\",\n  \"Astraea\",\n  \"Atalanta\",\n  \"Atalanta\",\n  \"Athen\",\n  \"Athena\",\n  \"Athos\",\n  \"Atlas\",\n  \"Atreus\",\n  \"Atropos\",\n  \"Aurora\",\n  \"Auster\",\n  \"Autonous\",\n  \"Avernus\",\n  \"Bacchus\",\n  \"Balius\",\n  \"Bellerophon\",\n  \"Bellona\",\n  \"Bienor\",\n  \"Boreas\",\n  \"Briareus\",\n  \"Cadmus\",\n  \"Calliope\",\n  \"Calypso\",\n  \"Carduelis\",\n  \"Cassandra\",\n  \"Castor\",\n  \"Catoblepas\",\n  \"Celaeno\",\n  \"Centaur\",\n  \"Centauride\",\n  \"Centauromachy\",\n  \"Centaurs\",\n  \"Centaurus\",\n  \"Cephalus\",\n  \"Cepheus\",\n  \"Ceramici\",\n  \"Cerastes\",\n  \"Cerberus\",\n  \"Cercopes\",\n  \"Ceres\",\n  \"Cetus\",\n  \"Ceuthonymus\",\n  \"Ceyx\",\n  \"Chaos\",\n  \"Charon\",\n  \"Charybdis\",\n  \"Chimera\",\n  \"Chiron\",\n  \"Chiron\",\n  \"Chryseis\",\n  \"Chthonius\",\n  \"Circe\",\n  \"Clio\",\n  \"Clotho\",\n  \"Clytemnestra\",\n  \"Cornix\",\n  \"Coronis\",\n  \"Corvus\",\n  \"Crocotta\",\n  \"Crommyon\",\n  \"Cronu\",\n  \"Cronus\",\n  \"Cyclopes\",\n  \"Cycnus\",\n  \"Cyllarus\",\n  \"Cyprus\",\n  \"Daedalus\",\n  \"Daemons\",\n  \"Damarchus\",\n  \"Damysus\",\n  \"Danae\",\n  \"Danaïdes\",\n  \"Danaüs\",\n  \"Daphne\",\n  \"Demete\",\n  \"Dictys\",\n  \"Dido\",\n  \"Diomedes\",\n  \"Dione\",\n  \"Dionysu\",\n  \"Dionysus\",\n  \"Dioscuri\",\n  \"Dryad\",\n  \"Dryads\",\n  \"Echion\",\n  \"Echo\",\n  \"Eidolon\",\n  \"Elatus\",\n  \"Electra\",\n  \"Empousa\",\n  \"Empusa\",\n  \"Enceladus\",\n  \"Endymion\",\n  \"Enyo\",\n  \"Eo\",\n  \"Eos\",\n  \"Erato\",\n  \"Erebus\",\n  \"Eridanos\",\n  \"Erigone\",\n  \"Erinyes\",\n  \"Eris\",\n  \"Ero\",\n  \"Eros\",\n  \"Eteocles\",\n  \"Euphrosyne\",\n  \"Europa\",\n  \"Eurus\",\n  \"Euryale\",\n  \"Eurydice\",\n  \"Eurynomos\",\n  \"Eurystheus\",\n  \"Eurytion\",\n  \"Eurytus\",\n  \"Euterpe\",\n  \"Fates\",\n  \"Fauns\",\n  \"Faunus\",\n  \"Favonius\",\n  \"Flora\",\n  \"Fortuna\",\n  \"Furie\",\n  \"Furies\",\n  \"Gadflies\",\n  \"Gaea\",\n  \"Gaia\",\n  \"Galatea\",\n  \"Ganymede\",\n  \"Gegenees\",\n  \"Gello\",\n  \"Gerana\",\n  \"Geryon\",\n  \"giant\",\n  \"Giantess\",\n  \"Gigantes\",\n  \"Golden Fleece\",\n  \"Gorgons\",\n  \"Graces\",\n  \"Graeae\",\n  \"Graeae\",\n  \"Griffin\",\n  \"Hade\",\n  \"Hades\",\n  \"Hades\",\n  \"halcyons\",\n  \"Hamadryads\",\n  \"Harpies\",\n  \"Heb\",\n  \"Hecate\",\n  \"Hecate\",\n  \"Hecatonchires\",\n  \"Hector\",\n  \"Hecuba\",\n  \"Helen\",\n  \"Helio\",\n  \"Helios\",\n  \"Helle\",\n  \"Hellhound\",\n  \"Hephaestu\",\n  \"Hephaestus\",\n  \"Hera\",\n  \"Hera\",\n  \"Heracles\",\n  \"Hercules\",\n  \"Herme\",\n  \"Hero\",\n  \"heroes\",\n  \"Hesperus\",\n  \"Hesti\",\n  \"Hestia\",\n  \"Hieracosphinx\",\n  \"Hippalectryon\",\n  \"Hippocampus\",\n  \"Hippodamia\",\n  \"Hippolyte\",\n  \"Hippolytus\",\n  \"Hippomenes\",\n  \"Hoopoe\",\n  \"Hyacinthus\",\n  \"Hydra\",\n  \"Hylaeus\",\n  \"Hylonome\",\n  \"Hyperion\",\n  \"Hypno\",\n  \"Hypnos\",\n  \"Iapetus\",\n  \"Icarus\",\n  \"Ichthyocentaurs\",\n  \"Io\",\n  \"Iobates\",\n  \"Ionia\",\n  \"Iphigenia\",\n  \"Ipotane\",\n  \"Iris\",\n  \"Ismene\",\n  \"Ixion\",\n  \"Janus\",\n  \"Jocasta\",\n  \"Juno\",\n  \"Jupiter\",\n  \"Juventas\",\n  \"Keres\",\n  \"Kobaloi\",\n  \"Labour\",\n  \"Ladon\",\n  \"Laelaps\",\n  \"Laestrygonians\",\n  \"Laius\",\n  \"Lamia\",\n  \"Lamiai\",\n  \"Lamos\",\n  \"Laocoön\",\n  \"Lapiths\",\n  \"Lares\",\n  \"Lark\",\n  \"Latona\",\n  \"Lavinia\",\n  \"Leda\",\n  \"Lerna\",\n  \"Lernaean Hydra\",\n  \"Let\",\n  \"Lethe\",\n  \"Leto\",\n  \"Lycaon\",\n  \"Lykaia\",\n  \"Maera\",\n  \"Maia\",\n  \"Manes\",\n  \"Manticore\",\n  \"Marsyas\",\n  \"Medea\",\n  \"Medea\",\n  \"Medusa\",\n  \"Megaera\",\n  \"Meleager\",\n  \"Melpomene\",\n  \"Memnon\",\n  \"Menelaus\",\n  \"Menoetes\",\n  \"Menoetius\",\n  \"Mentor\",\n  \"Merope\",\n  \"Midas\",\n  \"Mimas\",\n  \"Minerva\",\n  \"Minos\",\n  \"Minotaur\",\n  \"Mnemosyne\",\n  \"Momus\",\n  \"Monocerata\",\n  \"Mormo\",\n  \"Mormolykeia\",\n  \"Morpheus\",\n  \"Mors\",\n  \"Muse\",\n  \"Muses\",\n  \"Myrmekes\",\n  \"Mysia\",\n  \"Naiads\",\n  \"Napaeae\",\n  \"Narcissus\",\n  \"Nemea\",\n  \"Nemesis\",\n  \"Neoptolemus\",\n  \"nereid\",\n  \"Nessus\",\n  \"Nestor\",\n  \"Nestor\",\n  \"Nike\",\n  \"Niobe\",\n  \"Nomios\",\n  \"Notus\",\n  \"Ny\",\n  \"Nyctimene\",\n  \"Nyctimus\",\n  \"Nymphs\",\n  \"Nyx\",\n  \"Oceanids\",\n  \"Oceanu\",\n  \"Oceanus\",\n  \"Ocypete\",\n  \"Odontotyrannos\",\n  \"Odysseu\",\n  \"Odysseus\",\n  \"Oedipus\",\n  \"Oenoe\",\n  \"Oenone\",\n  \"Onocentaur\",\n  \"Ophiotaurus\",\n  \"Ops\",\n  \"Orestes\",\n  \"Orion\",\n  \"Orpheus\",\n  \"Orthrus\",\n  \"Ouroboros\",\n  \"Pa\",\n  \"Pallas\",\n  \"Pan\",\n  \"Pan\",\n  \"Pandora\",\n  \"Panes\",\n  \"panthers\",\n  \"Parcae\",\n  \"Paris\",\n  \"Parrhasia\",\n  \"Pasiphaë\",\n  \"Patroclus\",\n  \"Pegasus\",\n  \"Pegasus\",\n  \"Pelias\",\n  \"Pelops\",\n  \"Penates\",\n  \"Penelope\",\n  \"Periboea\",\n  \"Perimedes\",\n  \"Persephon\",\n  \"Persephone \",\n  \"Perseus\",\n  \"Phaedra\",\n  \"Phaethon\",\n  \"Phaethon\",\n  \"Philoctetes\",\n  \"Philomela\",\n  \"Phineus\",\n  \"Phlegethon\",\n  \"Phoenix\",\n  \"Phólos\",\n  \"Pirithous\",\n  \"Pleiades\",\n  \"Plut\",\n  \"Pollux\",\n  \"Polybotes\",\n  \"Polyhymnia\",\n  \"Polymnia\",\n  \"Polynices\",\n  \"Polyphemus\",\n  \"Polyphemus\",\n  \"Polyxena\",\n  \"Pontus\",\n  \"Porphyrion\",\n  \"Poseido\",\n  \"Poseidon\",\n  \"Priam\",\n  \"Priapus\",\n  \"Procne\",\n  \"Procrustes\",\n  \"Prometheus\",\n  \"Proserpine\",\n  \"Proteus\",\n  \"Psyche\",\n  \"Pygmalion\",\n  \"Pyramus\",\n  \"Python\",\n  \"Quirinus\",\n  \"Rhadamanthus\",\n  \"Rhaecus\",\n  \"Rhe\",\n  \"Rhea\",\n  \"Romulus\",\n  \"Sarpedon\",\n  \"Saturn\",\n  \"Satyresses\",\n  \"Satyrs\",\n  \"Scylla\",\n  \"Selene\",\n  \"Semele\",\n  \"Sileni\",\n  \"Silenus\",\n  \"Silvanus\",\n  \"Siren\",\n  \"Sirens\",\n  \"Sisyphus\",\n  \"Sol\",\n  \"Somnus\",\n  \"Sphinx\",\n  \"Sterop\",\n  \"Stheno\",\n  \"Strix\",\n  \"Styx\",\n  \"Symplegades\",\n  \"Syrinx\",\n  \"Talos\",\n  \"Tantalus\",\n  \"Taras\",\n  \"Taraxippi\",\n  \"Tartarus\",\n  \"Telemachus\",\n  \"Tellus\",\n  \"Tereus\",\n  \"Terminus\",\n  \"Terpsichore\",\n  \"Thalia\",\n  \"Thanato\",\n  \"Thanatos\",\n  \"Thaumas\",\n  \"Themis\",\n  \"Theseus\",\n  \"Thisbe\",\n  \"Thoon\",\n  \"Thrace\",\n  \"Thyestes\",\n  \"Tiresias\",\n  \"Tisiphone\",\n  \"Titans\",\n  \"Tithonus\",\n  \"Tityos\",\n  \"Triton\",\n  \"Trojan\",\n  \"Turnus\",\n  \"Typhon\",\n  \"Ulysses\",\n  \"Urania\",\n  \"Uranus\",\n  \"Venus\",\n  \"Vesta\",\n  \"Virgil\",\n  \"Vulcan\",\n  \"Xanthus\",\n  \"Zephyrus\",\n  \"Zeu\",\n  \"Zeus\",\n];\n","import mt19937 from \"@stdlib/random-base-mt19937\";\n\nconst MAX = 4294967295;\n\nexport class Random {\n  public static getRandom(seed: number[]) {\n    var rand = mt19937.factory({\n      seed: seed,\n    });\n\n    return rand() / MAX;\n  }\n\n  public static getRandomInt(min: number, max: number, seed: number[]) {\n    return Math.floor(Random.getRandom(seed) * (max - min + 1) + min);\n  }\n\n  public static getRandomFloat(min: number, max: number, seed: number[]) {\n    return Random.getRandom(seed) * (max - min) + min;\n  }\n\n  public static coinToss(seed: number[]) {\n    return Random.getRandom(seed) <= 0.5;\n  }\n\n  public static getRandomFromArray(array: any[], seed: number[]) {\n    const index = this.getRandomInt(0, array.length - 1, seed);\n    return array[index];\n  }\n\n  /**\n   * Gets a random point of a sphere, evenly distributed over the sphere.\n   * The sphere is centered at (x0,y0,z0) with the passed in radius.\n   * The returned point is returned as a three element array [x,y,z].\n   *\n   * @return [x,y,z]\n   */\n  public static getRandomPointInSphere(radius: number, x0: number, y0: number, z0: number) {\n    if (!x0) {\n      x0 = 0;\n    }\n    if (!y0) {\n      y0 = 0;\n    }\n    if (!z0) {\n      z0 = 0;\n    }\n\n    var u = Math.random();\n    var v = Math.random();\n    var theta = 2 * Math.PI * u;\n    var phi = Math.acos(1 - 2 * v);\n    var x = x0 + radius * Math.sin(phi) * Math.cos(theta);\n    var y = y0 + radius * Math.sin(phi) * Math.sin(theta);\n    var z = z0 + radius * Math.cos(phi);\n\n    return [x, y, z];\n  }\n}\n","import { planetNames } from \"./planetNames\";\nimport { Random } from \"./Random\";\n\nexport type SolarSystemEntity = {\n  id: number;\n  name: string;\n  seed: number[];\n  radius: number;\n  terrainHeight: number;\n  moons: SolarSystemEntity[];\n  orbitEntityId: number;\n  orbitRadius: number;\n  orbitDirection: number;\n  orbitSpeed: number;\n  orbitInclanation: number;\n  orbitStartPosition: number;\n  spinSpeed: number;\n  spinDirection: number;\n\n  position?: [number, number, number];\n  rgb?: [number, number, number];\n};\n\nexport type SolarSystem = {\n  stars: SolarSystemEntity[];\n  planets: SolarSystemEntity[];\n};\n\nconst seedIndexes = {\n  radius: 0,\n  terrainHeight: 1,\n  colour: 2,\n  noiseMap: 3,\n  orbitDirection: 4,\n  orbitSpeed: 5,\n  spinSpeed: 6,\n  numberOfPlanets: 7,\n  orbitRadius: 8,\n  orbitInclanation: 9,\n  spinDirection: 10,\n  orbitStartPosition: 11,\n  planetName: 12,\n};\n\nexport class SolarSystemGenerator {\n  private EntityId = 0;\n\n  private getNextId(): number {\n    this.EntityId++;\n    return this.EntityId;\n  }\n\n  public generate(seed: number): SolarSystem {\n    const solarSystem: SolarSystem = {\n      stars: [],\n      planets: [],\n    };\n\n    const stars: SolarSystemEntity[] = [\n      {\n        id: this.getNextId(),\n        name: `Star ${this.EntityId}`,\n        seed: [seed, 0],\n        position: [0, 0, 0],\n        radius: 1280,\n        terrainHeight: 0,\n        moons: [],\n        orbitEntityId: 0,\n        orbitRadius: 0,\n        orbitSpeed: 0,\n        orbitDirection: 0,\n        orbitInclanation: 0,\n        orbitStartPosition: 0,\n        spinSpeed: Random.getRandomFloat(0.0001, 0.0003, [...[seed, 0], seedIndexes.spinSpeed]),\n        spinDirection: Random.coinToss([...[seed, 0], seedIndexes.spinDirection]) ? 1 : -1,\n      },\n    ];\n\n    for (let starIndex = 0; starIndex < stars.length; starIndex++) {\n      const star = stars[starIndex];\n\n      // const oneAU = star.radius * 215;\n      // const neptuneOrbitRadius = oneAU * 30;\n\n      const numberOfPlanets = Random.getRandomInt(1, 9, [seed, starIndex, seedIndexes.numberOfPlanets]);\n\n      for (let planetIndex = 0; planetIndex < numberOfPlanets; planetIndex++) {\n        const baseSeed = [seed, starIndex, planetIndex];\n\n        // let's base our planet sizes off something from reality\n        // choose a size somewhere between mercury and double jupiter\n        const jupiterRadius = star.radius / 10;\n        const mercuryRadius = star.radius / 327;\n\n        const planetRadius = Random.getRandomInt(mercuryRadius, jupiterRadius * 2, [...baseSeed, seedIndexes.radius]);\n        const numberOfMoons = Random.getRandomInt(1, 10, [...baseSeed, seedIndexes.numberOfPlanets]);\n\n        // create the moons for the planet\n        const planetMoons = [];\n        for (let moonIndex = 0; moonIndex < numberOfMoons; moonIndex++) {\n          const baseSeed = [seed, starIndex, planetIndex, moonIndex];\n          const randomOrbitDirection = Random.coinToss([...baseSeed, seedIndexes.orbitDirection]) ? 1 : -1;\n\n          const randomSpinSpeed = Random.getRandomFloat(0.001, 0.005, [...baseSeed, seedIndexes.spinSpeed]);\n          const minOrbitRadius = Random.getRandomInt(planetRadius * 3 * 0.5, planetRadius * 4, [\n            ...baseSeed,\n            seedIndexes.orbitRadius,\n            0,\n          ]);\n          const orbitRadius =\n            moonIndex === 0\n              ? minOrbitRadius\n              : planetMoons[moonIndex - 1].orbitRadius +\n                Random.getRandomInt(minOrbitRadius * 0.2, minOrbitRadius, [...baseSeed, seedIndexes.orbitRadius, 1]);\n          const moonRadius = Random.getRandomInt(planetRadius / 12, planetRadius / 4, [\n            ...baseSeed,\n            seedIndexes.radius,\n          ]);\n\n          const moon: SolarSystemEntity = {\n            id: this.getNextId(),\n            name: `Moon ${moonIndex + 1}`,\n            seed: baseSeed,\n            radius: moonRadius,\n            terrainHeight: Random.getRandom([...baseSeed, seedIndexes.terrainHeight]),\n            orbitEntityId: -1,\n            orbitRadius: orbitRadius,\n            orbitDirection: randomOrbitDirection,\n            orbitSpeed: (numberOfMoons - moonIndex) / numberOfMoons,\n            orbitInclanation: Random.getRandomInt(0, 45, [...baseSeed, seedIndexes.orbitInclanation]),\n            orbitStartPosition: Random.getRandom([...baseSeed, seedIndexes.orbitStartPosition]),\n            spinSpeed: randomSpinSpeed,\n            spinDirection: Random.coinToss([...baseSeed, seedIndexes.spinDirection]) ? 1 : -1,\n            rgb: getRandomRgb([...baseSeed, seedIndexes.colour]),\n            moons: [],\n          };\n\n          planetMoons.push(moon);\n        }\n\n        // now create the planet - ensuring the orbit is large enough to accomodate all the moons\n        const randomOrbitDirection = Random.coinToss([...baseSeed, seedIndexes.orbitDirection]) ? 1 : -1;\n        const randomSpinSpeed = Random.getRandomFloat(0.002, 0.006, [...baseSeed, seedIndexes.spinSpeed]);\n\n        // ensure orbits of planets/moons don't overlap\n        const prevPlanet =\n          solarSystem.planets.length > 0 ? solarSystem.planets[solarSystem.planets.length - 1] : undefined;\n        const currentPlanetMoonRadius = planetMoons[planetMoons.length - 1].orbitRadius;\n        const firstPlanetOrbitRadius = Random.getRandomInt(currentPlanetMoonRadius * 1.5, currentPlanetMoonRadius * 3, [\n          ...baseSeed,\n          seedIndexes.orbitRadius,\n          0,\n        ]);\n        const prevPlanetOrbitRadius = planetIndex === 0 ? firstPlanetOrbitRadius : prevPlanet!.orbitRadius;\n        const prevPlanetMoonRadius =\n          planetIndex === 0 ? 0 : prevPlanet!.moons[prevPlanet!.moons.length - 1].orbitRadius;\n        const orbitPadding = planetRadius;\n        const planetName = Random.getRandomFromArray(planetNames, [...baseSeed, seedIndexes.planetName]);\n\n        // create the planet\n        const planet: SolarSystemEntity = {\n          id: this.getNextId(),\n          name: planetName,\n          seed: baseSeed,\n          radius: planetRadius,\n          terrainHeight: 1,\n          orbitEntityId: star.id,\n          orbitRadius: prevPlanetOrbitRadius + prevPlanetMoonRadius + currentPlanetMoonRadius + orbitPadding,\n          orbitDirection: randomOrbitDirection,\n          orbitSpeed: (numberOfPlanets - planetIndex) / numberOfPlanets,\n          orbitInclanation: Random.getRandomInt(0, 15, [...baseSeed, seedIndexes.orbitInclanation]),\n          orbitStartPosition: Random.getRandom([...baseSeed, seedIndexes.orbitStartPosition]),\n          spinSpeed: randomSpinSpeed,\n          spinDirection: Random.coinToss([...baseSeed, seedIndexes.spinDirection]) ? 1 : -1,\n          moons: planetMoons,\n        };\n\n        solarSystem.planets.push(planet);\n      }\n\n      solarSystem.stars.push(star);\n    }\n\n    return solarSystem;\n  }\n}\n\nconst getRandomRgb = (seed: number[]): [number, number, number] => {\n  return [\n    Random.getRandomFloat(0.6, 1, [...seed, 0]),\n    Random.getRandomFloat(0.6, 1, [...seed, 1]),\n    Random.getRandomFloat(0.6, 1, [...seed, 2]),\n  ];\n};\n","import { Entity } from \"./Entity\";\n\nexport class Moon extends Entity {\n  protected maxTerrainHeight = 5;\n\n  protected _dispose(): void {}\n\n  protected getMapColour(height: number, y: number): number[] {\n    const ratio = height / 64;\n\n    const { r, g, b } = this.params.colour!;\n\n    const rgba = [Math.floor(r * 255), Math.floor(g * 255), Math.floor(b * 255), 255];\n\n    return [rgba[0] * ratio, rgba[1] * ratio, rgba[2] * ratio, rgba[3]];\n  }\n}\n","import { Random } from \"../utils/Random\";\nimport { Entity } from \"./Entity\";\n\nexport class ClassM extends Entity {\n  protected maxTerrainHeight = this.radius / 16;\n\n  protected _dispose(): void {}\n\n  private colours = {\n    oceanDark: this.getRandomColour(0),\n    oceanLight: this.getRandomColour(1),\n    beachDark: this.getRandomColour(2),\n    beachLight: this.getRandomColour(3),\n    forestDark: this.getRandomColour(4),\n    forestLight: this.getRandomColour(5),\n    jungleDark: this.getRandomColour(6),\n    jungleLight: this.getRandomColour(7),\n    savannahDark: this.getRandomColour(8),\n    savannahLight: this.getRandomColour(9),\n    desertDark: this.getRandomColour(10),\n    desertLight: this.getRandomColour(11),\n    snowDark: this.getRandomColour(12),\n    snowLight: this.getRandomColour(13),\n  };\n\n  protected getMapColour(height: number, y: number) {\n    const colour = this.getColourForHeight(height);\n    return colour;\n  }\n\n  private getColourForHeight(height: number) {\n    const levels = [\n      // sea\n      {\n        min: 0,\n        max: 60,\n        dark: this.colours.oceanDark,\n        light: this.colours.oceanLight,\n      },\n      // beach\n      {\n        min: 60,\n        max: 70,\n        dark: this.colours.oceanLight,\n        light: this.colours.beachLight,\n      },\n      // forest\n      {\n        min: 70,\n        max: 110,\n        dark: this.colours.forestDark,\n        light: this.colours.forestLight,\n      },\n      // jungle\n      {\n        min: 110,\n        max: 120,\n        dark: this.colours.jungleDark,\n        light: this.colours.jungleLight,\n      },\n      // savannah\n      {\n        min: 120,\n        max: 140,\n        dark: this.colours.savannahDark,\n        light: this.colours.savannahLight,\n      },\n      // desert\n      {\n        min: 120,\n        max: 150,\n        dark: this.colours.desertDark,\n        light: this.colours.desertLight,\n      },\n    ];\n\n    for (const level of levels) {\n      if (height < level.max) {\n        return this.getRangeColour(level, height);\n      }\n    }\n\n    return this.colours.snowLight;\n  }\n\n  private getRandomColour(colIndex: number) {\n    const seed = [...this.params.baseSeed, colIndex];\n\n    const min = 0.2;\n    return [\n      255 * Random.getRandomFloat(min, 1, [...seed, 0]),\n      255 * Random.getRandomFloat(min, 1, [...seed, 1]),\n      255 * Random.getRandomFloat(min, 1, [...seed, 2]),\n      255,\n    ];\n  }\n}\n","import { Entity, EntityParams, EntityType } from \"./Entity\";\n\nexport class Star extends Entity {\n  protected maxTerrainHeight = 0;\n\n  constructor(id: number, name: string, entityType: EntityType, radius: number, params: EntityParams) {\n    super(id, name, entityType, radius, params);\n\n    this.params.terrainHeight = 0;\n    this.params.texturePath = \"assets/sun.jpg\";\n  }\n\n  protected _dispose(): void {}\n\n  protected getMapColour(height: number, y: number): number[] {\n    const { r, g, b } = this.params.colour!;\n    const rgba = [Math.floor(r * 255), Math.floor(g * 255), Math.floor(b * 255), 255];\n    return [rgba[0], rgba[1], rgba[2], rgba[3]];\n  }\n}\n","import { Entity } from \"./Entity\";\n\nconst colours = {\n  oceanDark: [0, 24, 168, 255],\n  oceanLight: [0, 105, 148, 255],\n  beachDark: [140, 129, 95, 255],\n  beachLight: [221, 202, 146, 255],\n  forestDark: [0, 66, 37, 255],\n  forestLight: [0, 127, 72, 255],\n  jungleDark: [48, 102, 79, 255],\n  jungleLight: [57, 122, 94, 255],\n  savannahDark: [136, 155, 105, 255],\n  savannahLight: [165, 189, 126, 255],\n  desertDark: [175, 175, 144, 255],\n  desertLight: [198, 198, 167, 255],\n  snowDark: [200, 200, 200, 255],\n  snowLight: [255, 255, 255, 255],\n};\n\nexport class Earth extends Entity {\n  protected maxTerrainHeight = this.radius / 16;\n\n  protected _dispose(): void {}\n\n  protected getMapColour(height: number, y: number) {\n    const colour = this.getColourForHeight(height);\n\n    // if (y > this.textureHeight * 0.9) {\n    //   return this.lerpColour(colour, colours.snow, y / this.textureHeight);\n    // }\n\n    return colour;\n  }\n\n  private getColourForHeight(height: number) {\n    const levels = [\n      // sea\n      {\n        min: 0,\n        max: 60,\n        dark: colours.oceanDark,\n        light: colours.oceanLight,\n      },\n      // beach\n      {\n        min: 60,\n        max: 70,\n        dark: colours.oceanLight,\n        light: colours.beachLight,\n      },\n      // forest\n      {\n        min: 70,\n        max: 110,\n        dark: colours.forestDark,\n        light: colours.forestLight,\n      },\n      // jungle\n      {\n        min: 110,\n        max: 120,\n        dark: colours.jungleDark,\n        light: colours.jungleLight,\n      },\n      // savannah\n      {\n        min: 120,\n        max: 140,\n        dark: colours.savannahDark,\n        light: colours.savannahLight,\n      },\n      // desert\n      {\n        min: 120,\n        max: 150,\n        dark: colours.desertDark,\n        light: colours.desertLight,\n      },\n    ];\n\n    for (const level of levels) {\n      if (height < level.max) {\n        return this.getRangeColour(level, height);\n      }\n    }\n\n    return colours.snowLight;\n  }\n}\n","import \"normalize.css\";\nimport \"./index.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { App } from \"./components/App/App\";\nimport { SolarSystemApp } from \"./app/SolarSystemApp\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App solarSystemApp={new SolarSystemApp()}></App>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","import {\n  AmbientLight,\n  // AxesHelper,\n  Camera,\n  Clock,\n  Color,\n  CubeTextureLoader,\n  MathUtils,\n  PerspectiveCamera,\n  PointLight,\n  Scene,\n  Texture,\n  Vector3,\n  WebGLRenderer,\n} from \"three\";\nimport { Entity, EntityParams, EntityType } from \"./entities/Entity\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport Stats from \"three/examples/jsm/libs/stats.module\";\nimport { GUI } from \"three/examples/jsm/libs/dat.gui.module\";\n\nimport { SolarSystem, SolarSystemEntity, SolarSystemGenerator } from \"./utils/SolarSystemGenerator\";\nimport { Moon } from \"./entities/Moon\";\nimport { ClassM } from \"./entities/ClassM\";\nimport { Star } from \"./entities/Star\";\nimport { Earth } from \"./entities/Earth\";\n\nconst sunColour = 0xf7e096;\n\nexport class SolarSystemApp {\n  private solarSystem!: SolarSystem;\n\n  private isRunning = false;\n  private scene!: Scene;\n  private camera!: Camera;\n  private clock = new Clock();\n  private bodies: Entity[] = [];\n  private renderer!: WebGLRenderer;\n  private orbitControls!: OrbitControls;\n  private stats!: Stats;\n  private showPlanetId!: number;\n  private cameraInitialPosition!: [number, number, number];\n  private spaceTexture!: Texture;\n  private gui!: GUI;\n  private guiViewActionsFolder!: GUI;\n  private guiPlanetsFolder!: GUI;\n  // private planetInfoBox: HTMLElement;\n\n  private ambientLight!: AmbientLight;\n  private pointLight!: PointLight;\n\n  // events\n  public onInitialising!: () => void;\n  public onInitialised!: () => void;\n  public onSelectPlanet!: (planet?: SolarSystemEntity) => void;\n\n  private options = {\n    seed: 2,\n    simulationSpeed: 3,\n    showOrbits: true,\n    followPlanetName: \"Star 1\",\n  };\n\n  private buttonHandlers = {\n    resetView: () => {\n      this.resetView();\n    },\n    newSeed: () => {\n      this.options.seed = MathUtils.randInt(100000, 999999);\n      this.init();\n    },\n    changeSeed: () => {\n      this.init();\n    },\n  };\n\n  constructor() {\n    this.solarSystem = new SolarSystemGenerator().generate(this.options.seed);\n\n    this.scene = new Scene();\n    this.scene.background = new Color().setHex(0x000000);\n\n    const loader = new CubeTextureLoader();\n    this.spaceTexture = loader.load([\n      \"assets/kurt/space_ft.png\",\n      \"assets/kurt/space_bk.png\",\n      \"assets/kurt/space_up.png\",\n      \"assets/kurt/space_dn.png\",\n      \"assets/kurt/space_rt.png\",\n      \"assets/kurt/space_lf.png\",\n    ]);\n    this.scene.background = this.spaceTexture;\n\n    // Camera\n    this.camera = new Camera();\n    this.camera = new PerspectiveCamera(25, window.innerWidth / window.innerHeight, 50, 1e7);\n    this.cameraInitialPosition = [0, this.solarSystem.stars[0].radius * 6, this.solarSystem.stars[0].radius * 20];\n    this.camera.position.set(...this.cameraInitialPosition);\n\n    this.camera.lookAt(0, 0, 0);\n\n    // Renderer\n    this.renderer = new WebGLRenderer({\n      powerPreference: \"high-performance\",\n      antialias: true,\n    });\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n    this.renderer.shadowMap.enabled = true;\n    document.body.appendChild(this.renderer.domElement);\n\n    // Controls\n    this.orbitControls = new OrbitControls(this.camera, this.renderer.domElement);\n    this.orbitControls.enableDamping = true;\n\n    // Stats\n    this.stats = new (Stats as any)();\n    document.body.appendChild(this.stats.dom);\n\n    // UI\n    this.gui = new GUI();\n    this.gui.width = 300;\n\n    this.gui.add(this.buttonHandlers, \"newSeed\").name(\"New Seed\");\n    this.gui.add(this.options, \"seed\").name(\"Seed\").onFinishChange(this.buttonHandlers.changeSeed);\n    this.gui.add(this.options, \"simulationSpeed\", 0, 20, 0.1).name(\"Simulation Speed\");\n\n    // this.planetInfoBox = document.createElement(\"div\");\n    // this.planetInfoBox.className = \"planet-info-box\";\n    // this.planetInfoBox.innerHTML = `\n    // <h1 class='planet-info-box__name'></h1>\n    // <div class='planet-info-box__prop-container'>\n\n    // </div>\n    // `;\n    // document.body.appendChild(this.planetInfoBox);\n  }\n\n  public init = () => {\n    if (this.onInitialising) {\n      this.onInitialising();\n    }\n\n    this.gui.updateDisplay();\n    this.clearScene();\n    this.solarSystem = new SolarSystemGenerator().generate(this.options.seed);\n\n    this.resetView();\n\n    this._init().then(() => {\n      this.animate();\n      if (this.onInitialised) {\n        this.onInitialised();\n      }\n    });\n  };\n\n  private _init = async () => {\n    this.showPlanetId = -1;\n\n    // var axesHelper = new AxesHelper(5000);\n    // scene.add(axesHelper);\n\n    // Lighting\n    this.ambientLight = new AmbientLight(0xffffff, 0.15);\n    this.scene.add(this.ambientLight);\n\n    this.pointLight = new PointLight(sunColour, 1);\n    this.pointLight.position.set(0, 0, 0);\n    this.scene.add(this.pointLight);\n\n    await this.createSolarSystem();\n\n    const planets = this.bodies.filter((b) => b.entityType === EntityType.Planet);\n    const star = this.bodies.filter((b) => b.entityType === EntityType.Star)[0];\n\n    this.guiViewActionsFolder = this.gui.addFolder(\"View Actions\");\n    this.guiViewActionsFolder.open();\n    this.guiViewActionsFolder.add(this.options, \"showOrbits\").name(\"Show Orbits\").onChange(this.toggleOrbits);\n    this.guiViewActionsFolder\n      .add(this.options, \"followPlanetName\", [star.name, ...planets.map((p) => p.name)])\n      .name(\"Centre of View\");\n    this.guiViewActionsFolder.add(this.buttonHandlers, \"resetView\").name(\"Reset View\");\n\n    this.guiPlanetsFolder = this.gui.addFolder(\"Planets\");\n    for (let index = 0; index < planets.length; index++) {\n      const planet = planets[index];\n      this.guiPlanetsFolder.add(planet, \"show\").name(`#${index + 1}: ${planet.name}`);\n    }\n\n    this.isRunning = true;\n  };\n\n  public animate = () => {\n    if (!this.isRunning) {\n      return;\n    }\n    requestAnimationFrame(this.animate);\n\n    this.bodies.forEach((body) => {\n      body.animate(this.clock, this.options.simulationSpeed / 5);\n    });\n\n    this.orbitControls.update();\n    this.stats.update();\n\n    if (this.showPlanetId > -1) {\n      const planet = this.bodies.find((b) => b.id === this.showPlanetId);\n      if (planet) {\n        const pos = new Vector3();\n        planet.sphere.getWorldPosition(pos);\n        this.camera.position.set(pos.x + planet.radius * 2, pos.y + planet.radius * 2, pos.z + planet.radius * 8);\n        this.camera.lookAt(pos.x, pos.y, pos.z);\n      }\n    } else {\n      const planet = this.bodies.find((b) => b.name === this.options.followPlanetName);\n      if (planet) {\n        const pos = new Vector3();\n        planet.sphere.getWorldPosition(pos);\n        this.orbitControls.target.set(pos.x, pos.y, pos.z);\n      }\n    }\n\n    this.renderer.render(this.scene, this.camera);\n  };\n\n  private clearScene = () => {\n    this.isRunning = false;\n\n    try {\n      this.gui.removeFolder(this.guiViewActionsFolder);\n      this.gui.removeFolder(this.guiPlanetsFolder);\n      this.guiViewActionsFolder.destroy();\n    } catch (error) {}\n\n    this.ambientLight?.dispose();\n    this.pointLight?.dispose();\n\n    for (const body of this.bodies) {\n      body.dispose();\n    }\n    this.bodies = [];\n    this.scene.clear();\n\n    this.renderer.render(this.scene, this.camera);\n  };\n\n  private resetView = () => {\n    this.showPlanetId = -1;\n    this.camera.position.set(...this.cameraInitialPosition);\n    this.orbitControls = new OrbitControls(this.camera, this.renderer.domElement);\n    if (this.onSelectPlanet) {\n      this.onSelectPlanet(undefined);\n    }\n  };\n\n  private handleShowPlanet = (id: number) => {\n    this.showPlanetId = id;\n\n    if (this.onSelectPlanet) {\n      const planet = this.solarSystem.planets.find((p) => p.id === id) as SolarSystemEntity;\n      this.onSelectPlanet(planet);\n    }\n  };\n\n  private toggleOrbits = () => {\n    for (const body of this.bodies) {\n      if (body.orbit) {\n        body.orbit.opacity = body.orbit.opacity === 0 ? 0.5 : 0;\n      }\n    }\n  };\n\n  private createSolarSystem = async () => {\n    const maxPlanetOrbitSpeed = 0.005; // Random.getRandomFloat(0.001, 0.005, [this.options.seed, seedIndexes.orbitSpeed]);\n    const maxMoonOrbitSpeed = 0.005; // Random.getRandomFloat(0.001, 0.005, [this.options.seed, seedIndexes.orbitSpeed]);\n\n    for (const star of this.solarSystem.stars) {\n      const starEntity = new Star(star.id, star.name, EntityType.Star, star.radius, {\n        baseSeed: star.seed,\n        position: star.position ? new Vector3(...star.position) : new Vector3(0, 0, 0),\n        colour: new Color(0xffca20),\n        orbitEntity: false,\n        orbitRadius: star.orbitRadius,\n        orbitDirection: star.orbitDirection,\n        orbitSpeed: star.orbitSpeed,\n        orbitInclanation: star.orbitInclanation,\n        orbitStartPosition: star.orbitStartPosition,\n        spinSpeed: star.spinSpeed,\n        spinDirection: star.spinDirection,\n      });\n      await starEntity.create();\n      this.bodies.push(starEntity);\n      this.scene.add(starEntity.entity);\n\n      for (let planetIndex = 0; planetIndex < this.solarSystem.planets.length; planetIndex++) {\n        const planet = this.solarSystem.planets[planetIndex];\n\n        const orbitEntity = this.bodies.find((b) => b.id === planet.orbitEntityId) as Entity;\n        const planetParams: EntityParams = {\n          baseSeed: planet.seed,\n          position: planet.position ? new Vector3(...planet.position) : orbitEntity.entity.position,\n          terrainHeight: planet.terrainHeight,\n          orbitEntity: orbitEntity,\n          orbitRadius: planet.orbitRadius,\n          orbitDirection: planet.orbitDirection,\n          orbitSpeed: planet.orbitSpeed * maxPlanetOrbitSpeed,\n          orbitInclanation: planet.orbitInclanation,\n          orbitStartPosition: planet.orbitStartPosition,\n          spinSpeed: planet.spinSpeed,\n          spinDirection: planet.spinDirection,\n          onShow: this.handleShowPlanet,\n        };\n\n        const planetEntity =\n          planetIndex === 2\n            ? new Earth(planet.id, planet.name, EntityType.Planet, planet.radius, planetParams)\n            : new ClassM(planet.id, planet.name, EntityType.Planet, planet.radius, planetParams);\n        await planetEntity.create();\n\n        for (const moon of planet.moons) {\n          const orbitEntity = planetEntity;\n          const moonEntity = new Moon(moon.id, moon.name, EntityType.Moon, moon.radius, {\n            baseSeed: moon.seed,\n            position: moon.position ? new Vector3(...moon.position) : orbitEntity.entity.position,\n            colour: moon.rgb ? new Color(...moon.rgb) : new Color(1, 1, 1),\n            terrainHeight: moon.terrainHeight,\n            orbitEntity: orbitEntity,\n            orbitRadius: moon.orbitRadius,\n            orbitDirection: moon.orbitDirection,\n            orbitSpeed: moon.orbitSpeed * maxMoonOrbitSpeed,\n            orbitInclanation: moon.orbitInclanation,\n            orbitStartPosition: moon.orbitStartPosition,\n            spinSpeed: moon.spinSpeed,\n            spinDirection: planet.spinDirection,\n          });\n          await moonEntity.create();\n          this.bodies.push(moonEntity);\n          // add the moon to the planet (so it follows the planet's orbit)\n          planetEntity.entity.add(moonEntity.entity);\n        }\n\n        this.bodies.push(planetEntity);\n        this.scene.add(planetEntity.entity);\n      }\n    }\n  };\n}\n"],"sourceRoot":""}