{"version":3,"sources":["app/planets/Entity.ts","app/NoiseMapGenerator.ts","app/Random.ts","app/SolarSystemGenerator.ts","app/planets/Moon.ts","app/planets/ClassM.ts","app/planets/Sun.ts","app/planets/Earth.ts","index.tsx","app/App.ts"],"names":["EntityType","NoiseMapGenerator","seed","noiseGenerator","this","SimplexNoise","width","height","map","x","y","noise","getMixedFrequencyNoise","Math","pow","makeSeamlessVertically","makeSeamlessHorizontally","frequency","xOffset","yOffset","_x","_y","amplitude","n","noise2D","frequencies","sumOfAmplitudes","reduce","previous","index","getNoise","noiseMap","stitchWidth","length","v","o","MathUtils","lerp","stitchHeight","k","ceil","s1","s2","c","Entity","id","entityType","radius","params","entity","sphere","orbit","textureWidth","textureHeight","maxTerrainHeight","loader","TextureLoader","sphereGeometry","orbitGeometry","material","heightMapTexture","colourMapTexture","texture","Group","terrainHeight","terrainMaps","generateTerrainMaps","CanvasTexture","heightMap","canvas","mapping","EquirectangularReflectionMapping","MeshPhongMaterial","bumpMap","bumpScale","displacementMap","displacementScale","texturePath","loadAsync","MeshBasicMaterial","color","colour","SphereBufferGeometry","Mesh","castShadow","receiveShadow","orbitEntity","orbitEntityPos","position","orbitRadius","createOrbitCircle","add","set","z","rotation","degToRad","orbitInclanation","clock","speed","getElapsedTime","orbitSpeed","orbitDirection","spinSpeed","onShow","dispose","_dispose","heightMapContext","getCanvasContext","heightMapImageData","createImageData","heightMapData","data","colourMapContext","colourMapImageData","colourMapData","baseSeed","acc","cur","generateNoiseMap","i","colourValue","heightColour","ci","mapColour","getMapColour","putImageData","level","lerpColour","dark","light","min","max","col1","col2","ratio","convertToColor","toArray","Color","setRGB","ctx","document","createElement","getContext","fillStyle","fillRect","BufferGeometry","verts","LineBasicMaterial","opacity","transparent","theta","PI","push","cos","sin","vertices","Float32Array","setAttribute","BufferAttribute","Line","Random","mt19937","factory","rand","floor","getRandom","x0","y0","z0","u","random","phi","acos","seedIndexes","SolarSystemGenerator","EntityId","solarSystem","suns","planets","getNextId","name","moons","orbitEntityId","getRandomFloat","sunIndex","sun","numberOfPlanets","getRandomInt","planetIndex","planetRadius","numberOfMoons","planetMoons","moonIndex","randomOrbitDirection","coinToss","randomOrbitSpeed","randomSpinSpeed","minOrbitRadius","moon","rgb","getRandomRgb","orbitRadiusInc","prevPlanet","undefined","prevPlanetOrbitRadius","prevPlanetMoonRadius","currentPlanetMoonRadius","orbitPadding","planet","Moon","r","g","b","rgba","ClassM","colours","oceanDark","getRandomColour","oceanLight","beachDark","beachLight","forestDark","forestLight","jungleDark","jungleLight","savannahDark","savannahLight","desertDark","desertLight","snowDark","snowLight","getColourForHeight","getRangeColour","colIndex","Sun","Earth","app","isRunning","scene","camera","Clock","bodies","renderer","orbitControls","stats","showPlanetId","cameraInitialPosition","spaceTexture","gui","guiViewActionsFolder","ambientLight","pointLight","options","simulationSpeed","buttonHandlers","resetView","toggleOrbits","body","newSeed","randInt","reset","changeSeed","init","a","AmbientLight","PointLight","createSolarSystem","addFolder","open","filter","Planet","ssPlanet","find","p","animate","requestAnimationFrame","forEach","update","pos","Vector3","getWorldPosition","lookAt","render","clearScene","removeFolder","destroy","error","clear","updateDisplay","generate","then","OrbitControls","domElement","handleShowPlanet","sunEntity","create","planetParams","planetEntity","moonEntity","Scene","background","setHex","CubeTextureLoader","load","Camera","PerspectiveCamera","window","innerWidth","innerHeight","WebGLRenderer","powerPreference","antialias","setSize","setPixelRatio","devicePixelRatio","shadowMap","enabled","appendChild","Stats","dom","GUI","onFinishChange"],"mappings":"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","file":"static/js/main.8b47e6f6.chunk.js","sourcesContent":["import {\n  CanvasTexture,\n  Clock,\n  Color,\n  EquirectangularReflectionMapping,\n  Group,\n  Line,\n  LineBasicMaterial,\n  Material,\n  Mesh,\n  MeshBasicMaterial,\n  MeshPhongMaterial,\n  SphereBufferGeometry,\n  TextureLoader,\n  Vector3,\n  BufferGeometry,\n  BufferAttribute,\n  Texture,\n  MathUtils,\n} from \"three\";\n\nimport { NoiseMapGenerator } from \"../NoiseMapGenerator\";\n\nexport enum EntityType {\n  Sun,\n  Planet,\n  Moon,\n}\n\ntype TerrainMaps = {\n  heightMap: CanvasRenderingContext2D;\n  map: CanvasRenderingContext2D;\n};\n\nexport type EntityParams = {\n  baseSeed: number[];\n  position: Vector3;\n  orbitEntity: Entity | false;\n  orbitDirection: number;\n  orbitSpeed: number;\n  orbitRadius: number;\n  orbitInclanation: number;\n  spinSpeed: number;\n\n  terrainHeight?: number;\n  colour?: Color;\n  castShadow?: boolean;\n  receiveShadow?: boolean;\n  texturePath?: string;\n  onShow?: (id: number) => void;\n};\n\nexport abstract class Entity {\n  public id: number;\n  public entityType: EntityType;\n  public entity: Group;\n  public params: EntityParams;\n  public radius: number;\n  public sphere!: Mesh;\n  public orbit!: Material;\n\n  protected textureWidth: number;\n  protected textureHeight: number;\n  protected abstract maxTerrainHeight: number;\n\n  private loader = new TextureLoader();\n  private sphereGeometry!: SphereBufferGeometry;\n  private orbitGeometry!: BufferGeometry;\n  private material!: Material;\n  private heightMapTexture!: CanvasTexture;\n  private colourMapTexture!: CanvasTexture;\n  private texture!: Texture;\n\n  constructor(id: number, entityType: EntityType, radius: number, params: EntityParams) {\n    this.id = id;\n    this.entityType = entityType;\n    this.radius = radius;\n    this.params = params;\n\n    this.entity = new Group();\n\n    this.textureWidth = 512;\n    this.textureHeight = 256;\n  }\n\n  public async create() {\n    if (this.params.terrainHeight && this.params.terrainHeight > 0) {\n      const terrainMaps = this.generateTerrainMaps();\n\n      this.heightMapTexture = new CanvasTexture(terrainMaps.heightMap.canvas);\n      this.colourMapTexture = new CanvasTexture(terrainMaps.map.canvas);\n\n      this.heightMapTexture.mapping = EquirectangularReflectionMapping;\n      this.colourMapTexture.mapping = EquirectangularReflectionMapping;\n\n      const terrainHeight = Math.ceil(this.params.terrainHeight * this.maxTerrainHeight);\n\n      this.material = new MeshPhongMaterial({\n        bumpMap: this.heightMapTexture,\n        bumpScale: terrainHeight,\n        map: this.colourMapTexture,\n        displacementMap: this.heightMapTexture,\n        displacementScale: terrainHeight,\n      });\n    } else {\n      if (this.params.texturePath) {\n        this.texture = await this.loader.loadAsync(this.params.texturePath);\n        this.material = new MeshBasicMaterial({ map: this.texture, color: this.params.colour });\n      } else {\n        this.material = new MeshBasicMaterial({\n          color: this.params.colour,\n        });\n      }\n    }\n\n    this.sphereGeometry = new SphereBufferGeometry(this.radius, 64, 48);\n    this.sphere = new Mesh(this.sphereGeometry, this.material);\n\n    this.sphere.castShadow = !!this.params.castShadow;\n    this.sphere.receiveShadow = !!this.params.receiveShadow;\n\n    // const geom = new PlaneGeometry(this.textureWidth, this.textureHeight);\n    // this.sphere = new Mesh(geom, material);\n\n    if (this.params.orbitEntity) {\n      const orbitEntityPos = this.params.orbitEntity.sphere.position;\n      const orbitRadius = this.params.orbitRadius || 400;\n\n      // create an orbit cirlce and add it to the entity\n      const orbit = this.createOrbitCircle(orbitRadius);\n      this.entity.add(orbit);\n\n      // position the sphere at the edge of the orbit circle\n      this.sphere.position.set(orbitRadius, 0, 0);\n\n      // position the whole entity at the orbit entity position\n      this.entity.position.set(orbitEntityPos.x, orbitEntityPos.y, orbitEntityPos.z);\n\n      // set orbit inclanation/tilt\n      this.entity.rotation.x = MathUtils.degToRad(this.params.orbitInclanation);\n    }\n\n    this.entity.add(this.sphere);\n\n    return this;\n  }\n\n  public animate(clock: Clock, speed: number) {\n    clock.getElapsedTime();\n\n    if (this.params.orbitEntity) {\n      const orbitSpeed = this.params.orbitSpeed * speed;\n      const orbitDirection = this.params.orbitDirection;\n      this.entity.rotation.y += orbitSpeed * orbitDirection;\n    }\n\n    if (this.params.spinSpeed) {\n      this.sphere.rotation.y += this.params.spinSpeed * speed;\n    }\n  }\n\n  public show() {\n    if (this.params.onShow) {\n      this.params.onShow(this.id);\n    }\n  }\n\n  protected abstract _dispose(): void;\n  public dispose() {\n    // geometries\n    this.sphereGeometry?.dispose();\n    this.orbitGeometry?.dispose();\n\n    // materials\n    this.orbit?.dispose();\n    this.material?.dispose();\n\n    // textures\n    this.heightMapTexture?.dispose();\n    this.colourMapTexture?.dispose();\n    this.texture?.dispose();\n\n    // call implemented dispose method\n    this._dispose();\n  }\n\n  protected generateTerrainMaps(): TerrainMaps {\n    const recordSize = 4;\n\n    const heightMapContext = this.getCanvasContext();\n    const heightMapImageData = heightMapContext.createImageData(this.textureWidth, this.textureHeight);\n    const heightMapData = heightMapImageData.data;\n\n    const colourMapContext = this.getCanvasContext();\n    const colourMapImageData = colourMapContext.createImageData(this.textureWidth, this.textureHeight);\n    const colourMapData = colourMapImageData.data;\n\n    const seed = [...this.params.baseSeed, 99999].reduce((acc, cur) => (acc += cur));\n    const ng = new NoiseMapGenerator(seed);\n    const noiseMap = ng.generateNoiseMap(this.textureWidth, this.textureHeight);\n\n    for (let i = 0; i < heightMapData.length; i += recordSize) {\n      const x = (i / recordSize) % this.textureWidth;\n      const y = ~~(i / recordSize / this.textureWidth);\n\n      const noise = noiseMap[x][y];\n      const generatedColourValue = 255 * noise;\n\n      let colourValue = generatedColourValue;\n\n      // RGBA\n      const heightColour = [colourValue, colourValue, colourValue, 255];\n      for (let ci = 0; ci < heightColour.length; ci++) {\n        heightMapData[i + ci] = heightColour[ci];\n      }\n\n      let mapColour = this.getMapColour(colourValue, y);\n\n      for (let ci = 0; ci < mapColour.length; ci++) {\n        colourMapData[i + ci] = mapColour[ci];\n      }\n    }\n\n    heightMapContext.putImageData(heightMapImageData, 0, 0);\n    colourMapContext.putImageData(colourMapImageData, 0, 0);\n\n    return {\n      heightMap: heightMapContext,\n      map: colourMapContext,\n    };\n  }\n\n  protected abstract getMapColour(height: number, y: number): number[];\n\n  protected getRangeColour(level: { min: number; max: number; dark: number[]; light: number[] }, height: number) {\n    return this.lerpColour(level.dark, level.light, (height - level.min) / (level.max - level.min));\n  }\n\n  protected lerpColour(col1: number[], col2: number[], ratio: number) {\n    const c = this.convertToColor(col1).lerp(this.convertToColor(col2), ratio);\n    return [...c.toArray(), 255];\n  }\n\n  protected convertToColor(colour: number[]) {\n    return new Color().setRGB(colour[0], colour[1], colour[2]);\n  }\n\n  protected getCanvasContext() {\n    const ctx = document.createElement(\"canvas\").getContext(\"2d\") as CanvasRenderingContext2D;\n    ctx.canvas.width = this.textureWidth;\n    ctx.canvas.height = this.textureHeight;\n    ctx.fillStyle = \"#fff\";\n    ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    return ctx;\n  }\n\n  private createOrbitCircle(radius: number) {\n    var segmentCount = 128;\n    this.orbitGeometry = new BufferGeometry();\n    const verts = [];\n    this.orbit = new LineBasicMaterial({ color: 0xffffff, opacity: 0.5, transparent: true });\n\n    for (var i = 0; i <= segmentCount; i++) {\n      var theta = (i / segmentCount) * Math.PI * 2;\n      verts.push(Math.cos(theta) * radius, 0, Math.sin(theta) * radius);\n    }\n    const vertices = new Float32Array(verts);\n    this.orbitGeometry.setAttribute(\"position\", new BufferAttribute(vertices, 3));\n    return new Line(this.orbitGeometry, this.orbit);\n  }\n}\n","import SimplexNoise from \"simplex-noise\";\nimport { MathUtils } from \"three\";\n\nexport class NoiseMapGenerator {\n  private noiseGenerator: SimplexNoise;\n\n  constructor(seed?: number) {\n    this.noiseGenerator = new SimplexNoise(seed);\n  }\n\n  public generateNoiseMap(width: number, height: number): number[][] {\n    const map: number[][] = [];\n\n    for (let x = 0; x < width; x++) {\n      map[x] = [];\n      for (let y = 0; y < height; y++) {\n        // add noise at various frequencies\n        let noise = this.getMixedFrequencyNoise(\n          x,\n          y,\n          [0.01, 0.02, 0.04, 0.08, 0.16, 0.32, 0.64, 1.28]\n        );\n        noise = Math.pow(noise, 2.3);\n\n        map[x][y] = noise;\n      }\n    }\n\n    this.makeSeamlessVertically(map, height * 0.2);\n    this.makeSeamlessHorizontally(map, width * 0.05);\n\n    return map;\n  }\n\n  private getNoise(\n    x: number,\n    y: number,\n    frequency: number,\n    xOffset: number = 0,\n    yOffset: number = 0\n  ) {\n    const _x = frequency * x + xOffset;\n    const _y = frequency * y + yOffset;\n    const amplitude = 1 / frequency;\n\n    // get noise in the range 0-1\n    const n = this.noiseGenerator.noise2D(_x, _y) / 2 + 0.5;\n\n    let noise = amplitude * n;\n    return noise;\n  }\n\n  private getMixedFrequencyNoise(x: number, y: number, frequencies: number[]) {\n    let sumOfAmplitudes = 0;\n    const noise = frequencies.reduce(\n      (previous: number, frequency: number, index: number) => {\n        sumOfAmplitudes += 1 / frequency;\n\n        // add offsets so different frequencies (octaves)\n        // sample from a different part of the noise space\n        const xOffset = index * 10;\n        const yOffset = index * 100;\n        return previous + this.getNoise(x, y, frequency, xOffset, yOffset);\n      },\n      0\n    );\n    return noise / sumOfAmplitudes;\n  }\n\n  // ported from here:\n  // https://medium.com/nerd-for-tech/making-a-seamless-perlin-noise-in-c-4cfc12a90f93\n  private makeSeamlessHorizontally(noiseMap: number[][], stitchWidth: number) {\n    const width = noiseMap.length;\n    const height = noiseMap[0].length;\n\n    // iterate on the stitch band (on the left\n    // of the noise)\n    for (let x = 0; x < stitchWidth; x++) {\n      // get the transparency value from\n      // a linear gradient\n      const v = x / stitchWidth;\n\n      for (let y = 0; y < height; y++) {\n        // compute the \"mirrored x position\":\n        // the far left is copied on the right\n        // and the far right on the left\n        const o = ~~(width - stitchWidth + x);\n        // copy the value on the right of the noise\n        noiseMap[o][y] = MathUtils.lerp(\n          noiseMap[o][y],\n          noiseMap[~~(stitchWidth - x)][y],\n          v\n        );\n      }\n    }\n  }\n\n  // ported from here:\n  // https://medium.com/nerd-for-tech/making-a-seamless-perlin-noise-in-c-4cfc12a90f93\n  private makeSeamlessVertically(noiseMap: number[][], stitchHeight: number) {\n    const width = noiseMap.length;\n    const height = noiseMap[0].length;\n\n    // iterate through the stitch band (both\n    // top and bottom sides are treated\n    // simultaneously because its mirrored)\n    for (let y = 0; y < stitchHeight; y++) {\n      // number of neighbour pixels to\n      // consider for the average (= kernel size)\n      const k = Math.ceil(stitchHeight - y);\n      // go through the entire row\n      for (let x = 0; x < width; x++) {\n        // compute the sum of pixel values\n        // in the top and the bottom bands\n        let s1 = 0.0;\n        let s2 = 0.0;\n        let c = 0;\n        for (let o = x - k; o < x + k; o++) {\n          if (o < 0 || o >= width) {\n            continue;\n          }\n\n          s1 += noiseMap[o][y];\n          s2 += noiseMap[o][height - y - 1];\n          c++;\n        }\n        // compute the means and assign them to\n        // the pixels in the top and the bottom\n        // rows\n        noiseMap[x][y] = s1 / c;\n        noiseMap[x][height - y - 1] = s2 / c;\n      }\n    }\n  }\n}\n","import mt19937 from \"@stdlib/random-base-mt19937\";\n\nconst MAX = 4294967295;\n\nexport class Random {\n  public static getRandom(seed: number[]) {\n    var rand = mt19937.factory({\n      seed: seed,\n    });\n\n    return rand() / MAX;\n  }\n\n  public static getRandomInt(min: number, max: number, seed: number[]) {\n    return Math.floor(Random.getRandom(seed) * (max - min + 1) + min);\n  }\n\n  public static getRandomFloat(min: number, max: number, seed: number[]) {\n    return Random.getRandom(seed) * (max - min) + min;\n  }\n\n  public static coinToss(seed: number[]) {\n    return Random.getRandom(seed) <= 0.5;\n  }\n\n  /**\n   * Gets a random point of a sphere, evenly distributed over the sphere.\n   * The sphere is centered at (x0,y0,z0) with the passed in radius.\n   * The returned point is returned as a three element array [x,y,z].\n   *\n   * @return [x,y,z]\n   */\n  public static getRandomPointInSphere(radius: number, x0: number, y0: number, z0: number) {\n    if (!x0) {\n      x0 = 0;\n    }\n    if (!y0) {\n      y0 = 0;\n    }\n    if (!z0) {\n      z0 = 0;\n    }\n\n    var u = Math.random();\n    var v = Math.random();\n    var theta = 2 * Math.PI * u;\n    var phi = Math.acos(1 - 2 * v);\n    var x = x0 + radius * Math.sin(phi) * Math.cos(theta);\n    var y = y0 + radius * Math.sin(phi) * Math.sin(theta);\n    var z = z0 + radius * Math.cos(phi);\n\n    return [x, y, z];\n  }\n}\n","import { Random } from \"./Random\";\n\ntype SolarSystemEntity = {\n  id: number;\n  name: string;\n  seed: number[];\n  radius: number;\n  terrainHeight: number;\n  moons: SolarSystemEntity[];\n  orbitEntityId: number;\n  orbitRadius: number;\n  orbitDirection: number;\n  orbitSpeed: number;\n  orbitInclanation: number;\n  spinSpeed: number;\n\n  position?: [number, number, number];\n  rgb?: [number, number, number];\n};\n\nexport type SolarSystem = {\n  suns: SolarSystemEntity[];\n  planets: SolarSystemEntity[];\n};\n\nconst seedIndexes = {\n  radius: 0,\n  terrainHeight: 1,\n  colour: 2,\n  noiseMap: 3,\n  orbitDirection: 4,\n  orbitSpeed: 5,\n  spinSpeed: 6,\n  numberOfPlanets: 7,\n  orbitRadius: 8,\n  orbitInclanation: 9,\n};\n\nexport class SolarSystemGenerator {\n  private EntityId = 0;\n\n  private getNextId(): number {\n    this.EntityId++;\n    return this.EntityId;\n  }\n\n  public generate(seed: number): SolarSystem {\n    const solarSystem: SolarSystem = {\n      suns: [],\n      planets: [],\n    };\n\n    const suns: SolarSystemEntity[] = [\n      {\n        id: this.getNextId(),\n        name: `Sun ${this.EntityId}`,\n        seed: [seed, 0],\n        position: [0, 0, 0],\n        radius: 1280,\n        terrainHeight: 0,\n        moons: [],\n        orbitEntityId: 0,\n        orbitRadius: 0,\n        orbitSpeed: 0,\n        orbitDirection: 0,\n        orbitInclanation: 0,\n        spinSpeed: Random.getRandomFloat(0.0001, 0.0003, [...[seed, 0], seedIndexes.spinSpeed]),\n      },\n    ];\n\n    for (let sunIndex = 0; sunIndex < suns.length; sunIndex++) {\n      const sun = suns[sunIndex];\n\n      const numberOfPlanets = Random.getRandomInt(1, 9, [seed, sunIndex, seedIndexes.numberOfPlanets]);\n\n      for (let planetIndex = 0; planetIndex < numberOfPlanets; planetIndex++) {\n        const baseSeed = [seed, sunIndex, planetIndex];\n\n        const planetRadius = Random.getRandomInt(sun.radius * 0.1, sun.radius * 0.3, [...baseSeed, seedIndexes.radius]);\n        const numberOfMoons = Random.getRandomInt(1, 5, [...baseSeed, seedIndexes.numberOfPlanets]);\n\n        // create the moons for the planet\n        const planetMoons = [];\n        for (let moonIndex = 0; moonIndex < numberOfMoons; moonIndex++) {\n          const baseSeed = [seed, sunIndex, planetIndex, moonIndex];\n          const randomOrbitDirection = Random.coinToss([...baseSeed, seedIndexes.orbitDirection]) ? 1 : -1;\n          const randomOrbitSpeed = Random.getRandomFloat(0.001, 0.005, [...baseSeed, seedIndexes.orbitSpeed]);\n          const randomSpinSpeed = Random.getRandomFloat(0.001, 0.005, [...baseSeed, seedIndexes.spinSpeed]);\n          const minOrbitRadius = Random.getRandomInt(planetRadius * 3 * 0.5, planetRadius * 4, [\n            ...baseSeed,\n            seedIndexes.orbitRadius,\n            0,\n          ]);\n\n          const moon: SolarSystemEntity = {\n            id: this.getNextId(),\n            name: `Moon ${moonIndex}`,\n            seed: baseSeed,\n            radius: Random.getRandomInt(planetRadius / 12, planetRadius / 4, [...baseSeed, seedIndexes.radius]),\n            terrainHeight: Random.getRandom([...baseSeed, seedIndexes.terrainHeight]), // Random.getRandomInt(1, 5, [...baseSeed, seedIndexes.terrainHeight]),\n            orbitEntityId: -1,\n            orbitRadius:\n              moonIndex === 0\n                ? minOrbitRadius\n                : planetMoons[moonIndex - 1].orbitRadius +\n                  Random.getRandomInt(minOrbitRadius * 0.2, minOrbitRadius, [...baseSeed, seedIndexes.orbitRadius, 1]),\n            orbitDirection: randomOrbitDirection,\n            orbitSpeed: randomOrbitSpeed,\n            orbitInclanation: Random.getRandomInt(0, 45, [...baseSeed, seedIndexes.orbitInclanation]),\n            spinSpeed: randomSpinSpeed,\n            rgb: getRandomRgb([...baseSeed, seedIndexes.colour]),\n            moons: [],\n          };\n\n          planetMoons.push(moon);\n        }\n\n        // now create the planet - ensuring the orbit is large enough to accomodate all the moons\n        const randomOrbitDirection = Random.coinToss([...baseSeed, seedIndexes.orbitDirection]) ? 1 : -1;\n        const randomOrbitSpeed = Random.getRandomFloat(0.001, 0.005, [...baseSeed, seedIndexes.orbitSpeed]);\n        const randomSpinSpeed = Random.getRandomFloat(0.002, 0.006, [...baseSeed, seedIndexes.spinSpeed]);\n        const orbitRadiusInc = Random.getRandomInt(\n          planetMoons[planetMoons.length - 1].orbitRadius * 1.1,\n          planetMoons[planetMoons.length - 1].orbitRadius * 2,\n          [...baseSeed, seedIndexes.orbitRadius, 0]\n        );\n\n        // ensure orbits of planets/moons don't overlap\n        const prevPlanet =\n          solarSystem.planets.length > 0 ? solarSystem.planets[solarSystem.planets.length - 1] : undefined;\n        const prevPlanetOrbitRadius = planetIndex === 0 ? orbitRadiusInc : prevPlanet!.orbitRadius;\n        const prevPlanetMoonRadius =\n          planetIndex === 0 ? 0 : prevPlanet!.moons[prevPlanet!.moons.length - 1].orbitRadius;\n        const currentPlanetMoonRadius = planetMoons[planetMoons.length - 1].orbitRadius;\n        const orbitPadding = planetRadius;\n\n        // create the planet\n        const planet: SolarSystemEntity = {\n          id: this.getNextId(),\n          name: `Planet ${planetIndex}`,\n          seed: baseSeed,\n          radius: planetRadius,\n          terrainHeight: 1,\n          orbitEntityId: sun.id,\n          orbitRadius: prevPlanetOrbitRadius + prevPlanetMoonRadius + currentPlanetMoonRadius + orbitPadding,\n          orbitDirection: randomOrbitDirection,\n          orbitSpeed: randomOrbitSpeed,\n          orbitInclanation: Random.getRandomInt(0, 15, [...baseSeed, seedIndexes.orbitInclanation]),\n          spinSpeed: randomSpinSpeed,\n          moons: planetMoons,\n        };\n\n        solarSystem.planets.push(planet);\n      }\n\n      solarSystem.suns.push(sun);\n    }\n\n    return solarSystem;\n  }\n}\n\nconst getRandomRgb = (seed: number[]): [number, number, number] => {\n  return [\n    Random.getRandomFloat(0.6, 1, [...seed, 0]),\n    Random.getRandomFloat(0.6, 1, [...seed, 1]),\n    Random.getRandomFloat(0.6, 1, [...seed, 2]),\n  ];\n};\n","import { Entity } from \"./Entity\";\n\nexport class Moon extends Entity {\n  protected maxTerrainHeight = 5;\n\n  protected _dispose(): void {}\n\n  protected getMapColour(height: number, y: number): number[] {\n    const ratio = height / 64;\n\n    const { r, g, b } = this.params.colour!;\n\n    const rgba = [Math.floor(r * 255), Math.floor(g * 255), Math.floor(b * 255), 255];\n\n    return [rgba[0] * ratio, rgba[1] * ratio, rgba[2] * ratio, rgba[3]];\n  }\n}\n","import { Random } from \"../Random\";\nimport { Entity } from \"./Entity\";\n\nexport class ClassM extends Entity {\n  protected maxTerrainHeight = 8;\n\n  protected _dispose(): void {}\n\n  private colours = {\n    oceanDark: this.getRandomColour(0),\n    oceanLight: this.getRandomColour(1),\n    beachDark: this.getRandomColour(2),\n    beachLight: this.getRandomColour(3),\n    forestDark: this.getRandomColour(4),\n    forestLight: this.getRandomColour(5),\n    jungleDark: this.getRandomColour(6),\n    jungleLight: this.getRandomColour(7),\n    savannahDark: this.getRandomColour(8),\n    savannahLight: this.getRandomColour(9),\n    desertDark: this.getRandomColour(10),\n    desertLight: this.getRandomColour(11),\n    snowDark: this.getRandomColour(12),\n    snowLight: this.getRandomColour(13),\n  };\n\n  protected getMapColour(height: number, y: number) {\n    const colour = this.getColourForHeight(height);\n    return colour;\n  }\n\n  private getColourForHeight(height: number) {\n    const levels = [\n      // sea\n      {\n        min: 0,\n        max: 60,\n        dark: this.colours.oceanDark,\n        light: this.colours.oceanLight,\n      },\n      // beach\n      {\n        min: 60,\n        max: 70,\n        dark: this.colours.oceanLight,\n        light: this.colours.beachLight,\n      },\n      // forest\n      {\n        min: 70,\n        max: 110,\n        dark: this.colours.forestDark,\n        light: this.colours.forestLight,\n      },\n      // jungle\n      {\n        min: 110,\n        max: 120,\n        dark: this.colours.jungleDark,\n        light: this.colours.jungleLight,\n      },\n      // savannah\n      {\n        min: 120,\n        max: 140,\n        dark: this.colours.savannahDark,\n        light: this.colours.savannahLight,\n      },\n      // desert\n      {\n        min: 120,\n        max: 150,\n        dark: this.colours.desertDark,\n        light: this.colours.desertLight,\n      },\n    ];\n\n    for (const level of levels) {\n      if (height < level.max) {\n        return this.getRangeColour(level, height);\n      }\n    }\n\n    return this.colours.snowLight;\n  }\n\n  private getRandomColour(colIndex: number) {\n    const seed = [...this.params.baseSeed, colIndex];\n\n    const min = 0.2;\n    return [\n      255 * Random.getRandomFloat(min, 1, [...seed, 0]),\n      255 * Random.getRandomFloat(min, 1, [...seed, 1]),\n      255 * Random.getRandomFloat(min, 1, [...seed, 2]),\n      255,\n    ];\n  }\n}\n","import { Entity, EntityParams, EntityType } from \"./Entity\";\n\nexport class Sun extends Entity {\n  protected maxTerrainHeight = 0;\n\n  constructor(id: number, entityType: EntityType, radius: number, params: EntityParams) {\n    super(id, entityType, radius, params);\n\n    this.params.terrainHeight = 0;\n    this.params.texturePath = \"assets/sun.jpg\";\n  }\n\n  protected _dispose(): void {}\n\n  protected getMapColour(height: number, y: number): number[] {\n    const { r, g, b } = this.params.colour!;\n    const rgba = [Math.floor(r * 255), Math.floor(g * 255), Math.floor(b * 255), 255];\n    return [rgba[0], rgba[1], rgba[2], rgba[3]];\n  }\n}\n","import { Entity } from \"./Entity\";\n\nconst colours = {\n  oceanDark: [0, 24, 168, 255],\n  oceanLight: [0, 105, 148, 255],\n  beachDark: [140, 129, 95, 255],\n  beachLight: [221, 202, 146, 255],\n  forestDark: [0, 66, 37, 255],\n  forestLight: [0, 127, 72, 255],\n  jungleDark: [48, 102, 79, 255],\n  jungleLight: [57, 122, 94, 255],\n  savannahDark: [136, 155, 105, 255],\n  savannahLight: [165, 189, 126, 255],\n  desertDark: [175, 175, 144, 255],\n  desertLight: [198, 198, 167, 255],\n  snowDark: [200, 200, 200, 255],\n  snowLight: [255, 255, 255, 255],\n};\n\nexport class Earth extends Entity {\n  protected maxTerrainHeight = 8;\n\n  protected _dispose(): void {}\n\n  protected getMapColour(height: number, y: number) {\n    const colour = this.getColourForHeight(height);\n\n    // if (y > this.textureHeight * 0.9) {\n    //   return this.lerpColour(colour, colours.snow, y / this.textureHeight);\n    // }\n\n    return colour;\n  }\n\n  private getColourForHeight(height: number) {\n    const levels = [\n      // sea\n      {\n        min: 0,\n        max: 60,\n        dark: colours.oceanDark,\n        light: colours.oceanLight,\n      },\n      // beach\n      {\n        min: 60,\n        max: 70,\n        dark: colours.oceanLight,\n        light: colours.beachLight,\n      },\n      // forest\n      {\n        min: 70,\n        max: 110,\n        dark: colours.forestDark,\n        light: colours.forestLight,\n      },\n      // jungle\n      {\n        min: 110,\n        max: 120,\n        dark: colours.jungleDark,\n        light: colours.jungleLight,\n      },\n      // savannah\n      {\n        min: 120,\n        max: 140,\n        dark: colours.savannahDark,\n        light: colours.savannahLight,\n      },\n      // desert\n      {\n        min: 120,\n        max: 150,\n        dark: colours.desertDark,\n        light: colours.desertLight,\n      },\n    ];\n\n    for (const level of levels) {\n      if (height < level.max) {\n        return this.getRangeColour(level, height);\n      }\n    }\n\n    return colours.snowLight;\n  }\n}\n","import \"./index.css\";\n\nimport { App } from \"./app/App\";\n\nconst app = new App();\n\napp.init().then(() => {\n  app.animate();\n});\n","import {\n  AmbientLight,\n  // AxesHelper,\n  Camera,\n  Clock,\n  Color,\n  CubeTextureLoader,\n  MathUtils,\n  PerspectiveCamera,\n  PointLight,\n  Scene,\n  Texture,\n  Vector3,\n  WebGLRenderer,\n} from \"three\";\nimport { Entity, EntityParams, EntityType } from \"./planets/Entity\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport Stats from \"three/examples/jsm/libs/stats.module\";\nimport { GUI } from \"three/examples/jsm/libs/dat.gui.module\";\n\nimport { SolarSystem, SolarSystemGenerator } from \"./SolarSystemGenerator\";\nimport { Moon } from \"./planets/Moon\";\nimport { ClassM } from \"./planets/ClassM\";\nimport { Sun } from \"./planets/Sun\";\nimport { Earth } from \"./planets/Earth\";\n\nconst sunColour = 0xf7e096;\n\nexport class App {\n  private solarSystem!: SolarSystem;\n\n  private isRunning = false;\n  private scene!: Scene;\n  private camera!: Camera;\n  private clock = new Clock();\n  private bodies: Entity[] = [];\n  private renderer!: WebGLRenderer;\n  private orbitControls!: OrbitControls;\n  private stats!: Stats;\n  private showPlanetId!: number;\n  private cameraInitialPosition!: [number, number, number];\n  private spaceTexture!: Texture;\n  private gui!: GUI;\n  private guiViewActionsFolder!: GUI;\n\n  private ambientLight!: AmbientLight;\n  private pointLight!: PointLight;\n\n  private options = {\n    seed: 2,\n    simulationSpeed: 5,\n  };\n\n  private buttonHandlers = {\n    resetView: () => {\n      this.resetView();\n    },\n    toggleOrbits: () => {\n      for (const body of this.bodies) {\n        if (body.orbit) {\n          body.orbit.opacity = body.orbit.opacity === 0 ? 0.5 : 0;\n        }\n      }\n    },\n    newSeed: () => {\n      this.options.seed = MathUtils.randInt(10000, 100000);\n      this.reset();\n    },\n    changeSeed: () => {\n      this.reset();\n    },\n  };\n\n  constructor() {\n    this.solarSystem = new SolarSystemGenerator().generate(this.options.seed);\n\n    this.scene = new Scene();\n    this.scene.background = new Color().setHex(0x000000);\n\n    const loader = new CubeTextureLoader();\n    this.spaceTexture = loader.load([\n      \"assets/kurt/space_ft.png\",\n      \"assets/kurt/space_bk.png\",\n      \"assets/kurt/space_up.png\",\n      \"assets/kurt/space_dn.png\",\n      \"assets/kurt/space_rt.png\",\n      \"assets/kurt/space_lf.png\",\n    ]);\n    this.scene.background = this.spaceTexture;\n\n    // Camera\n    this.camera = new Camera();\n    this.camera = new PerspectiveCamera(25, window.innerWidth / window.innerHeight, 50, 1e7);\n    this.cameraInitialPosition = [0, this.solarSystem.suns[0].radius * 6, this.solarSystem.suns[0].radius * 20];\n    this.camera.position.set(...this.cameraInitialPosition);\n\n    this.camera.lookAt(0, 0, 0);\n\n    // Renderer\n    this.renderer = new WebGLRenderer({\n      powerPreference: \"high-performance\",\n      antialias: true,\n    });\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n    this.renderer.shadowMap.enabled = true;\n    document.body.appendChild(this.renderer.domElement);\n\n    // Controls\n    this.orbitControls = new OrbitControls(this.camera, this.renderer.domElement);\n\n    // Stats\n    this.stats = new (Stats as any)();\n    document.body.appendChild(this.stats.dom);\n\n    // UI\n    this.gui = new GUI();\n    this.gui.width = 300;\n\n    this.gui.add(this.buttonHandlers, \"newSeed\").name(\"New Seed\");\n    this.gui.add(this.options, \"seed\").name(\"Seed\").onFinishChange(this.buttonHandlers.changeSeed);\n    this.gui.add(this.options, \"simulationSpeed\", 0, 100, 1).name(\"Simulation Speed\");\n  }\n\n  public init = async () => {\n    this.showPlanetId = -1;\n\n    // var axesHelper = new AxesHelper(5000);\n    // scene.add(axesHelper);\n\n    // Lighting\n    this.ambientLight = new AmbientLight(0xffffff, 0.15);\n    this.scene.add(this.ambientLight);\n\n    this.pointLight = new PointLight(sunColour, 1);\n    this.pointLight.position.set(0, 0, 0);\n    this.scene.add(this.pointLight);\n\n    await this.createSolarSystem();\n\n    this.guiViewActionsFolder = this.gui.addFolder(\"View Actions\");\n    this.guiViewActionsFolder.open();\n    this.guiViewActionsFolder.add(this.buttonHandlers, \"toggleOrbits\").name(\"Toggle Orbits\");\n    this.guiViewActionsFolder.add(this.buttonHandlers, \"resetView\").name(\"Reset View\");\n    for (const planet of this.bodies.filter((b) => b.entityType === EntityType.Planet)) {\n      const ssPlanet = this.solarSystem.planets.find((p) => p.id === planet.id);\n      this.guiViewActionsFolder.add(planet, \"show\").name(ssPlanet?.name || \"A Planet\");\n    }\n\n    this.isRunning = true;\n  };\n\n  public animate = () => {\n    if (!this.isRunning) {\n      return;\n    }\n    requestAnimationFrame(this.animate);\n\n    this.bodies.forEach((body) => {\n      body.animate(this.clock, (this.options.simulationSpeed * 10) / 100);\n    });\n\n    this.orbitControls.update();\n    this.stats.update();\n\n    if (this.showPlanetId > -1) {\n      const planet = this.bodies.find((b) => b.id === this.showPlanetId);\n      if (planet) {\n        const pos = new Vector3();\n        planet.sphere.getWorldPosition(pos);\n\n        this.camera.position.set(pos.x + planet.radius * 2, pos.y + planet.radius * 2, pos.z + planet.radius * 8);\n        this.camera.lookAt(pos.x, pos.y, pos.z);\n      }\n    }\n\n    this.renderer.render(this.scene, this.camera);\n  };\n\n  private clearScene = () => {\n    this.isRunning = false;\n\n    try {\n      this.gui.removeFolder(this.guiViewActionsFolder);\n      this.guiViewActionsFolder.destroy();\n    } catch (error) {}\n\n    this.ambientLight.dispose();\n    this.pointLight.dispose();\n\n    for (const body of this.bodies) {\n      body.dispose();\n    }\n    this.bodies = [];\n    this.scene.clear();\n\n    this.renderer.render(this.scene, this.camera);\n  };\n\n  private reset = () => {\n    this.gui.updateDisplay();\n    this.clearScene();\n    this.solarSystem = new SolarSystemGenerator().generate(this.options.seed);\n\n    this.resetView();\n\n    this.init().then(() => {\n      this.animate();\n    });\n  };\n\n  private resetView = () => {\n    this.showPlanetId = -1;\n    this.camera.position.set(...this.cameraInitialPosition);\n    this.orbitControls = new OrbitControls(this.camera, this.renderer.domElement);\n  };\n\n  createSolarSystem = async () => {\n    const handleShowPlanet = (id: number) => {\n      this.showPlanetId = id;\n    };\n\n    for (const sun of this.solarSystem.suns) {\n      const sunEntity = new Sun(sun.id, EntityType.Sun, sun.radius, {\n        baseSeed: sun.seed,\n        position: sun.position ? new Vector3(...sun.position) : new Vector3(0, 0, 0),\n        colour: new Color(0xffca20),\n        orbitEntity: false,\n        orbitRadius: sun.orbitRadius,\n        orbitDirection: sun.orbitDirection,\n        orbitSpeed: sun.orbitSpeed,\n        orbitInclanation: sun.orbitInclanation,\n        spinSpeed: sun.spinSpeed,\n      });\n      await sunEntity.create();\n      this.bodies.push(sunEntity);\n      this.scene.add(sunEntity.entity);\n\n      for (let planetIndex = 0; planetIndex < this.solarSystem.planets.length; planetIndex++) {\n        const planet = this.solarSystem.planets[planetIndex];\n\n        const orbitEntity = this.bodies.find((b) => b.id === planet.orbitEntityId) as Entity;\n        const planetParams: EntityParams = {\n          baseSeed: planet.seed,\n          position: planet.position ? new Vector3(...planet.position) : orbitEntity.entity.position,\n          terrainHeight: planet.terrainHeight,\n          orbitEntity: orbitEntity,\n          orbitRadius: planet.orbitRadius,\n          orbitDirection: planet.orbitDirection,\n          orbitSpeed: planet.orbitSpeed,\n          orbitInclanation: planet.orbitInclanation,\n          spinSpeed: planet.spinSpeed,\n          onShow: handleShowPlanet,\n        };\n\n        const planetEntity =\n          planetIndex === 2\n            ? new Earth(planet.id, EntityType.Planet, planet.radius, planetParams)\n            : new ClassM(planet.id, EntityType.Planet, planet.radius, planetParams);\n        await planetEntity.create();\n\n        for (const moon of planet.moons) {\n          const orbitEntity = planetEntity;\n          const moonEntity = new Moon(moon.id, EntityType.Moon, moon.radius, {\n            baseSeed: moon.seed,\n            position: moon.position ? new Vector3(...moon.position) : orbitEntity.entity.position,\n            colour: moon.rgb ? new Color(...moon.rgb) : new Color(1, 1, 1),\n            terrainHeight: moon.terrainHeight,\n            orbitEntity: orbitEntity,\n            orbitRadius: moon.orbitRadius,\n            orbitDirection: moon.orbitDirection,\n            orbitSpeed: moon.orbitSpeed,\n            orbitInclanation: moon.orbitInclanation,\n            spinSpeed: moon.spinSpeed,\n          });\n          await moonEntity.create();\n          this.bodies.push(moonEntity);\n          // add the moon to the planet (so it follows the planet's orbit)\n          planetEntity.entity.add(moonEntity.entity);\n        }\n\n        this.bodies.push(planetEntity);\n        this.scene.add(planetEntity.entity);\n      }\n    }\n  };\n}\n"],"sourceRoot":""}