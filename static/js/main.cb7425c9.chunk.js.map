{"version":3,"sources":["app/entities/Entity.ts","components/LoadingIndicator/LoadingIndicator.tsx","components/PlanetDataSheet/PlanetDataSheet.tsx","components/App/App.tsx","app/utils/NoiseMapGenerator.ts","app/utils/planetNames.ts","app/utils/Random.ts","app/utils/RealisticSolarSystemGenerator.ts","app/entities/Moon.ts","app/entities/ClassM.ts","app/entities/Star.ts","app/entities/Earth.ts","index.tsx","app/SolarSystemApp.ts"],"names":["EntityType","LoadingIndicator","show","className","PlanetDataSheet","planet","properties","name","radius","toLocaleString","moons","length","orbitRadius","Math","floor","orbitSpeed","orbitInclanation","map","prop","App","solarSystemApp","useState","isLoading","setIsLoading","undefined","selectedPlanet","setSelectedPlanet","useEffect","init","onInitialising","handleInitialising","onInitialised","handleInitialised","onSelectPlanet","handleSelectPlanet","NoiseMapGenerator","seed","noiseGenerator","this","SimplexNoise","width","height","x","y","noise","getMixedFrequencyNoise","pow","makeSeamlessVertically","makeSeamlessHorizontally","frequency","xOffset","yOffset","_x","_y","amplitude","n","noise2D","frequencies","sumOfAmplitudes","reduce","previous","index","getNoise","noiseMap","stitchWidth","v","o","MathUtils","lerp","stitchHeight","k","ceil","s1","s2","c","Entity","id","entityType","params","entity","sphere","orbit","textureWidth","textureHeight","maxTerrainHeight","loader","TextureLoader","sphereGeometry","orbitGeometry","material","heightMapTexture","colourMapTexture","texture","labelContext","labelTexture","labelSprite","labelScaleVector","Vector3","labelAspectRatio","Group","terrainHeight","terrainMaps","generateTerrainMaps","CanvasTexture","heightMap","canvas","mapping","EquirectangularReflectionMapping","MeshPhongMaterial","bumpMap","bumpScale","displacementMap","displacementScale","texturePath","loadAsync","MeshBasicMaterial","color","colour","SphereBufferGeometry","Mesh","castShadow","receiveShadow","hasLabel","addLabel","add","orbitEntity","orbitEntityPos","position","createOrbitCircle","set","z","rotation","degToRad","orbitStartPosition","clock","speed","camera","getElapsedTime","orbitDirection","spinSpeed","perSecond","spinDirection","scale","subVectors","onShow","dispose","_dispose","heightMapContext","getCanvasContext","heightMapImageData","createImageData","heightMapData","data","colourMapContext","colourMapImageData","colourMapData","baseSeed","acc","cur","generateNoiseMap","i","colourValue","heightColour","ci","mapColour","getMapColour","putImageData","level","lerpColour","dark","light","min","max","col1","col2","ratio","convertToColor","toArray","Color","setRGB","ctx","document","createElement","getContext","fillStyle","fillRect","BufferGeometry","verts","LineBasicMaterial","opacity","transparent","theta","PI","push","cos","sin","vertices","Float32Array","setAttribute","BufferAttribute","Line","font","textAlign","fillText","fontSize","Texture","needsUpdate","spriteMaterial","SpriteMaterial","Sprite","planetNames","Random","mt19937","factory","rand","getRandom","array","getRandomInt","x0","y0","z0","u","random","phi","acos","solarSystemValues","seedIndexes","SolarSystemGenerator","entityId","solarSystem","stars","planets","starRadius","getNextId","orbitEntityId","getRandomFloat","coinToss","starIndex","star","numberOfPlanets","planetOrbitRadiuses","createPlanetOrbitRadiuses","planetIndex","planetRadius","createPlanet","numberOfMoons","moonOrbitRadiuses","Array","fill","item","sort","a","b","moonIndex","moonRadius","moon","createMoon","distanceFromStar","furthestPlanetOrbitRadius","po1","distanceBetween","randomOrbitDirection","randomSpinSpeed","rgb","getRandomRgb","planetName","getRandomFromArray","Moon","r","g","rgba","ClassM","colours","oceanDark","getRandomColour","oceanLight","beachDark","beachLight","forestDark","forestLight","jungleDark","jungleLight","savannahDark","savannahLight","desertDark","desertLight","snowDark","snowLight","getColourForHeight","getRangeColour","colIndex","Star","Earth","ReactDOM","render","StrictMode","isRunning","scene","Clock","bodies","renderer","orbitControls","stats","showPlanetId","cameraInitialPosition","spaceTexture","gui","guiViewActionsFolder","guiPlanetsFolder","ambientLight","pointLight","options","simulationSpeed","showOrbits","followPlanetName","realisticScale","buttonHandlers","resetView","newSeed","randInt","changeSeed","updateDisplay","clearScene","generate","_init","then","animate","AmbientLight","PointLight","renderRealisticSolarSystem","renderSolarSystem","divideScalar","filter","Planet","addFolder","open","onChange","toggleOrbits","p","requestAnimationFrame","forEach","body","update","find","pos","getWorldPosition","lookAt","target","removeFolder","destroy","error","clear","handleShowPlanet","viewScale","starEntity","create","planetParams","planetEntity","moonEntity","cloneDeep","planetMoonRadius","prevPlanet","prevPlanetMoonRadius","Scene","background","setHex","CubeTextureLoader","load","Camera","PerspectiveCamera","window","innerWidth","innerHeight","WebGLRenderer","powerPreference","antialias","setSize","setPixelRatio","devicePixelRatio","shadowMap","enabled","appendChild","domElement","OrbitControls","enableDamping","Stats","dom","GUI","onFinishChange","getElementById"],"mappings":"+MA0BYA,E,2DClBCC,EAAoC,SAAC,GAChD,OAD6D,EAAXC,KACpC,qBAAKC,UAAU,oBAAf,wCAAsE,MCFzEC,G,OAAmC,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACjD,IAAKA,EACH,OAAO,KAGT,IAAMC,EAAa,CACjB,CAAC,OAAQD,EAAOE,MAChB,CAAC,iBAAkC,EAAhBF,EAAOG,QAAYC,kBACtC,CAAC,QAASJ,EAAOK,MAAMC,QACvB,CAAC,sBAAuBN,EAAOO,YAAYH,kBAC3C,CAAC,uBAAwBI,KAAKC,MAAMT,EAAOU,YAAYN,kBACvD,CAAC,6BAA2BJ,EAAOW,mBAGrC,OACE,sBAAKb,UAAU,mBAAf,UACE,6CAEA,oBAAIA,UAAU,kCAAd,SACGG,EAAWW,KAAI,SAACC,GAAD,OACd,qBAAkBf,UAAU,6BAA5B,UACE,iCAASe,EAAK,KACd,4BAAIA,EAAK,OAFFA,EAAK,cCjBXC,EAAuB,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,eACrC,EAAkCC,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA4CF,wBAAwCG,GAApF,mBAAOC,EAAP,KAAuBC,EAAvB,KAEAC,qBAAU,WACRP,EAAeQ,OACfR,EAAeS,eAAiBC,EAChCV,EAAeW,cAAgBC,EAC/BZ,EAAea,eAAiBC,IAC/B,CAACd,IAEJ,IAAMU,EAAqB,WACzBP,GAAa,IAGTS,EAAoB,WACxBT,GAAa,IAGTW,EAAqB,SAAC7B,GAC1BqB,EAAkBrB,IAGpB,OACE,qCACE,cAAC,EAAD,CAAkBH,KAAMoB,IACxB,cAAC,EAAD,CAAiBjB,OAAQoB,Q,+FCjClBU,EAAb,WAGE,WAAYC,GAAgB,yBAFpBC,oBAEmB,EACzBC,KAAKD,eAAiB,IAAIE,IAAaH,GAJ3C,oDAOE,SAAwBI,EAAeC,GAGrC,IAFA,IAAMxB,EAAkB,GAEfyB,EAAI,EAAGA,EAAIF,EAAOE,IAAK,CAC9BzB,EAAIyB,GAAK,GACT,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAQE,IAAK,CAE/B,IAAIC,EAAQN,KAAKO,uBACfH,EACAC,EACA,CAAC,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,OAE7CC,EAAQ/B,KAAKiC,IAAIF,EAAO,KAExB3B,EAAIyB,GAAGC,GAAKC,GAOhB,OAHAN,KAAKS,uBAAuB9B,EAAc,GAATwB,GACjCH,KAAKU,yBAAyB/B,EAAa,IAARuB,GAE5BvB,IA5BX,sBA+BE,SACEyB,EACAC,EACAM,GAGC,IAFDC,EAEA,uDAFkB,EAClBC,EACA,uDADkB,EAEZC,EAAKH,EAAYP,EAAIQ,EACrBG,EAAKJ,EAAYN,EAAIQ,EACrBG,EAAY,EAAIL,EAGhBM,EAAIjB,KAAKD,eAAemB,QAAQJ,EAAIC,GAAM,EAAI,GAEhDT,EAAQU,EAAYC,EACxB,OAAOX,IA9CX,oCAiDE,SAA+BF,EAAWC,EAAWc,GAAwB,IAAD,OACtEC,EAAkB,EAatB,OAZcD,EAAYE,QACxB,SAACC,EAAkBX,EAAmBY,GACpCH,GAAmB,EAAIT,EAIvB,IAAMC,EAAkB,GAARW,EACVV,EAAkB,IAARU,EAChB,OAAOD,EAAW,EAAKE,SAASpB,EAAGC,EAAGM,EAAWC,EAASC,KAE5D,GAEaO,IA/DnB,sCAoEE,SAAiCK,EAAsBC,GAMrD,IALA,IAAMxB,EAAQuB,EAASpD,OACjB8B,EAASsB,EAAS,GAAGpD,OAIlB+B,EAAI,EAAGA,EAAIsB,EAAatB,IAK/B,IAFA,IAAMuB,EAAIvB,EAAIsB,EAELrB,EAAI,EAAGA,EAAIF,EAAQE,IAAK,CAI/B,IAAMuB,KAAO1B,EAAQwB,EAActB,GAEnCqB,EAASG,GAAGvB,GAAKwB,IAAUC,KACzBL,EAASG,GAAGvB,GACZoB,KAAYC,EAActB,IAAIC,GAC9BsB,MAxFV,oCAgGE,SAA+BF,EAAsBM,GAOnD,IANA,IAAM7B,EAAQuB,EAASpD,OACjB8B,EAASsB,EAAS,GAAGpD,OAKlBgC,EAAI,EAAGA,EAAI0B,EAAc1B,IAKhC,IAFA,IAAM2B,EAAIzD,KAAK0D,KAAKF,EAAe1B,GAE1BD,EAAI,EAAGA,EAAIF,EAAOE,IAAK,CAM9B,IAHA,IAAI8B,EAAK,EACLC,EAAK,EACLC,EAAI,EACCR,EAAIxB,EAAI4B,EAAGJ,EAAIxB,EAAI4B,EAAGJ,IACzBA,EAAI,GAAKA,GAAK1B,IAIlBgC,GAAMT,EAASG,GAAGvB,GAClB8B,GAAMV,EAASG,GAAGzB,EAASE,EAAI,GAC/B+B,KAKFX,EAASrB,GAAGC,GAAK6B,EAAKE,EACtBX,EAASrB,GAAGD,EAASE,EAAI,GAAK8B,EAAKC,OA/H3C,M,SJuBY1E,O,eAAAA,I,mBAAAA,I,gBAAAA,M,KAgCL,IAAe2E,EAAtB,WA4BE,WAAYC,EAAYrE,EAAcsE,EAAwBrE,EAAgBsE,GAAuB,yBA3B9FF,QA2B6F,OA1B7FrE,UA0B6F,OAzB7FsE,gBAyB6F,OAxB7FE,YAwB6F,OAvB7FD,YAuB6F,OAtB7FtE,YAsB6F,OArB7FwE,YAqB6F,OApB7FC,WAoB6F,OAlB1FC,kBAkB0F,OAjB1FC,mBAiB0F,OAhBjFC,sBAgBiF,OAd5FC,OAAS,IAAIC,IAc+E,KAb5FC,oBAa4F,OAZ5FC,mBAY4F,OAX5FC,cAW4F,OAV5FC,sBAU4F,OAT5FC,sBAS4F,OAR5FC,aAQ4F,OAN5FC,kBAM4F,OAL5FC,kBAK4F,OAJ5FC,iBAI4F,OAH5FC,iBAAmB,IAAIC,IAGqE,KAF5FC,sBAE4F,EAClG5D,KAAKsC,GAAKA,EACVtC,KAAK/B,KAAOA,EACZ+B,KAAKuC,WAAaA,EAClBvC,KAAK9B,OAASA,EACd8B,KAAKwC,OAASA,EAEdxC,KAAKyC,OAAS,IAAIoB,IAElB7D,KAAK4C,aAAe,IACpB5C,KAAK6C,cAAgB,IAtCzB,iFAyCE,iGACM7C,KAAKwC,OAAOsB,eAAiB9D,KAAKwC,OAAOsB,cAAgB,GAD/D,iBAEUC,EAAc/D,KAAKgE,sBAEzBhE,KAAKoD,iBAAmB,IAAIa,IAAcF,EAAYG,UAAUC,QAChEnE,KAAKqD,iBAAmB,IAAIY,IAAcF,EAAYpF,IAAIwF,QAE1DnE,KAAKoD,iBAAiBgB,QAAUC,IAChCrE,KAAKqD,iBAAiBe,QAAUC,IAE1BP,EAAgBvF,KAAK0D,KAAKjC,KAAKwC,OAAOsB,cAAgB9D,KAAK8C,kBAEjE9C,KAAKmD,SAAW,IAAImB,IAAkB,CACpCC,QAASvE,KAAKoD,iBACdoB,UAAWV,EACXnF,IAAKqB,KAAKqD,iBACVoB,gBAAiBzE,KAAKoD,iBACtBsB,kBAAmBZ,IAjBzB,4BAoBQ9D,KAAKwC,OAAOmC,YApBpB,kCAqB2B3E,KAAK+C,OAAO6B,UAAU5E,KAAKwC,OAAOmC,aArB7D,QAqBM3E,KAAKsD,QArBX,OAsBMtD,KAAKmD,SAAW,IAAI0B,IAAkB,CAAElG,IAAKqB,KAAKsD,QAASwB,MAAO9E,KAAKwC,OAAOuC,SAtBpF,wBAwBM/E,KAAKmD,SAAW,IAAI0B,IAAkB,CACpCC,MAAO9E,KAAKwC,OAAOuC,SAzB3B,eA8BE/E,KAAKiD,eAAiB,IAAI+B,IAAqBhF,KAAK9B,OAAQ,GAAI,IAChE8B,KAAK0C,OAAS,IAAIuC,IAAKjF,KAAKiD,eAAgBjD,KAAKmD,UAEjDnD,KAAK0C,OAAOwC,aAAelF,KAAKwC,OAAO0C,WACvClF,KAAK0C,OAAOyC,gBAAkBnF,KAAKwC,OAAO2C,cAEtCnF,KAAKwC,OAAO4C,UACdpF,KAAKqF,WAGPrF,KAAKyC,OAAO6C,IAAItF,KAAK0C,QAEjB1C,KAAKwC,OAAO+C,cACRC,EAAiBxF,KAAKwC,OAAO+C,YAAY7C,OAAO+C,SAChDnH,EAAc0B,KAAKwC,OAAOlE,aAAe,IAGzCqE,EAAQ3C,KAAK0F,kBAAkBpH,GACrC0B,KAAKyC,OAAO6C,IAAI3C,GAGhB3C,KAAK0C,OAAO+C,SAASE,IAAIrH,EAAa,EAAG,GAGzC0B,KAAKyC,OAAOgD,SAASE,IAAIH,EAAepF,EAAGoF,EAAenF,EAAGmF,EAAeI,GAG5E5F,KAAKyC,OAAOoD,SAASzF,EAAIyB,IAAUiE,SAAS9F,KAAKwC,OAAO9D,kBAGxDsB,KAAKyC,OAAOoD,SAASxF,EAAIwB,IAAUiE,SAAS,IAAM9F,KAAKwC,OAAOuD,qBA5DlE,kBA+DS/F,MA/DT,iDAzCF,2EA2GE,SAAegG,EAAcC,EAAeC,GAG1C,GAFAF,EAAMG,iBAEFnG,KAAKwC,OAAO+C,YAAa,CAE3B,IAEM9G,EAFYuB,KAAKwC,OAAO/D,WAAa,GAAK,GAAK,GAEtBwH,EACzBG,EAAiBpG,KAAKwC,OAAO4D,eAInCpG,KAAKyC,OAAOoD,SAASxF,GAAK5B,EAAa2H,EAGzC,GAAIpG,KAAKwC,OAAO6D,UAAW,CACzB,IAAMC,EAAYtG,KAAKwC,OAAO6D,UAAY,GAAK,GAAK,GACpDrG,KAAK0C,OAAOmD,SAASxF,GAAKiG,EAAYL,EAAQjG,KAAKwC,OAAO+D,cAG5D,GAAIvG,KAAKwC,OAAO4C,SAAU,CAExB,IACMoB,EAAQxG,KAAK0D,iBAAiB+C,WAAWzG,KAAK0C,OAAO+C,SAAUS,EAAOT,UAAUpH,SADlE,GAEpB2B,KAAKyD,YAAY+C,MAAMb,IAAIa,EAAOA,EAAQxG,KAAK4D,iBAAkB,GACjE5D,KAAKyD,YAAYgC,SAASpF,EAAIL,KAAK9B,UApIzC,kBAwIE,WACM8B,KAAKwC,OAAOkE,QACd1G,KAAKwC,OAAOkE,OAAO1G,KAAKsC,MA1I9B,qBA+IE,WAAkB,IAAD,gBAEf,UAAAtC,KAAKiD,sBAAL,SAAqB0D,UACrB,UAAA3G,KAAKkD,qBAAL,SAAoByD,UAGpB,UAAA3G,KAAK2C,aAAL,SAAYgE,UACZ,UAAA3G,KAAKmD,gBAAL,SAAewD,UAGf,UAAA3G,KAAKoD,wBAAL,SAAuBuD,UACvB,UAAA3G,KAAKqD,wBAAL,SAAuBsD,UACvB,UAAA3G,KAAKsD,eAAL,SAAcqD,UACd,UAAA3G,KAAKwD,oBAAL,SAAmBmD,UAGnB3G,KAAK4G,aA/JT,iCAkKE,WAeE,IAdA,IAEMC,EAAmB7G,KAAK8G,mBACxBC,EAAqBF,EAAiBG,gBAAgBhH,KAAK4C,aAAc5C,KAAK6C,eAC9EoE,EAAgBF,EAAmBG,KAEnCC,EAAmBnH,KAAK8G,mBACxBM,EAAqBD,EAAiBH,gBAAgBhH,KAAK4C,aAAc5C,KAAK6C,eAC9EwE,EAAgBD,EAAmBF,KAEnCpH,EAAO,sBAAIE,KAAKwC,OAAO8E,UAAhB,CAA0B,QAAOjG,QAAO,SAACkG,EAAKC,GAAN,OAAeD,EAAOC,KAErE/F,EADK,IAAI5B,EAAkBC,GACb2H,iBAAiBzH,KAAK4C,aAAc5C,KAAK6C,eAEpD6E,EAAI,EAAGA,EAAIT,EAAc5I,OAAQqJ,GAdvB,EAcwC,CAWzD,IAVA,IAAMtH,EAAKsH,EAfM,EAeY1H,KAAK4C,aAC5BvC,KAAOqH,EAhBI,EAgBa1H,KAAK4C,cAK/B+E,EAFyB,IADflG,EAASrB,GAAGC,GAMpBuH,EAAe,CAACD,EAAaA,EAAaA,EAAa,KACpDE,EAAK,EAAGA,EAAKD,EAAavJ,OAAQwJ,IACzCZ,EAAcS,EAAIG,GAAMD,EAAaC,GAKvC,IAFA,IAAIC,EAAY9H,KAAK+H,aAAaJ,EAAatH,GAEtCwH,EAAK,EAAGA,EAAKC,EAAUzJ,OAAQwJ,IACtCR,EAAcK,EAAIG,GAAMC,EAAUD,GAOtC,OAHAhB,EAAiBmB,aAAajB,EAAoB,EAAG,GACrDI,EAAiBa,aAAaZ,EAAoB,EAAG,GAE9C,CACLlD,UAAW2C,EACXlI,IAAKwI,KA5MX,4BAkNE,SAAyBc,EAAsE9H,GAC7F,OAAOH,KAAKkI,WAAWD,EAAME,KAAMF,EAAMG,OAAQjI,EAAS8H,EAAMI,MAAQJ,EAAMK,IAAML,EAAMI,QAnN9F,wBAsNE,SAAqBE,EAAgBC,EAAgBC,GACnD,IAAMrG,EAAIpC,KAAK0I,eAAeH,GAAMzG,KAAK9B,KAAK0I,eAAeF,GAAOC,GACpE,MAAM,GAAN,mBAAWrG,EAAEuG,WAAb,CAAwB,QAxN5B,4BA2NE,SAAyB5D,GACvB,OAAO,IAAI6D,KAAQC,OAAO9D,EAAO,GAAIA,EAAO,GAAIA,EAAO,MA5N3D,8BA+NE,WACE,IAAM+D,EAAMC,SAASC,cAAc,UAAUC,WAAW,MAKxD,OAJAH,EAAI3E,OAAOjE,MAAQF,KAAK4C,aACxBkG,EAAI3E,OAAOhE,OAASH,KAAK6C,cACzBiG,EAAII,UAAY,OAChBJ,EAAIK,SAAS,EAAG,EAAGL,EAAI3E,OAAOjE,MAAO4I,EAAI3E,OAAOhE,QACzC2I,IArOX,+BAwOE,SAA0B5K,GAExB8B,KAAKkD,cAAgB,IAAIkG,IACzB,IAAMC,EAAQ,GACdrJ,KAAK2C,MAAQ,IAAI2G,IAAkB,CAAExE,MAAO,SAAUyE,QAAS,GAAKC,aAAa,IAEjF,IAAK,IAAI9B,EAAI,EAAGA,GALG,IAKgBA,IAAK,CACtC,IAAI+B,EAAS/B,EANI,IAMgBnJ,KAAKmL,GAAK,EAC3CL,EAAMM,KAAKpL,KAAKqL,IAAIH,GAASvL,EAAQ,EAAGK,KAAKsL,IAAIJ,GAASvL,GAE5D,IAAM4L,EAAW,IAAIC,aAAaV,GAElC,OADArJ,KAAKkD,cAAc8G,aAAa,WAAY,IAAIC,IAAgBH,EAAU,IACnE,IAAII,IAAKlK,KAAKkD,cAAelD,KAAK2C,SApP7C,sBAuPE,WACE3C,KAAKuD,aAAewF,SAASC,cAAc,UAAUC,WAAW,MAGhEjJ,KAAKuD,aAAaY,OAAOjE,MAAQ,IACjCF,KAAKuD,aAAaY,OAAOhE,OAAS,IAElCH,KAAKuD,aAAa4G,KAAlB,UAJiB,GAIjB,kCAMAnK,KAAK4D,iBAAmB5D,KAAKuD,aAAaY,OAAOhE,OAASH,KAAKuD,aAAaY,OAAOjE,MAMnFF,KAAKuD,aAAa2F,UAAY,QAC9BlJ,KAAKuD,aAAa6G,UAAY,SAC9BpK,KAAKuD,aAAa8G,SAASrK,KAAK/B,KAAM+B,KAAKuD,aAAaY,OAAOjE,MAAQ,EAAGoK,IAE1EtK,KAAKwD,aAAe,IAAI+G,IAAQvK,KAAKuD,aAAaY,QAClDnE,KAAKwD,aAAagH,aAAc,EAChC,IAAMC,EAAiB,IAAIC,IAAe,CACxC/L,IAAKqB,KAAKwD,aACVgG,aAAa,IAEfxJ,KAAKyD,YAAc,IAAIkH,IAAOF,GAG9BzK,KAAK0C,OAAO4C,IAAItF,KAAKyD,iBAvRzB,K,2BKzDamH,EAAc,CACzB,WACA,WACA,UACA,WACA,WACA,SACA,UACA,UACA,QACA,SACA,WACA,YACA,YACA,WACA,QACA,QACA,SACA,SACA,WACA,SACA,YACA,SACA,SACA,WACA,SACA,OACA,WACA,UACA,YACA,SACA,YACA,aACA,SACA,UACA,UACA,SACA,UACA,UACA,UACA,cACA,cACA,aACA,aACA,SACA,WACA,aACA,YACA,UACA,WACA,cACA,aACA,WACA,YACA,SACA,SACA,UACA,OACA,OACA,QACA,OACA,QACA,QACA,QACA,UACA,QACA,QACA,SACA,UACA,UACA,aACA,WACA,YACA,UACA,WACA,UACA,WACA,WACA,QACA,SACA,QACA,QACA,SACA,UACA,SACA,SACA,WACA,UACA,UACA,SACA,cACA,UACA,SACA,SACA,WACA,SACA,WACA,UACA,YACA,YACA,SACA,aACA,UACA,UACA,aACA,gBACA,WACA,YACA,WACA,UACA,WACA,WACA,WACA,WACA,QACA,QACA,cACA,OACA,QACA,SACA,YACA,UACA,SACA,SACA,WACA,YACA,QACA,OACA,SACA,eACA,SACA,UACA,SACA,WACA,WACA,QACA,SACA,WACA,SACA,WACA,SACA,WACA,UACA,YACA,UACA,QACA,cACA,YACA,SACA,SACA,SACA,OACA,WACA,QACA,UACA,WACA,WACA,QACA,SACA,SACA,OACA,UACA,SACA,UACA,UACA,SACA,YACA,WACA,OACA,KACA,MACA,QACA,SACA,WACA,UACA,UACA,OACA,MACA,OACA,WACA,aACA,SACA,QACA,UACA,WACA,YACA,aACA,WACA,UACA,UACA,QACA,QACA,SACA,WACA,QACA,UACA,QACA,SACA,WACA,OACA,OACA,UACA,WACA,WACA,QACA,SACA,SACA,QACA,WACA,WACA,gBACA,UACA,SACA,SACA,SACA,UACA,OACA,QACA,QACA,WACA,aACA,UACA,MACA,SACA,SACA,gBACA,SACA,SACA,QACA,QACA,SACA,QACA,YACA,YACA,aACA,OACA,OACA,WACA,WACA,QACA,OACA,SACA,WACA,QACA,SACA,gBACA,gBACA,cACA,aACA,YACA,aACA,aACA,SACA,aACA,QACA,UACA,WACA,WACA,QACA,SACA,UACA,SACA,kBACA,KACA,UACA,QACA,YACA,UACA,OACA,SACA,QACA,QACA,UACA,OACA,UACA,WACA,QACA,UACA,SACA,QACA,UACA,iBACA,QACA,QACA,SACA,QACA,aACA,UACA,QACA,OACA,SACA,UACA,OACA,QACA,iBACA,MACA,QACA,OACA,SACA,SACA,QACA,OACA,QACA,YACA,UACA,QACA,QACA,SACA,UACA,WACA,YACA,SACA,WACA,WACA,YACA,SACA,SACA,QACA,QACA,UACA,QACA,WACA,YACA,QACA,aACA,QACA,cACA,WACA,OACA,OACA,QACA,WACA,QACA,SACA,UACA,YACA,QACA,UACA,cACA,SACA,SACA,SACA,SACA,OACA,QACA,SACA,QACA,KACA,YACA,WACA,SACA,MACA,WACA,SACA,UACA,UACA,iBACA,UACA,WACA,UACA,QACA,SACA,aACA,cACA,MACA,UACA,QACA,UACA,UACA,YACA,KACA,SACA,MACA,MACA,UACA,QACA,WACA,SACA,QACA,YACA,cACA,YACA,UACA,UACA,SACA,SACA,UACA,WACA,WACA,YACA,YACA,cACA,UACA,UACA,WACA,WACA,cACA,YACA,UACA,aACA,UACA,YACA,YACA,WACA,OACA,SACA,YACA,aACA,WACA,YACA,aACA,aACA,WACA,SACA,aACA,UACA,WACA,QACA,UACA,SACA,aACA,aACA,aACA,UACA,SACA,YACA,UACA,SACA,WACA,eACA,UACA,MACA,OACA,UACA,WACA,SACA,aACA,SACA,SACA,SACA,SACA,SACA,UACA,WACA,QACA,SACA,WACA,MACA,SACA,SACA,SACA,SACA,QACA,OACA,cACA,SACA,QACA,WACA,QACA,YACA,WACA,aACA,SACA,SACA,WACA,cACA,SACA,UACA,WACA,UACA,SACA,UACA,SACA,QACA,SACA,WACA,WACA,YACA,SACA,WACA,SACA,SACA,SACA,SACA,SACA,UACA,SACA,SACA,QACA,QACA,SACA,SACA,UACA,WACA,MACA,Q,kBC5eWC,EAAb,8FACE,SAAwB/K,GAKtB,OAJWgL,IAAQC,QAAQ,CACzBjL,KAAMA,GAGDkL,GARC,aAEZ,0BASE,SAA2B3C,EAAaC,EAAaxI,GACnD,OAAOvB,KAAKC,MAAMqM,EAAOI,UAAUnL,IAASwI,EAAMD,EAAM,GAAKA,KAVjE,4BAaE,SAA6BA,EAAaC,EAAaxI,GACrD,OAAO+K,EAAOI,UAAUnL,IAASwI,EAAMD,GAAOA,IAdlD,sBAiBE,SAAuBvI,GACrB,OAAO+K,EAAOI,UAAUnL,IAAS,KAlBrC,gCAqBE,SAAiCoL,EAAcpL,GAE7C,OAAOoL,EADOlL,KAAKmL,aAAa,EAAGD,EAAM7M,OAAS,EAAGyB,MAtBzD,oCAiCE,SAAqC5B,EAAgBkN,EAAYC,EAAYC,GACtEF,IACHA,EAAK,GAEFC,IACHA,EAAK,GAEFC,IACHA,EAAK,GAGP,IAAIC,EAAIhN,KAAKiN,SACT7J,EAAIpD,KAAKiN,SACT/B,EAAQ,EAAIlL,KAAKmL,GAAK6B,EACtBE,EAAMlN,KAAKmN,KAAK,EAAI,EAAI/J,GAK5B,MAAO,CAJCyJ,EAAKlN,EAASK,KAAKsL,IAAI4B,GAAOlN,KAAKqL,IAAIH,GACvC4B,EAAKnN,EAASK,KAAKsL,IAAI4B,GAAOlN,KAAKsL,IAAIJ,GACvC6B,EAAKpN,EAASK,KAAKqL,IAAI6B,QAlDnC,KCEME,EAKa,KALbA,EAMa,MANbA,EAQkB,SARlBA,EASkB,WATlBA,EAWiB,OAXjBA,EAagB,OAbhBA,EAcgB,QAdhBA,EAgBe,MAhBfA,EAuBuB,MAGvBC,EACI,EADJA,EAEW,EAFXA,EAGI,EAHJA,EAKY,EALZA,EAOO,EAPPA,EAQa,EARbA,EASS,EATTA,EAUc,EAVdA,EAWW,GAXXA,EAYgB,GAZhBA,EAaQ,GAGDC,GAAb,WASE,WAAY/L,GAAe,yBARnBgM,SAAW,EAQO,KAPlBhM,UAOkB,OALlBiM,YAA2B,CACjCC,MAAO,GACPC,QAAS,IAITjM,KAAKF,KAAOA,EAVhB,6CAaE,WAEE,OADAE,KAAK8L,WACE9L,KAAK8L,WAfhB,sBAkBE,WAqBE,IArByD,IAAD,OAA1CI,EAA0C,uDAArB,OAC7BF,EAA6B,CACjC,CACE1J,GAAItC,KAAKmM,YACTlO,KAAK,QAAD,OAAU+B,KAAK8L,UACnBhM,KAAM,CAACE,KAAKF,KAAM,GAClB2F,SAAU,CAAC,EAAG,EAAG,GACjBvH,OAAQgO,EACRpI,cAAe,EACf1F,MAAO,GACPgO,cAAe,EACf9N,YAAa,EACbG,WAAY,EACZ2H,eAAgB,EAChB1H,iBAAkB,EAClBqH,mBAAoB,EACpBM,UAAWwE,EAAOwB,eAAe,KAAQ,KAAY,CAACrM,KAAKF,KAAM,GAAtD,QAA0D8L,KACrErF,cAAesE,EAAOyB,SAAa,CAACtM,KAAKF,KAAM,GAAhC,QAAoC8L,KAA8B,GAAK,IAIjFW,EAAY,EAAGA,EAAYP,EAAM3N,OAAQkO,IAAa,CAS7D,IARA,IAAMC,EAAOR,EAAMO,GACbjF,EAAW,CAACtH,KAAKF,KAAMyM,GAEvBE,EAAkB5B,EAAOM,aAAa,EAAG,EAAvB,UAA8B7D,EAA9B,CAAwCsE,KAG1Dc,EAAsB1M,KAAK2M,0BAA0BF,EAAiBnF,GAPf,WASpDsF,GAiCP,IAhCA,IAAMtF,EAAW,CAAC,EAAKxH,KAAMyM,EAAWK,GAElCC,EAAehC,EAAOM,aAC1BQ,EACoC,EAApCA,EAFmB,UAGfrE,EAHe,CAGLsE,KAGV7N,EAAS,EAAK+O,aAClBF,EACAtF,EACAuF,EACAJ,EACAC,EAAoBE,GACpBJ,GAIIO,EAAgBlC,EAAOM,aAAa,EAAG,GAAvB,UAA+B7D,EAA/B,CAAyCsE,KAGzDoB,EAAoB,IAAIC,MAAMF,GACjCG,KAAK,MACLvO,KAAI,SAACwO,EAAM5L,GAAP,OACHsJ,EAAOM,aAAaQ,EAAsCA,EAA1D,UACKrE,EADL,CAEEsE,EACArK,QAGH6L,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAEbC,EAAY,EAAGA,EAAYR,EAAeQ,IAAa,CAC9D,IAAMjG,EAAW,CAAC,EAAKxH,KAAMyM,EAAWK,EAAaW,GAE/CC,EAAa3C,EAAOM,aAAa0B,EAAe,GAAIA,EAAe,EAAtD,UACdvF,EADc,CAEjBsE,KAGI6B,EAAO,EAAKC,WAAWH,EAAWjG,EAAUkG,EAAYR,EAAkBO,GAAYR,GAC5FhP,EAAOK,MAAMuL,KAAK8D,GAnDuC,oBAsDxC1P,EAAOK,OAtDiC,IAsD3D,2BAAiC,CAAC,IAAvBqP,EAAsB,QAGzBhF,EAAQ,IAFagF,EAAKnP,YACAP,EAAOK,MAAML,EAAOK,MAAMC,OAAS,GAAGC,YAEtEmP,EAAKhP,WAAagK,EAAQkD,GA1D+B,8BA6D3D,EAAKI,YAAYE,QAAQtC,KAAK5L,IApDvB6O,EAAc,EAAGA,EAAcH,EAAiBG,IAAgB,EAAhEA,GAToD,oBAiExC5M,KAAK+L,YAAYE,SAjEuB,IAiE7D,2BAA+C,CAAC,IAArClO,EAAoC,QACvC4P,EAAmB5P,EAAOO,YAC1BsP,EAA4B5N,KAAK+L,YAAYE,QAAQjM,KAAK+L,YAAYE,QAAQ5N,OAAS,GAAGC,YAC1FmK,EAAQ,IAAMkF,EAAmBC,EACvC7P,EAAOU,WAAagK,EAAQkD,GArE+B,8BAwE7D3L,KAAK+L,YAAYC,MAAMrC,KAAK6C,GAG9B,OAAOxM,KAAK+L,cAlHhB,uCAqHE,SAAkCU,EAAyBnF,GAazD,IAZA,IAAMoF,EAAsB,IAAIO,MAAMR,GACnCS,KAAK,MACLvO,KAAI,SAACwO,EAAM5L,GAAP,OACHsJ,EAAOM,aAAaQ,EAAwCA,EAA5D,sBACKrE,GADL,CAEEsE,EACArK,QAGH6L,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAGb5F,EAAI,EAAGA,EAAIgF,EAAoBrO,OAAS,EAAGqJ,IAAK,CACvD,IAAMmG,EAAMnB,EAAoBhF,GAG1BoG,EAFMpB,EAAoBhF,EAAI,GAENmG,EAE9B,GAAIC,EAAkBnC,EAEpB,IAAK,IAAIpK,EAAQmG,EAAI,EAAGnG,EAAQmL,EAAoBrO,OAAQkD,IAC1DmL,EAAoBnL,IAAUoK,EAA8CmC,EAKlF,OAAOpB,IAhJX,wBAmJE,SAAmBnL,EAAe+F,EAAoBpJ,EAAgBI,EAAqByO,GACzF,IAAMgB,EAAuBlD,EAAOyB,SAAP,sBAAoBhF,GAApB,CAA8BsE,KAA+B,GAAK,EAEzFoC,EAAkBnD,EAAOwB,eAAe,KAAO,KAA7B,sBAAwC/E,GAAxC,CAAkDsE,KAoB1E,MAlBgC,CAC9BtJ,GAAItC,KAAKmM,YACTlO,KAAK,QAAD,OAAUsD,EAAQ,GACtBzB,KAAMwH,EACNpJ,OAAQA,EACR4F,cAAe+G,EAAOI,UAAP,sBAAqB3D,GAArB,CAA+BsE,KAC9CQ,eAAgB,EAChB9N,YAAaA,EACb8H,eAAgB2H,EAChBtP,YAAasO,EAAgBxL,GAASwL,EACtCrO,iBAAkBmM,EAAOM,aAAa,EAAG,GAAvB,sBAA+B7D,GAA/B,CAAyCsE,KAC3D7F,mBAAoB8E,EAAOI,UAAP,sBAAqB3D,GAArB,CAA+BsE,KACnDvF,UAAW2H,EACXzH,cAAesE,EAAOyB,SAAP,sBAAoBhF,GAApB,CAA8BsE,KAA8B,GAAK,EAChFqC,IAAKC,GAAa,GAAD,mBAAK5G,GAAL,CAAesE,KAChCxN,MAAO,MAvKb,0BA6KE,SACEmD,EACA+F,EACApJ,EACAuO,EACAnO,EACAkO,GAEA,IAAMuB,EAAuBlD,EAAOyB,SAAP,sBAAoBhF,GAApB,CAA8BsE,KAA+B,GAAK,EACzFoC,EAAkBnD,EAAOwB,eAAe,KAAO,KAA7B,sBAAwC/E,GAAxC,CAAkDsE,KACpEuC,EAAatD,EAAOuD,mBAAmBxD,EAA1B,sBAA2CtD,GAA3C,CAAqDsE,KAoBxE,MAjBkC,CAChCtJ,GAAItC,KAAKmM,YACTlO,KAAMkQ,EACNrO,KAAMwH,EACNpJ,OAAQA,EACR4F,cAAe,EACfsI,cAAeI,EAAKlK,GACpBhE,YAAaA,EACb8H,eAAgB2H,EAChBtP,YAAagO,EAAkBlL,GAASkL,EACxC/N,iBAAkBmM,EAAOM,aAAa,EAAG,GAAvB,sBAA+B7D,GAA/B,CAAyCsE,KAC3D7F,mBAAoB8E,EAAOI,UAAP,sBAAqB3D,GAArB,CAA+BsE,KACnDvF,UAAW2H,EACXzH,cAAesE,EAAOyB,SAAP,sBAAoBhF,GAApB,CAA8BsE,KAA8B,GAAK,EAChFxN,MAAO,QAxMb,KA+MM8P,GAAe,SAACpO,GACpB,MAAO,CACL+K,EAAOwB,eAAe,GAAK,EAA3B,sBAAkCvM,GAAlC,CAAwC,KACxC+K,EAAOwB,eAAe,GAAK,EAA3B,sBAAkCvM,GAAlC,CAAwC,KACxC+K,EAAOwB,eAAe,GAAK,EAA3B,sBAAkCvM,GAAlC,CAAwC,O,gBCjQ/BuO,GAAb,8MACYvL,iBAAmB,EAD/B,8CAGE,cAHF,0BAKE,SAAuB3C,EAAgBE,GACrC,IAAMoI,EAAQtI,EAAS,GAEvB,EAAoBH,KAAKwC,OAAOuC,OAAxBuJ,EAAR,EAAQA,EAAGC,EAAX,EAAWA,EAAGjB,EAAd,EAAcA,EAERkB,EAAO,CAACjQ,KAAKC,MAAU,IAAJ8P,GAAU/P,KAAKC,MAAU,IAAJ+P,GAAUhQ,KAAKC,MAAU,IAAJ8O,GAAU,KAE7E,MAAO,CAACkB,EAAK,GAAK/F,EAAO+F,EAAK,GAAK/F,EAAO+F,EAAK,GAAK/F,EAAO+F,EAAK,QAZpE,GAA0BnM,GCCboM,GAAb,8MACY3L,iBAAmB,EAAK5E,OAAS,GAD7C,EAKUwQ,QAAU,CAChBC,UAAW,EAAKC,gBAAgB,GAChCC,WAAY,EAAKD,gBAAgB,GACjCE,UAAW,EAAKF,gBAAgB,GAChCG,WAAY,EAAKH,gBAAgB,GACjCI,WAAY,EAAKJ,gBAAgB,GACjCK,YAAa,EAAKL,gBAAgB,GAClCM,WAAY,EAAKN,gBAAgB,GACjCO,YAAa,EAAKP,gBAAgB,GAClCQ,aAAc,EAAKR,gBAAgB,GACnCS,cAAe,EAAKT,gBAAgB,GACpCU,WAAY,EAAKV,gBAAgB,IACjCW,YAAa,EAAKX,gBAAgB,IAClCY,SAAU,EAAKZ,gBAAgB,IAC/Ba,UAAW,EAAKb,gBAAgB,KAnBpC,8CAGE,cAHF,0BAsBE,SAAuBzO,EAAgBE,GAErC,OADeL,KAAK0P,mBAAmBvP,KAvB3C,gCA2BE,SAA2BA,GA8CzB,IA7CA,IA6CA,MA7Ce,CAEb,CACEkI,IAAK,EACLC,IAAK,GACLH,KAAMnI,KAAK0O,QAAQC,UACnBvG,MAAOpI,KAAK0O,QAAQG,YAGtB,CACExG,IAAK,GACLC,IAAK,GACLH,KAAMnI,KAAK0O,QAAQG,WACnBzG,MAAOpI,KAAK0O,QAAQK,YAGtB,CACE1G,IAAK,GACLC,IAAK,IACLH,KAAMnI,KAAK0O,QAAQM,WACnB5G,MAAOpI,KAAK0O,QAAQO,aAGtB,CACE5G,IAAK,IACLC,IAAK,IACLH,KAAMnI,KAAK0O,QAAQQ,WACnB9G,MAAOpI,KAAK0O,QAAQS,aAGtB,CACE9G,IAAK,IACLC,IAAK,IACLH,KAAMnI,KAAK0O,QAAQU,aACnBhH,MAAOpI,KAAK0O,QAAQW,eAGtB,CACEhH,IAAK,IACLC,IAAK,IACLH,KAAMnI,KAAK0O,QAAQY,WACnBlH,MAAOpI,KAAK0O,QAAQa,cAIxB,eAA4B,CAAvB,IAAMtH,EAAK,KACd,GAAI9H,EAAS8H,EAAMK,IACjB,OAAOtI,KAAK2P,eAAe1H,EAAO9H,GAItC,OAAOH,KAAK0O,QAAQe,YA/ExB,6BAkFE,SAAwBG,GACtB,IAAM9P,EAAI,sBAAOE,KAAKwC,OAAO8E,UAAnB,CAA6BsI,IAGvC,MAAO,CACL,IAAM/E,EAAOwB,eAFH,GAEuB,EAA3B,sBAAkCvM,GAAlC,CAAwC,KAC9C,IAAM+K,EAAOwB,eAHH,GAGuB,EAA3B,sBAAkCvM,GAAlC,CAAwC,KAC9C,IAAM+K,EAAOwB,eAJH,GAIuB,EAA3B,sBAAkCvM,GAAlC,CAAwC,KAC9C,SA1FN,GAA4BuC,GCDfwN,GAAb,oDAGE,WAAYvN,EAAYrE,EAAcsE,EAAwBrE,EAAgBsE,GAAuB,IAAD,8BAClG,cAAMF,EAAIrE,EAAMsE,EAAYrE,EAAQsE,IAH5BM,iBAAmB,EAK3B,EAAKN,OAAOsB,cAAgB,EAC5B,EAAKtB,OAAOmC,YAAc,iBAJwE,EAHtG,4CAUE,cAVF,0BAYE,SAAuBxE,EAAgBE,GACrC,MAAoBL,KAAKwC,OAAOuC,OAAxBuJ,EAAR,EAAQA,EAAGC,EAAX,EAAWA,EAAGjB,EAAd,EAAcA,EACRkB,EAAO,CAACjQ,KAAKC,MAAU,IAAJ8P,GAAU/P,KAAKC,MAAU,IAAJ+P,GAAUhQ,KAAKC,MAAU,IAAJ8O,GAAU,KAC7E,MAAO,CAACkB,EAAK,GAAIA,EAAK,GAAIA,EAAK,GAAIA,EAAK,QAf5C,GAA0BnM,GCApBqM,GAAU,CACdC,UAAW,CAAC,EAAG,GAAI,IAAK,KACxBE,WAAY,CAAC,EAAG,IAAK,IAAK,KAC1BC,UAAW,CAAC,IAAK,IAAK,GAAI,KAC1BC,WAAY,CAAC,IAAK,IAAK,IAAK,KAC5BC,WAAY,CAAC,EAAG,GAAI,GAAI,KACxBC,YAAa,CAAC,EAAG,IAAK,GAAI,KAC1BC,WAAY,CAAC,GAAI,IAAK,GAAI,KAC1BC,YAAa,CAAC,GAAI,IAAK,GAAI,KAC3BC,aAAc,CAAC,IAAK,IAAK,IAAK,KAC9BC,cAAe,CAAC,IAAK,IAAK,IAAK,KAC/BC,WAAY,CAAC,IAAK,IAAK,IAAK,KAC5BC,YAAa,CAAC,IAAK,IAAK,IAAK,KAC7BC,SAAU,CAAC,IAAK,IAAK,IAAK,KAC1BC,UAAW,CAAC,IAAK,IAAK,IAAK,MAGhBK,GAAb,8MACYhN,iBAAmB,EAAK5E,OAAS,GAD7C,8CAGE,cAHF,0BAKE,SAAuBiC,EAAgBE,GAOrC,OANeL,KAAK0P,mBAAmBvP,KAN3C,gCAeE,SAA2BA,GA8CzB,IA7CA,IA6CA,MA7Ce,CAEb,CACEkI,IAAK,EACLC,IAAK,GACLH,KAAMuG,GAAQC,UACdvG,MAAOsG,GAAQG,YAGjB,CACExG,IAAK,GACLC,IAAK,GACLH,KAAMuG,GAAQG,WACdzG,MAAOsG,GAAQK,YAGjB,CACE1G,IAAK,GACLC,IAAK,IACLH,KAAMuG,GAAQM,WACd5G,MAAOsG,GAAQO,aAGjB,CACE5G,IAAK,IACLC,IAAK,IACLH,KAAMuG,GAAQQ,WACd9G,MAAOsG,GAAQS,aAGjB,CACE9G,IAAK,IACLC,IAAK,IACLH,KAAMuG,GAAQU,aACdhH,MAAOsG,GAAQW,eAGjB,CACEhH,IAAK,IACLC,IAAK,IACLH,KAAMuG,GAAQY,WACdlH,MAAOsG,GAAQa,cAInB,eAA4B,CAAvB,IAAMtH,EAAK,KACd,GAAI9H,EAAS8H,EAAMK,IACjB,OAAOtI,KAAK2P,eAAe1H,EAAO9H,GAItC,OAAOuO,GAAQe,cAnEnB,GAA2BpN,GCV3B0N,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,CAAKnR,eAAgB,ICoEvB,aAAe,IAAD,kCA9CNiN,iBA8CM,OA5CNmE,WAAY,EA4CN,KA3CNC,WA2CM,OA1CNjK,YA0CM,OAzCNF,MAAQ,IAAIoK,IAyCN,KAxCNC,OAAmB,GAwCb,KAvCNC,cAuCM,OAtCNC,mBAsCM,OArCNC,WAqCM,OApCNC,kBAoCM,OAnCNC,2BAmCM,OAlCNC,kBAkCM,OAjCNC,SAiCM,OAhCNC,0BAgCM,OA/BNC,sBA+BM,OA7BNC,kBA6BM,OA5BNC,gBA4BM,OAzBPzR,oBAyBO,OAxBPE,mBAwBO,OAvBPE,oBAuBO,OArBNsR,QAAU,CAChBnR,KAAM,OACNoR,gBAAiB,EACjBC,YAAY,EACZC,iBAAkB,SAClBC,gBAAgB,GAgBJ,KAbNC,eAAiB,CACvBC,UAAW,WACT,EAAKA,aAEPC,QAAS,WACP,EAAKP,QAAQnR,KAAO+B,IAAU4P,QAAQ,IAAQ,QAC9C,EAAKnS,QAEPoS,WAAY,WACV,EAAKpS,SAIK,KAqDPA,KAAO,WACR,EAAKC,gBACP,EAAKA,iBAGP,EAAKqR,IAAIe,gBACT,EAAKC,aACL,EAAK7F,YAAc,IAAIF,GAAqB,EAAKoF,QAAQnR,MAAM+R,WAE/D,EAAKC,QAAQC,MAAK,WAChB,EAAKR,YACL,EAAKS,UACD,EAAKvS,eACP,EAAKA,oBAlEG,KAuENqS,MAvEM,sBAuEE,sCAAAzE,EAAA,yDACd,EAAKoD,cAAgB,EAMrB,EAAKM,aAAe,IAAIkB,IAAa,SAAU,KAC/C,EAAK9B,MAAM7K,IAAI,EAAKyL,cAEpB,EAAKC,WAAa,IAAIkB,IAlIR,SAkI8B,GAC5C,EAAKlB,WAAWvL,SAASE,IAAI,EAAG,EAAG,GACnC,EAAKwK,MAAM7K,IAAI,EAAK0L,aAEhB,EAAKC,QAAQI,eAdH,iCAeN,EAAKc,6BAfC,QAgBZ,IAAKjM,OAAOT,UAASE,IAArB,oBAA4B,EAAK+K,wBAhBrB,yCAkBN,EAAK0B,oBAlBC,SAmBZ,IAAKlM,OAAOT,UAASE,IAArB,oBAA4B,EAAK+K,wBAAuB2B,aAAa,KAnBzD,QAoCd,IAdMpG,EAAU,EAAKoE,OAAOiC,QAAO,SAAChF,GAAD,OAAOA,EAAE/K,aAAe7E,EAAW6U,UAChE/F,EAAO,EAAK6D,OAAOiC,QAAO,SAAChF,GAAD,OAAOA,EAAE/K,aAAe7E,EAAWmS,QAAM,GAEzE,EAAKgB,qBAAuB,EAAKD,IAAI4B,UAAU,gBAC/C,EAAK3B,qBAAqB4B,OAC1B,EAAK5B,qBAAqBvL,IAAI,EAAK2L,QAAS,kBAAkBhT,KAAK,cAAcyU,SAAS,EAAKpT,MAC/F,EAAKuR,qBAAqBvL,IAAI,EAAK2L,QAAS,cAAchT,KAAK,eAAeyU,SAAS,EAAKC,cAE5F,EAAK9B,qBACFvL,IAAI,EAAK2L,QAAS,mBADrB,CAC0CzE,EAAKvO,MAD/C,mBACwDgO,EAAQtN,KAAI,SAACiU,GAAD,OAAOA,EAAE3U,WAC1EA,KAAK,kBACR,EAAK4S,qBAAqBvL,IAAI,EAAKgM,eAAgB,aAAarT,KAAK,cAErE,EAAK6S,iBAAmB,EAAKF,IAAI4B,UAAU,WAClCjR,EAAQ,EAAGA,EAAQ0K,EAAQ5N,OAAQkD,IACpCxD,EAASkO,EAAQ1K,GACvB,EAAKuP,iBAAiBxL,IAAIvH,EAAQ,QAAQE,KAA1C,WAAmDsD,EAAQ,EAA3D,aAAiExD,EAAOE,OAG1E,EAAKiS,WAAY,EAzCH,4CAvEF,KAmHP8B,QAAU,WACf,GAAK,EAAK9B,UAAV,CAWA,GARA2C,sBAAsB,EAAKb,SAE3B,EAAK3B,OAAOyC,SAAQ,SAACC,GACnBA,EAAKf,QAAQ,EAAKhM,MAAO,EAAKiL,QAAQC,gBAAkB,EAAG,EAAKhL,WAGlE,EAAKsK,MAAMwC,SAEP,EAAKvC,cAAgB,EAAG,CAC1B,IAAM1S,EAAS,EAAKsS,OAAO4C,MAAK,SAAC3F,GAAD,OAAOA,EAAEhL,KAAO,EAAKmO,gBACrD,GAAI1S,EAAQ,CACV,IAAMmV,EAAM,IAAIvP,IAChB5F,EAAO2E,OAAOyQ,iBAAiBD,GAC/B,EAAKhN,OAAOT,SAASE,IAAIuN,EAAI9S,EAAoB,EAAhBrC,EAAOG,OAAYgV,EAAI7S,EAAoB,EAAhBtC,EAAOG,OAAYgV,EAAItN,EAAoB,EAAhB7H,EAAOG,QAC9F,EAAKgI,OAAOkN,OAAOF,EAAI9S,EAAG8S,EAAI7S,EAAG6S,EAAItN,QAElC,CACL,IAAM7H,EAAS,EAAKsS,OAAO4C,MAAK,SAAC3F,GAAD,OAAOA,EAAErP,OAAS,EAAKgT,QAAQG,oBAC/D,GAAIrT,EAAQ,CACV,IAAMmV,EAAM,IAAIvP,IAChB5F,EAAO2E,OAAOyQ,iBAAiBD,GAC/B,EAAK3C,cAAc8C,OAAO1N,IAAIuN,EAAI9S,EAAG8S,EAAI7S,EAAG6S,EAAItN,GAChD,EAAK2K,cAAcyC,UAIvB,EAAK1C,SAASN,OAAO,EAAKG,MAAO,EAAKjK,UAjJ1B,KAoJN0L,WAAa,WAAO,IAAD,IACzB,EAAK1B,WAAY,EAEjB,IACE,EAAKU,IAAI0C,aAAa,EAAKzC,sBAC3B,EAAKD,IAAI0C,aAAa,EAAKxC,kBAC3B,EAAKD,qBAAqB0C,UAC1B,MAAOC,IAET,YAAKzC,oBAAL,SAAmBpK,UACnB,YAAKqK,kBAAL,SAAiBrK,UAVQ,oBAYN,EAAK0J,QAZC,IAYzB,2BAAgC,SACzB1J,WAbkB,8BAezB,EAAK0J,OAAS,GACd,EAAKF,MAAMsD,QAEX,EAAKnD,SAASN,OAAO,EAAKG,MAAO,EAAKjK,SAtK1B,KAyKNqL,UAAY,WAGgB,IAAD,EAE1B,GAJP,EAAKd,cAAgB,EAEjB,EAAKQ,QAAQI,iBACf,IAAKnL,OAAOT,UAASE,IAArB,oBAA4B,EAAK+K,yBAEjC,IAAKxK,OAAOT,UAASE,IAArB,oBAA4B,EAAK+K,wBAAuB2B,aAAa,KAGnE,EAAK1S,gBACP,EAAKA,oBAAeT,IAnLV,KAuLNwU,iBAAmB,SAACpR,GAG1B,GAFA,EAAKmO,aAAenO,EAEhB,EAAK3C,eAAgB,CACvB,IAAM5B,EAAS,EAAKgO,YAAYE,QAAQgH,MAAK,SAACL,GAAD,OAAOA,EAAEtQ,KAAOA,KAC7D,EAAK3C,eAAe5B,KA5LV,KAgMN4U,aAAe,WAAO,IAAD,gBACR,EAAKtC,QADG,IAC3B,2BAAgC,CAAC,IAAtB0C,EAAqB,QAC1BA,EAAKpQ,QACPoQ,EAAKpQ,MAAM4G,QAAiC,IAAvBwJ,EAAKpQ,MAAM4G,QAAgB,GAAM,IAH/B,gCAhMf,KA2MN4I,2BA3MM,sBA2MuB,8CAAA9E,EAAA,sDAE7BsG,EAAY,KAFiB,cAIhB,EAAK5H,YAAYC,OAJD,gEAIxBQ,EAJwB,QAK3BtO,EAASsO,EAAKtO,OAASyV,EACvBrV,EAAckO,EAAKlO,YAAcqV,EACjClV,EAAa+N,EAAK/N,WAAakV,EAE/BC,EAAa,IAAI/D,GAAKrD,EAAKlK,GAAIkK,EAAKvO,KAAMP,EAAWmS,KAAM3R,EAAQ,CACvEoJ,SAAUkF,EAAK1M,KACf2F,SAAU+G,EAAK/G,SAAL,YAAoB9B,IAApB,YAA+B6I,EAAK/G,WAAY,IAAI9B,IAAQ,EAAG,EAAG,GAC5EoB,OAAQ,IAAI6D,IAAM,UAClBrD,aAAa,EACbjH,YAAaA,EACb8H,eAAgBoG,EAAKpG,eACrB3H,WAAYA,EACZC,iBAAkB8N,EAAK9N,iBACvBqH,mBAAoByG,EAAKzG,mBACzBM,UAAWmG,EAAKnG,UAChBE,cAAeiG,EAAKjG,gBApBW,UAsB3BqN,EAAWC,SAtBgB,QAuBjC,EAAKxD,OAAO1G,KAAKiK,GACjB,EAAKzD,MAAM7K,IAAIsO,EAAWnR,QAxBO,IAAA4K,EAAA,iBA0BxBT,GA1BwB,2CAAAS,EAAA,6DA2BzBtP,EAAS,EAAKgO,YAAYE,QAAQW,GAElC1O,EAASH,EAAOG,OAASyV,EACzBrV,EAAcP,EAAOO,YAAcqV,EACnClV,EAAaV,EAAOU,WAAakV,EAEjCpO,EAAc,EAAK8K,OAAO4C,MAAK,SAAC3F,GAAD,OAAOA,EAAEhL,KAAOvE,EAAOqO,iBAEtD0H,EAA6B,CACjCxM,SAAUvJ,EAAO+B,KACjB2F,SAAU1H,EAAO0H,SAAP,YAAsB9B,IAAtB,YAAiC5F,EAAO0H,WAAYF,EAAY9C,OAAOgD,SACjF3B,cAAe/F,EAAO+F,cACtByB,YAAaA,EACbjH,YAAaA,EACb8H,eAAgBrI,EAAOqI,eACvB3H,WAAYA,EACZC,iBAAkBX,EAAOW,iBACzBqH,mBAAoBhI,EAAOgI,mBAC3BM,UAAWtI,EAAOsI,UAClBE,cAAexI,EAAOwI,cACtBnB,UAAU,EACVsB,OAAQ,EAAKgN,kBAGTK,EACY,IAAhBnH,EACI,IAAIkD,GAAM/R,EAAOuE,GAAIvE,EAAOE,KAAMP,EAAW6U,OAAQrU,EAAQ4V,GAC7D,IAAIrF,GAAO1Q,EAAOuE,GAAIvE,EAAOE,KAAMP,EAAW6U,OAAQrU,EAAQ4V,GAtDrC,SAuDzBC,EAAaF,SAvDY,qBAyDZ9V,EAAOK,OAzDK,kEAyDpBqP,EAzDoB,QA0DvBvP,EAASuP,EAAKvP,OAASyV,EACvBrV,EAAcmP,EAAKnP,YAAcqV,EACjClV,EAAagP,EAAKhP,WAAakV,EAE/BpO,EAAcwO,EAEdC,EAAa,IAAI3F,GAAKZ,EAAKnL,GAAImL,EAAKxP,KAAMP,EAAW2Q,KAAMnQ,EAAQ,CACvEoJ,SAAUmG,EAAK3N,KACf2F,SAAUgI,EAAKhI,SAAL,YAAoB9B,IAApB,YAA+B8J,EAAKhI,WAAYF,EAAY9C,OAAOgD,SAC7EV,OAAQ0I,EAAKQ,IAAL,YAAerF,IAAf,YAAwB6E,EAAKQ,MAAO,IAAIrF,IAAM,EAAG,EAAG,GAC5D9E,cAAe2J,EAAK3J,cACpByB,YAAaA,EACbjH,YAAaA,EACb8H,eAAgBqH,EAAKrH,eACrB3H,WAAYA,EACZC,iBAAkB+O,EAAK/O,iBACvBqH,mBAAoB0H,EAAK1H,mBACzBM,UAAWoH,EAAKpH,UAChBE,cAAexI,EAAOwI,gBA5EK,UA8EvByN,EAAWH,SA9EY,QA+E7B,EAAKxD,OAAO1G,KAAKqK,GAEjBD,EAAatR,OAAO6C,IAAI0O,EAAWvR,QAjFN,iJAoF/B,EAAK4N,OAAO1G,KAAKoK,GACjB,EAAK5D,MAAM7K,IAAIyO,EAAatR,QArFG,gEA0BxBmK,EAAc,EA1BU,aA0BPA,EAAc,EAAKb,YAAYE,QAAQ5N,QA1BhC,0CA0BxBuO,GA1BwB,iBA0BwCA,IA1BxC,uNA3MvB,KAwSNwF,kBAxSM,sBAwSc,wEAAA/E,EAAA,sDAEpBsG,EAAY,KAFQ,cAIP,EAAK5H,YAAYC,OAJV,gEAIfQ,EAJe,QAKlBN,EAAaM,EAAKtO,OAASyV,EAAY,EACvCrV,EAAckO,EAAKlO,YAAcqV,EACjClV,EAAa+N,EAAK/N,WAAakV,EAE/BC,EAAa,IAAI/D,GAAKrD,EAAKlK,GAAIkK,EAAKvO,KAAMP,EAAWmS,KAAM3D,EAAY,CAC3E5E,SAAUkF,EAAK1M,KACf2F,SAAU+G,EAAK/G,SAAL,YAAoB9B,IAApB,YAA+B6I,EAAK/G,WAAY,IAAI9B,IAAQ,EAAG,EAAG,GAC5EoB,OAAQ,IAAI6D,IAAM,UAClBrD,aAAa,EACbjH,YAAaA,EACb8H,eAAgBoG,EAAKpG,eACrB3H,WAAYA,EACZC,iBAAkB8N,EAAK9N,iBACvBqH,mBAAoByG,EAAKzG,mBACzBM,UAAWmG,EAAKnG,UAChBE,cAAeiG,EAAKjG,gBApBE,UAsBlBqN,EAAWC,SAtBO,QAuBxB,EAAKxD,OAAO1G,KAAKiK,GACjB,EAAKzD,MAAM7K,IAAIsO,EAAWnR,QAEpBwJ,EAAUgI,IAAU,EAAKlI,YAAYE,SA1BnB,cA6BHA,GA7BG,IA6BxB,2BAA8B,CAAnBlO,EAAmB,QACd,EACdA,EAAOG,QADO,EADc,cAGTH,EAAOK,OAHE,IAG5B,4BAAWqP,EAAsB,SAC1BvP,QAHO,EAIZuP,EAAKhP,YAJO,EADc,gCA7BN,8BAuCxB,IAASiJ,EAAI,EAAGA,EAAIuE,EAAQ5N,OAAQqJ,IAC5B3J,EAASkO,EAAQvE,GACjBwM,EAAmBnW,EAAOK,MAAML,EAAOK,MAAMC,OAAS,GAAGC,YAErD,IAANoJ,EACF3J,EAAOO,YAA4B,EAAdkO,EAAKtO,OAAgC,EAAnBgW,GAEjCC,EAAalI,EAAQvE,EAAI,GACzB0M,EAAuBD,EAAW/V,MAAM+V,EAAW/V,MAAMC,OAAS,GAAGC,YAC3EP,EAAOO,YAAc6V,EAAW7V,YAAc8V,EAAuBF,EAG/D5F,GACH,EAAKvC,YAAYE,QAAQvE,GAAGpJ,YAAc,EAAKyN,YAAYE,QAAQvE,EAAI,GAAGpJ,aAC3E,EAAKyN,YAAYE,QAAQ,EAAKF,YAAYE,QAAQ5N,OAAS,GAAGC,YAEhEP,EAAOO,aAAegQ,EAAIvQ,EAAOO,YAAc,IAvD3B,IAAA+O,EAAA,iBA2DfT,GA3De,2CAAAS,EAAA,6DA4DhBtP,EAASkO,EAAQW,GAEjB1O,EAASH,EAAOG,OAASyV,EACzBrV,EAAcP,EAAOO,YAAcqV,EACnClV,EAAaV,EAAOU,WAAakV,EAEjCpO,EAAc,EAAK8K,OAAO4C,MAAK,SAAC3F,GAAD,OAAOA,EAAEhL,KAAOvE,EAAOqO,iBAEtD0H,EAA6B,CACjCxM,SAAUvJ,EAAO+B,KACjB2F,SAAU1H,EAAO0H,SAAP,YAAsB9B,IAAtB,YAAiC5F,EAAO0H,WAAYF,EAAY9C,OAAOgD,SACjF3B,cAAe/F,EAAO+F,cACtByB,YAAaA,EACbjH,YAAaA,EACb8H,eAAgBrI,EAAOqI,eACvB3H,WAAYA,EACZC,iBAAkBX,EAAOW,iBACzBqH,mBAAoBhI,EAAOgI,mBAC3BM,UAAWtI,EAAOsI,UAClBE,cAAexI,EAAOwI,cACtBnB,UAAU,EACVsB,OAAQ,EAAKgN,kBAGTK,EACY,IAAhBnH,EACI,IAAIkD,GAAM/R,EAAOuE,GAAIvE,EAAOE,KAAMP,EAAW6U,OAAQrU,EAAQ4V,GAC7D,IAAIrF,GAAO1Q,EAAOuE,GAAIvE,EAAOE,KAAMP,EAAW6U,OAAQrU,EAAQ4V,GAvF9C,SAwFhBC,EAAaF,SAxFG,qBA0FH9V,EAAOK,OA1FJ,kEA0FXqP,EA1FW,QA2FdvP,EAASuP,EAAKvP,OAASyV,EACvBrV,EAAcmP,EAAKnP,YAAcqV,EACjClV,EAAagP,EAAKhP,WAAakV,EAAY,EAC3CpO,EAAcwO,EAEdC,EAAa,IAAI3F,GAAKZ,EAAKnL,GAAImL,EAAKxP,KAAMP,EAAW2Q,KAAMnQ,EAAQ,CACvEoJ,SAAUmG,EAAK3N,KACf2F,SAAUgI,EAAKhI,SAAL,YAAoB9B,IAApB,YAA+B8J,EAAKhI,WAAYF,EAAY9C,OAAOgD,SAC7EV,OAAQ0I,EAAKQ,IAAL,YAAerF,IAAf,YAAwB6E,EAAKQ,MAAO,IAAIrF,IAAM,EAAG,EAAG,GAC5D9E,cAAe2J,EAAK3J,cACpByB,YAAaA,EACbjH,YAAaA,EACb8H,eAAgBqH,EAAKrH,eACrB3H,WAAYA,EACZC,iBAAkB+O,EAAK/O,iBACvBqH,mBAAoB0H,EAAK1H,mBACzBM,UAAWoH,EAAKpH,UAChBE,cAAexI,EAAOwI,gBA5GJ,UA8GdyN,EAAWH,SA9GG,QA+GpB,EAAKxD,OAAO1G,KAAKqK,GAEjBD,EAAatR,OAAO6C,IAAI0O,EAAWvR,QAjHf,iJAoHtB,EAAK4N,OAAO1G,KAAKoK,GACjB,EAAK5D,MAAM7K,IAAIyO,EAAatR,QArHN,gEA2DfmK,EAAc,EA3DC,aA2DEA,EAAcX,EAAQ5N,QA3DxB,0CA2DfuO,GA3De,iBA2DgCA,IA3DhC,uNAvS1B5M,KAAK+L,YAAc,IAAIF,GAAqB7L,KAAKiR,QAAQnR,MAAM+R,WAE/D7R,KAAKmQ,MAAQ,IAAIkE,IACjBrU,KAAKmQ,MAAMmE,YAAa,IAAI1L,KAAQ2L,OAAO,GAE3C,IAAMxR,EAAS,IAAIyR,IACnBxU,KAAK2Q,aAAe5N,EAAO0R,KAAK,CAC9B,2BACA,2BACA,2BACA,2BACA,2BACA,6BAEFzU,KAAKmQ,MAAMmE,WAAatU,KAAK2Q,aAG7B3Q,KAAKkG,OAAS,IAAIwO,IAClB1U,KAAKkG,OAAS,IAAIyO,IAAkB,GAAIC,OAAOC,WAAaD,OAAOE,YAAa,GAAI,MACpF9U,KAAK0Q,sBAAwB,CAAC,EAAsC,EAAnC1Q,KAAK+L,YAAYC,MAAM,GAAG9N,OAA+C,GAAnC8B,KAAK+L,YAAYC,MAAM,GAAG9N,SACjG,EAAA8B,KAAKkG,OAAOT,UAASE,IAArB,oBAA4B3F,KAAK0Q,wBAEjC1Q,KAAKkG,OAAOkN,OAAO,EAAG,EAAG,GAGzBpT,KAAKsQ,SAAW,IAAIyE,IAAc,CAChCC,gBAAiB,mBACjBC,WAAW,IAEbjV,KAAKsQ,SAAS4E,QAAQN,OAAOC,WAAYD,OAAOE,aAChD9U,KAAKsQ,SAAS6E,cAAcP,OAAOQ,kBACnCpV,KAAKsQ,SAAS+E,UAAUC,SAAU,EAClCvM,SAASgK,KAAKwC,YAAYvV,KAAKsQ,SAASkF,YAGxCxV,KAAKuQ,cAAgB,IAAIkF,IAAczV,KAAKkG,OAAQlG,KAAKsQ,SAASkF,YAClExV,KAAKuQ,cAAcmF,eAAgB,EACnC1V,KAAKuQ,cAAcyC,SAGnBhT,KAAKwQ,MAAQ,IAAKmF,IAClB5M,SAASgK,KAAKwC,YAAYvV,KAAKwQ,MAAMoF,KAGrC5V,KAAK4Q,IAAM,IAAIiF,IACf7V,KAAK4Q,IAAI1Q,MAAQ,IAEjBF,KAAK4Q,IAAItL,IAAItF,KAAKsR,eAAgB,WAAWrT,KAAK,YAClD+B,KAAK4Q,IAAItL,IAAItF,KAAKiR,QAAS,QAAQhT,KAAK,QAAQ6X,eAAe9V,KAAKsR,eAAeI,YACnF1R,KAAK4Q,IAAItL,IAAItF,KAAKiR,QAAS,kBAAmB,EAAG,GAAI,IAAKhT,KAAK,yBDpHjE8K,SAASgN,eAAe,W","file":"static/js/main.cb7425c9.chunk.js","sourcesContent":["import {\n  CanvasTexture,\n  Clock,\n  Color,\n  EquirectangularReflectionMapping,\n  Group,\n  Line,\n  LineBasicMaterial,\n  Material,\n  Mesh,\n  MeshBasicMaterial,\n  MeshPhongMaterial,\n  SphereBufferGeometry,\n  TextureLoader,\n  Vector3,\n  BufferGeometry,\n  BufferAttribute,\n  Texture,\n  MathUtils,\n  SpriteMaterial,\n  Sprite,\n  Camera,\n} from \"three\";\n\nimport { NoiseMapGenerator } from \"../utils/NoiseMapGenerator\";\n\nexport enum EntityType {\n  Star,\n  Planet,\n  Moon,\n}\n\ntype TerrainMaps = {\n  heightMap: CanvasRenderingContext2D;\n  map: CanvasRenderingContext2D;\n};\n\nexport type EntityParams = {\n  baseSeed: number[];\n  position: Vector3;\n  orbitEntity: Entity | false;\n  orbitDirection: number;\n  orbitSpeed: number;\n  orbitRadius: number;\n  orbitInclanation: number;\n  orbitStartPosition: number;\n  spinSpeed: number;\n  spinDirection: number;\n\n  terrainHeight?: number;\n  colour?: Color;\n  castShadow?: boolean;\n  receiveShadow?: boolean;\n  texturePath?: string;\n  onShow?: (id: number) => void;\n  hasLabel?: boolean;\n};\n\nexport abstract class Entity {\n  public id: number;\n  public name: string;\n  public entityType: EntityType;\n  public entity: Group;\n  public params: EntityParams;\n  public radius: number;\n  public sphere!: Mesh;\n  public orbit!: Material;\n\n  protected textureWidth: number;\n  protected textureHeight: number;\n  protected abstract maxTerrainHeight: number;\n\n  private loader = new TextureLoader();\n  private sphereGeometry!: SphereBufferGeometry;\n  private orbitGeometry!: BufferGeometry;\n  private material!: Material;\n  private heightMapTexture!: CanvasTexture;\n  private colourMapTexture!: CanvasTexture;\n  private texture!: Texture;\n\n  private labelContext!: CanvasRenderingContext2D;\n  private labelTexture!: Texture;\n  private labelSprite!: Sprite;\n  private labelScaleVector = new Vector3();\n  private labelAspectRatio!: number;\n\n  constructor(id: number, name: string, entityType: EntityType, radius: number, params: EntityParams) {\n    this.id = id;\n    this.name = name;\n    this.entityType = entityType;\n    this.radius = radius;\n    this.params = params;\n\n    this.entity = new Group();\n\n    this.textureWidth = 512;\n    this.textureHeight = 256;\n  }\n\n  public async create() {\n    if (this.params.terrainHeight && this.params.terrainHeight > 0) {\n      const terrainMaps = this.generateTerrainMaps();\n\n      this.heightMapTexture = new CanvasTexture(terrainMaps.heightMap.canvas);\n      this.colourMapTexture = new CanvasTexture(terrainMaps.map.canvas);\n\n      this.heightMapTexture.mapping = EquirectangularReflectionMapping;\n      this.colourMapTexture.mapping = EquirectangularReflectionMapping;\n\n      const terrainHeight = Math.ceil(this.params.terrainHeight * this.maxTerrainHeight);\n\n      this.material = new MeshPhongMaterial({\n        bumpMap: this.heightMapTexture,\n        bumpScale: terrainHeight,\n        map: this.colourMapTexture,\n        displacementMap: this.heightMapTexture,\n        displacementScale: terrainHeight,\n      });\n    } else {\n      if (this.params.texturePath) {\n        this.texture = await this.loader.loadAsync(this.params.texturePath);\n        this.material = new MeshBasicMaterial({ map: this.texture, color: this.params.colour });\n      } else {\n        this.material = new MeshBasicMaterial({\n          color: this.params.colour,\n        });\n      }\n    }\n\n    this.sphereGeometry = new SphereBufferGeometry(this.radius, 64, 48);\n    this.sphere = new Mesh(this.sphereGeometry, this.material);\n\n    this.sphere.castShadow = !!this.params.castShadow;\n    this.sphere.receiveShadow = !!this.params.receiveShadow;\n\n    if (this.params.hasLabel) {\n      this.addLabel();\n    }\n\n    this.entity.add(this.sphere);\n\n    if (this.params.orbitEntity) {\n      const orbitEntityPos = this.params.orbitEntity.sphere.position;\n      const orbitRadius = this.params.orbitRadius || 400;\n\n      // create an orbit cirlce and add it to the entity\n      const orbit = this.createOrbitCircle(orbitRadius);\n      this.entity.add(orbit);\n\n      // position the sphere at the edge of the orbit circle\n      this.sphere.position.set(orbitRadius, 0, 0);\n\n      // position the whole entity at the orbit entity position\n      this.entity.position.set(orbitEntityPos.x, orbitEntityPos.y, orbitEntityPos.z);\n\n      // set orbit inclanation/tilt\n      this.entity.rotation.x = MathUtils.degToRad(this.params.orbitInclanation);\n\n      // set initial orbit position\n      this.entity.rotation.y = MathUtils.degToRad(360 * this.params.orbitStartPosition);\n    }\n\n    return this;\n  }\n\n  public animate(clock: Clock, speed: number, camera: Camera) {\n    clock.getElapsedTime();\n\n    if (this.params.orbitEntity) {\n      // (/60=mins /60=seconds /60=account for framerate)\n      const perSecond = this.params.orbitSpeed / 60 / 60 / 60;\n\n      const orbitSpeed = perSecond * speed;\n      const orbitDirection = this.params.orbitDirection;\n\n      // as our planet/moon is positioned at the edge of our orbit circle\n      // \"orbiting\" is simply a matter of rotating the whole entity :)\n      this.entity.rotation.y += orbitSpeed * orbitDirection;\n    }\n\n    if (this.params.spinSpeed) {\n      const perSecond = this.params.spinSpeed / 60 / 60 / 60;\n      this.sphere.rotation.y += perSecond * speed * this.params.spinDirection;\n    }\n\n    if (this.params.hasLabel) {\n      // keep the label the same size regardless of camera zoom\n      const scaleFactor = 24;\n      const scale = this.labelScaleVector.subVectors(this.sphere.position, camera.position).length() / scaleFactor;\n      this.labelSprite.scale.set(scale, scale * this.labelAspectRatio, 1);\n      this.labelSprite.position.y = this.radius;\n    }\n  }\n\n  public show() {\n    if (this.params.onShow) {\n      this.params.onShow(this.id);\n    }\n  }\n\n  protected abstract _dispose(): void;\n  public dispose() {\n    // geometries\n    this.sphereGeometry?.dispose();\n    this.orbitGeometry?.dispose();\n\n    // materials\n    this.orbit?.dispose();\n    this.material?.dispose();\n\n    // textures\n    this.heightMapTexture?.dispose();\n    this.colourMapTexture?.dispose();\n    this.texture?.dispose();\n    this.labelTexture?.dispose();\n\n    // call implemented dispose method\n    this._dispose();\n  }\n\n  protected generateTerrainMaps(): TerrainMaps {\n    const recordSize = 4;\n\n    const heightMapContext = this.getCanvasContext();\n    const heightMapImageData = heightMapContext.createImageData(this.textureWidth, this.textureHeight);\n    const heightMapData = heightMapImageData.data;\n\n    const colourMapContext = this.getCanvasContext();\n    const colourMapImageData = colourMapContext.createImageData(this.textureWidth, this.textureHeight);\n    const colourMapData = colourMapImageData.data;\n\n    const seed = [...this.params.baseSeed, 99999].reduce((acc, cur) => (acc += cur));\n    const ng = new NoiseMapGenerator(seed);\n    const noiseMap = ng.generateNoiseMap(this.textureWidth, this.textureHeight);\n\n    for (let i = 0; i < heightMapData.length; i += recordSize) {\n      const x = (i / recordSize) % this.textureWidth;\n      const y = ~~(i / recordSize / this.textureWidth);\n\n      const noise = noiseMap[x][y];\n      const generatedColourValue = 255 * noise;\n\n      let colourValue = generatedColourValue;\n\n      // RGBA\n      const heightColour = [colourValue, colourValue, colourValue, 255];\n      for (let ci = 0; ci < heightColour.length; ci++) {\n        heightMapData[i + ci] = heightColour[ci];\n      }\n\n      let mapColour = this.getMapColour(colourValue, y);\n\n      for (let ci = 0; ci < mapColour.length; ci++) {\n        colourMapData[i + ci] = mapColour[ci];\n      }\n    }\n\n    heightMapContext.putImageData(heightMapImageData, 0, 0);\n    colourMapContext.putImageData(colourMapImageData, 0, 0);\n\n    return {\n      heightMap: heightMapContext,\n      map: colourMapContext,\n    };\n  }\n\n  protected abstract getMapColour(height: number, y: number): number[];\n\n  protected getRangeColour(level: { min: number; max: number; dark: number[]; light: number[] }, height: number) {\n    return this.lerpColour(level.dark, level.light, (height - level.min) / (level.max - level.min));\n  }\n\n  protected lerpColour(col1: number[], col2: number[], ratio: number) {\n    const c = this.convertToColor(col1).lerp(this.convertToColor(col2), ratio);\n    return [...c.toArray(), 255];\n  }\n\n  protected convertToColor(colour: number[]) {\n    return new Color().setRGB(colour[0], colour[1], colour[2]);\n  }\n\n  protected getCanvasContext() {\n    const ctx = document.createElement(\"canvas\").getContext(\"2d\") as CanvasRenderingContext2D;\n    ctx.canvas.width = this.textureWidth;\n    ctx.canvas.height = this.textureHeight;\n    ctx.fillStyle = \"#fff\";\n    ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    return ctx;\n  }\n\n  private createOrbitCircle(radius: number) {\n    var segmentCount = 128;\n    this.orbitGeometry = new BufferGeometry();\n    const verts = [];\n    this.orbit = new LineBasicMaterial({ color: 0xffffff, opacity: 0.5, transparent: true });\n\n    for (var i = 0; i <= segmentCount; i++) {\n      var theta = (i / segmentCount) * Math.PI * 2;\n      verts.push(Math.cos(theta) * radius, 0, Math.sin(theta) * radius);\n    }\n    const vertices = new Float32Array(verts);\n    this.orbitGeometry.setAttribute(\"position\", new BufferAttribute(vertices, 3));\n    return new Line(this.orbitGeometry, this.orbit);\n  }\n\n  private addLabel() {\n    this.labelContext = document.createElement(\"canvas\").getContext(\"2d\") as CanvasRenderingContext2D;\n\n    const fontSize = 44;\n    this.labelContext.canvas.width = 384;\n    this.labelContext.canvas.height = 384;\n\n    this.labelContext.font = `${fontSize}pt 'Lucida Grande', sans-serif`;\n    // const textWidth = this.labelContext.measureText(this.name).width;\n\n    // this.labelContext.canvas.width = textWidth;\n    // this.labelContext.canvas.height = fontSize * 1.5;\n\n    this.labelAspectRatio = this.labelContext.canvas.height / this.labelContext.canvas.width;\n    // console.log(this.name, this.labelAspectRatio);\n\n    // this.labelContext.fillStyle = \"rgba(255,0,0,0.2)\";\n    // this.labelContext.fillRect(0, 0, this.labelContext.canvas.width, this.labelContext.canvas.height);\n\n    this.labelContext.fillStyle = \"white\";\n    this.labelContext.textAlign = \"center\";\n    this.labelContext.fillText(this.name, this.labelContext.canvas.width / 2, fontSize + 1);\n\n    this.labelTexture = new Texture(this.labelContext.canvas);\n    this.labelTexture.needsUpdate = true;\n    const spriteMaterial = new SpriteMaterial({\n      map: this.labelTexture,\n      transparent: true,\n    });\n    this.labelSprite = new Sprite(spriteMaterial);\n    // this.labelSprite.position.y = this.radius * 0.4;\n\n    this.sphere.add(this.labelSprite);\n  }\n}\n","import React from \"react\";\n\nimport \"./LoadingIndicator.css\";\n\ntype Props = {\n  show?: boolean;\n};\n\nexport const LoadingIndicator: React.FC<Props> = ({ show }) => {\n  return show ? <div className=\"loading-indicator\">Generating Solar System...</div> : null;\n};\n","import { SolarSystemEntity } from \"../../app/models/SolarSystem\";\nimport \"./PlanetDataSheet.css\";\n\ntype Props = {\n  planet?: SolarSystemEntity;\n};\n\nexport const PlanetDataSheet: React.FC<Props> = ({ planet }) => {\n  if (!planet) {\n    return null;\n  }\n\n  const properties = [\n    [\"Name\", planet.name],\n    [\"Diameter (km)\", (planet.radius * 2).toLocaleString()],\n    [\"Moons\", planet.moons.length],\n    [\"Orbit Distance (km)\", planet.orbitRadius.toLocaleString()],\n    [\"Orbital Speed (km/h)\", Math.floor(planet.orbitSpeed).toLocaleString()],\n    [\"Orbital Inclanation (°)\", planet.orbitInclanation],\n  ];\n\n  return (\n    <div className=\"planet-datasheet\">\n      <h2>Planet Info</h2>\n\n      <ul className=\"planet-datasheet__property-list\">\n        {properties.map((prop) => (\n          <li key={prop[0]} className=\"planet-datasheet__property\">\n            <strong>{prop[0]}</strong>\n            <p>{prop[1]}</p>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { LoadingIndicator } from \"../LoadingIndicator/LoadingIndicator\";\nimport { SolarSystemApp } from \"../../app/SolarSystemApp\";\nimport { PlanetDataSheet } from \"../PlanetDataSheet/PlanetDataSheet\";\nimport { SolarSystemEntity } from \"../../app/models/SolarSystem\";\n\ntype Props = {\n  solarSystemApp: SolarSystemApp;\n};\n\nexport const App: React.FC<Props> = ({ solarSystemApp }) => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [selectedPlanet, setSelectedPlanet] = useState<SolarSystemEntity | undefined>(undefined);\n\n  useEffect(() => {\n    solarSystemApp.init();\n    solarSystemApp.onInitialising = handleInitialising;\n    solarSystemApp.onInitialised = handleInitialised;\n    solarSystemApp.onSelectPlanet = handleSelectPlanet;\n  }, [solarSystemApp]);\n\n  const handleInitialising = () => {\n    setIsLoading(true);\n  };\n\n  const handleInitialised = () => {\n    setIsLoading(false);\n  };\n\n  const handleSelectPlanet = (planet?: SolarSystemEntity) => {\n    setSelectedPlanet(planet);\n  };\n\n  return (\n    <>\n      <LoadingIndicator show={isLoading} />\n      <PlanetDataSheet planet={selectedPlanet}></PlanetDataSheet>\n    </>\n  );\n};\n","import SimplexNoise from \"simplex-noise\";\nimport { MathUtils } from \"three\";\n\nexport class NoiseMapGenerator {\n  private noiseGenerator: SimplexNoise;\n\n  constructor(seed?: number) {\n    this.noiseGenerator = new SimplexNoise(seed);\n  }\n\n  public generateNoiseMap(width: number, height: number): number[][] {\n    const map: number[][] = [];\n\n    for (let x = 0; x < width; x++) {\n      map[x] = [];\n      for (let y = 0; y < height; y++) {\n        // add noise at various frequencies\n        let noise = this.getMixedFrequencyNoise(\n          x,\n          y,\n          [0.01, 0.02, 0.04, 0.08, 0.16, 0.32, 0.64, 1.28]\n        );\n        noise = Math.pow(noise, 2.3);\n\n        map[x][y] = noise;\n      }\n    }\n\n    this.makeSeamlessVertically(map, height * 0.2);\n    this.makeSeamlessHorizontally(map, width * 0.05);\n\n    return map;\n  }\n\n  private getNoise(\n    x: number,\n    y: number,\n    frequency: number,\n    xOffset: number = 0,\n    yOffset: number = 0\n  ) {\n    const _x = frequency * x + xOffset;\n    const _y = frequency * y + yOffset;\n    const amplitude = 1 / frequency;\n\n    // get noise in the range 0-1\n    const n = this.noiseGenerator.noise2D(_x, _y) / 2 + 0.5;\n\n    let noise = amplitude * n;\n    return noise;\n  }\n\n  private getMixedFrequencyNoise(x: number, y: number, frequencies: number[]) {\n    let sumOfAmplitudes = 0;\n    const noise = frequencies.reduce(\n      (previous: number, frequency: number, index: number) => {\n        sumOfAmplitudes += 1 / frequency;\n\n        // add offsets so different frequencies (octaves)\n        // sample from a different part of the noise space\n        const xOffset = index * 10;\n        const yOffset = index * 100;\n        return previous + this.getNoise(x, y, frequency, xOffset, yOffset);\n      },\n      0\n    );\n    return noise / sumOfAmplitudes;\n  }\n\n  // ported from here:\n  // https://medium.com/nerd-for-tech/making-a-seamless-perlin-noise-in-c-4cfc12a90f93\n  private makeSeamlessHorizontally(noiseMap: number[][], stitchWidth: number) {\n    const width = noiseMap.length;\n    const height = noiseMap[0].length;\n\n    // iterate on the stitch band (on the left\n    // of the noise)\n    for (let x = 0; x < stitchWidth; x++) {\n      // get the transparency value from\n      // a linear gradient\n      const v = x / stitchWidth;\n\n      for (let y = 0; y < height; y++) {\n        // compute the \"mirrored x position\":\n        // the far left is copied on the right\n        // and the far right on the left\n        const o = ~~(width - stitchWidth + x);\n        // copy the value on the right of the noise\n        noiseMap[o][y] = MathUtils.lerp(\n          noiseMap[o][y],\n          noiseMap[~~(stitchWidth - x)][y],\n          v\n        );\n      }\n    }\n  }\n\n  // ported from here:\n  // https://medium.com/nerd-for-tech/making-a-seamless-perlin-noise-in-c-4cfc12a90f93\n  private makeSeamlessVertically(noiseMap: number[][], stitchHeight: number) {\n    const width = noiseMap.length;\n    const height = noiseMap[0].length;\n\n    // iterate through the stitch band (both\n    // top and bottom sides are treated\n    // simultaneously because its mirrored)\n    for (let y = 0; y < stitchHeight; y++) {\n      // number of neighbour pixels to\n      // consider for the average (= kernel size)\n      const k = Math.ceil(stitchHeight - y);\n      // go through the entire row\n      for (let x = 0; x < width; x++) {\n        // compute the sum of pixel values\n        // in the top and the bottom bands\n        let s1 = 0.0;\n        let s2 = 0.0;\n        let c = 0;\n        for (let o = x - k; o < x + k; o++) {\n          if (o < 0 || o >= width) {\n            continue;\n          }\n\n          s1 += noiseMap[o][y];\n          s2 += noiseMap[o][height - y - 1];\n          c++;\n        }\n        // compute the means and assign them to\n        // the pixels in the top and the bottom\n        // rows\n        noiseMap[x][y] = s1 / c;\n        noiseMap[x][height - y - 1] = s2 / c;\n      }\n    }\n  }\n}\n","// https://www.imagineforest.com/blog/planet-name-generator/\nexport const planetNames = [\n  \"Acanthis\",\n  \"Achelous\",\n  \"Acheron\",\n  \"Achilles\",\n  \"Achilles\",\n  \"Achlys\",\n  \"Actaeon\",\n  \"Admetus\",\n  \"Adoni\",\n  \"Aeacus\",\n  \"Aëdon\",\n  \"Aeëtes\",\n  \"Aegisthus\",\n  \"Aegyptus\",\n  \"Aella\",\n  \"Aello\",\n  \"Aeneas\",\n  \"Aeolus\",\n  \"Aeternae\",\n  \"Aethon\",\n  \"Agamemnon\",\n  \"Aglaia\",\n  \"Agreus\",\n  \"Agriopas\",\n  \"Agrius\",\n  \"Ajax\",\n  \"Alcestis\",\n  \"Alcyone\",\n  \"Alcyoneus\",\n  \"Alecto\",\n  \"Alectryon\",\n  \"Alkyonides\",\n  \"Almops\",\n  \"Aloadae\",\n  \"Althaea\",\n  \"Amazon\",\n  \"Amazons\",\n  \"Ampelos\",\n  \"Amphion\",\n  \"Amphisbaena\",\n  \"Amphithemis\",\n  \"Amphitrite\",\n  \"Amphitryon\",\n  \"Amycus\",\n  \"Anchises\",\n  \"Andromache\",\n  \"Andromeda\",\n  \"Anteros\",\n  \"Antigone\",\n  \"Antinoüs\",\n  \"Antiphates\",\n  \"Aphrodit\",\n  \"Aphrodite\",\n  \"Apollo\",\n  \"Aquilo\",\n  \"Arachne\",\n  \"Arae\",\n  \"Ares\",\n  \"Arges\",\n  \"Argo\",\n  \"Argos\",\n  \"Argus\",\n  \"Argus\",\n  \"Ariadne\",\n  \"Arion\",\n  \"Arion\",\n  \"Artemi\",\n  \"Artemis\",\n  \"Asbolus\",\n  \"Ascalaphus\",\n  \"Asclepiu\",\n  \"Asclepius\",\n  \"Astarte\",\n  \"Asterius\",\n  \"Astraea\",\n  \"Atalanta\",\n  \"Atalanta\",\n  \"Athen\",\n  \"Athena\",\n  \"Athos\",\n  \"Atlas\",\n  \"Atreus\",\n  \"Atropos\",\n  \"Aurora\",\n  \"Auster\",\n  \"Autonous\",\n  \"Avernus\",\n  \"Bacchus\",\n  \"Balius\",\n  \"Bellerophon\",\n  \"Bellona\",\n  \"Bienor\",\n  \"Boreas\",\n  \"Briareus\",\n  \"Cadmus\",\n  \"Calliope\",\n  \"Calypso\",\n  \"Carduelis\",\n  \"Cassandra\",\n  \"Castor\",\n  \"Catoblepas\",\n  \"Celaeno\",\n  \"Centaur\",\n  \"Centauride\",\n  \"Centauromachy\",\n  \"Centaurs\",\n  \"Centaurus\",\n  \"Cephalus\",\n  \"Cepheus\",\n  \"Ceramici\",\n  \"Cerastes\",\n  \"Cerberus\",\n  \"Cercopes\",\n  \"Ceres\",\n  \"Cetus\",\n  \"Ceuthonymus\",\n  \"Ceyx\",\n  \"Chaos\",\n  \"Charon\",\n  \"Charybdis\",\n  \"Chimera\",\n  \"Chiron\",\n  \"Chiron\",\n  \"Chryseis\",\n  \"Chthonius\",\n  \"Circe\",\n  \"Clio\",\n  \"Clotho\",\n  \"Clytemnestra\",\n  \"Cornix\",\n  \"Coronis\",\n  \"Corvus\",\n  \"Crocotta\",\n  \"Crommyon\",\n  \"Cronu\",\n  \"Cronus\",\n  \"Cyclopes\",\n  \"Cycnus\",\n  \"Cyllarus\",\n  \"Cyprus\",\n  \"Daedalus\",\n  \"Daemons\",\n  \"Damarchus\",\n  \"Damysus\",\n  \"Danae\",\n  \"Danaïdes\",\n  \"Danaüs\",\n  \"Daphne\",\n  \"Demete\",\n  \"Dictys\",\n  \"Dido\",\n  \"Diomedes\",\n  \"Dione\",\n  \"Dionysu\",\n  \"Dionysus\",\n  \"Dioscuri\",\n  \"Dryad\",\n  \"Dryads\",\n  \"Echion\",\n  \"Echo\",\n  \"Eidolon\",\n  \"Elatus\",\n  \"Electra\",\n  \"Empousa\",\n  \"Empusa\",\n  \"Enceladus\",\n  \"Endymion\",\n  \"Enyo\",\n  \"Eo\",\n  \"Eos\",\n  \"Erato\",\n  \"Erebus\",\n  \"Eridanos\",\n  \"Erigone\",\n  \"Erinyes\",\n  \"Eris\",\n  \"Ero\",\n  \"Eros\",\n  \"Eteocles\",\n  \"Euphrosyne\",\n  \"Europa\",\n  \"Eurus\",\n  \"Euryale\",\n  \"Eurydice\",\n  \"Eurynomos\",\n  \"Eurystheus\",\n  \"Eurytion\",\n  \"Eurytus\",\n  \"Euterpe\",\n  \"Fates\",\n  \"Fauns\",\n  \"Faunus\",\n  \"Favonius\",\n  \"Flora\",\n  \"Fortuna\",\n  \"Furie\",\n  \"Furies\",\n  \"Gadflies\",\n  \"Gaea\",\n  \"Gaia\",\n  \"Galatea\",\n  \"Ganymede\",\n  \"Gegenees\",\n  \"Gello\",\n  \"Gerana\",\n  \"Geryon\",\n  \"giant\",\n  \"Giantess\",\n  \"Gigantes\",\n  \"Golden Fleece\",\n  \"Gorgons\",\n  \"Graces\",\n  \"Graeae\",\n  \"Graeae\",\n  \"Griffin\",\n  \"Hade\",\n  \"Hades\",\n  \"Hades\",\n  \"halcyons\",\n  \"Hamadryads\",\n  \"Harpies\",\n  \"Heb\",\n  \"Hecate\",\n  \"Hecate\",\n  \"Hecatonchires\",\n  \"Hector\",\n  \"Hecuba\",\n  \"Helen\",\n  \"Helio\",\n  \"Helios\",\n  \"Helle\",\n  \"Hellhound\",\n  \"Hephaestu\",\n  \"Hephaestus\",\n  \"Hera\",\n  \"Hera\",\n  \"Heracles\",\n  \"Hercules\",\n  \"Herme\",\n  \"Hero\",\n  \"heroes\",\n  \"Hesperus\",\n  \"Hesti\",\n  \"Hestia\",\n  \"Hieracosphinx\",\n  \"Hippalectryon\",\n  \"Hippocampus\",\n  \"Hippodamia\",\n  \"Hippolyte\",\n  \"Hippolytus\",\n  \"Hippomenes\",\n  \"Hoopoe\",\n  \"Hyacinthus\",\n  \"Hydra\",\n  \"Hylaeus\",\n  \"Hylonome\",\n  \"Hyperion\",\n  \"Hypno\",\n  \"Hypnos\",\n  \"Iapetus\",\n  \"Icarus\",\n  \"Ichthyocentaurs\",\n  \"Io\",\n  \"Iobates\",\n  \"Ionia\",\n  \"Iphigenia\",\n  \"Ipotane\",\n  \"Iris\",\n  \"Ismene\",\n  \"Ixion\",\n  \"Janus\",\n  \"Jocasta\",\n  \"Juno\",\n  \"Jupiter\",\n  \"Juventas\",\n  \"Keres\",\n  \"Kobaloi\",\n  \"Labour\",\n  \"Ladon\",\n  \"Laelaps\",\n  \"Laestrygonians\",\n  \"Laius\",\n  \"Lamia\",\n  \"Lamiai\",\n  \"Lamos\",\n  \"Laocoön\",\n  \"Lapiths\",\n  \"Lares\",\n  \"Lark\",\n  \"Latona\",\n  \"Lavinia\",\n  \"Leda\",\n  \"Lerna\",\n  \"Lernaean Hydra\",\n  \"Let\",\n  \"Lethe\",\n  \"Leto\",\n  \"Lycaon\",\n  \"Lykaia\",\n  \"Maera\",\n  \"Maia\",\n  \"Manes\",\n  \"Manticore\",\n  \"Marsyas\",\n  \"Medea\",\n  \"Medea\",\n  \"Medusa\",\n  \"Megaera\",\n  \"Meleager\",\n  \"Melpomene\",\n  \"Memnon\",\n  \"Menelaus\",\n  \"Menoetes\",\n  \"Menoetius\",\n  \"Mentor\",\n  \"Merope\",\n  \"Midas\",\n  \"Mimas\",\n  \"Minerva\",\n  \"Minos\",\n  \"Minotaur\",\n  \"Mnemosyne\",\n  \"Momus\",\n  \"Monocerata\",\n  \"Mormo\",\n  \"Mormolykeia\",\n  \"Morpheus\",\n  \"Mors\",\n  \"Muse\",\n  \"Muses\",\n  \"Myrmekes\",\n  \"Mysia\",\n  \"Naiads\",\n  \"Napaeae\",\n  \"Narcissus\",\n  \"Nemea\",\n  \"Nemesis\",\n  \"Neoptolemus\",\n  \"nereid\",\n  \"Nessus\",\n  \"Nestor\",\n  \"Nestor\",\n  \"Nike\",\n  \"Niobe\",\n  \"Nomios\",\n  \"Notus\",\n  \"Ny\",\n  \"Nyctimene\",\n  \"Nyctimus\",\n  \"Nymphs\",\n  \"Nyx\",\n  \"Oceanids\",\n  \"Oceanu\",\n  \"Oceanus\",\n  \"Ocypete\",\n  \"Odontotyrannos\",\n  \"Odysseu\",\n  \"Odysseus\",\n  \"Oedipus\",\n  \"Oenoe\",\n  \"Oenone\",\n  \"Onocentaur\",\n  \"Ophiotaurus\",\n  \"Ops\",\n  \"Orestes\",\n  \"Orion\",\n  \"Orpheus\",\n  \"Orthrus\",\n  \"Ouroboros\",\n  \"Pa\",\n  \"Pallas\",\n  \"Pan\",\n  \"Pan\",\n  \"Pandora\",\n  \"Panes\",\n  \"panthers\",\n  \"Parcae\",\n  \"Paris\",\n  \"Parrhasia\",\n  \"Pasiphaë\",\n  \"Patroclus\",\n  \"Pegasus\",\n  \"Pegasus\",\n  \"Pelias\",\n  \"Pelops\",\n  \"Penates\",\n  \"Penelope\",\n  \"Periboea\",\n  \"Perimedes\",\n  \"Persephon\",\n  \"Persephone \",\n  \"Perseus\",\n  \"Phaedra\",\n  \"Phaethon\",\n  \"Phaethon\",\n  \"Philoctetes\",\n  \"Philomela\",\n  \"Phineus\",\n  \"Phlegethon\",\n  \"Phoenix\",\n  \"Phólos\",\n  \"Pirithous\",\n  \"Pleiades\",\n  \"Plut\",\n  \"Pollux\",\n  \"Polybotes\",\n  \"Polyhymnia\",\n  \"Polymnia\",\n  \"Polynices\",\n  \"Polyphemus\",\n  \"Polyphemus\",\n  \"Polyxena\",\n  \"Pontus\",\n  \"Porphyrion\",\n  \"Poseido\",\n  \"Poseidon\",\n  \"Priam\",\n  \"Priapus\",\n  \"Procne\",\n  \"Procrustes\",\n  \"Prometheus\",\n  \"Proserpine\",\n  \"Proteus\",\n  \"Psyche\",\n  \"Pygmalion\",\n  \"Pyramus\",\n  \"Python\",\n  \"Quirinus\",\n  \"Rhadamanthus\",\n  \"Rhaecus\",\n  \"Rhe\",\n  \"Rhea\",\n  \"Romulus\",\n  \"Sarpedon\",\n  \"Saturn\",\n  \"Satyresses\",\n  \"Satyrs\",\n  \"Scylla\",\n  \"Selene\",\n  \"Semele\",\n  \"Sileni\",\n  \"Silenus\",\n  \"Silvanus\",\n  \"Siren\",\n  \"Sirens\",\n  \"Sisyphus\",\n  \"Sol\",\n  \"Somnus\",\n  \"Sphinx\",\n  \"Sterop\",\n  \"Stheno\",\n  \"Strix\",\n  \"Styx\",\n  \"Symplegades\",\n  \"Syrinx\",\n  \"Talos\",\n  \"Tantalus\",\n  \"Taras\",\n  \"Taraxippi\",\n  \"Tartarus\",\n  \"Telemachus\",\n  \"Tellus\",\n  \"Tereus\",\n  \"Terminus\",\n  \"Terpsichore\",\n  \"Thalia\",\n  \"Thanato\",\n  \"Thanatos\",\n  \"Thaumas\",\n  \"Themis\",\n  \"Theseus\",\n  \"Thisbe\",\n  \"Thoon\",\n  \"Thrace\",\n  \"Thyestes\",\n  \"Tiresias\",\n  \"Tisiphone\",\n  \"Titans\",\n  \"Tithonus\",\n  \"Tityos\",\n  \"Triton\",\n  \"Trojan\",\n  \"Turnus\",\n  \"Typhon\",\n  \"Ulysses\",\n  \"Urania\",\n  \"Uranus\",\n  \"Venus\",\n  \"Vesta\",\n  \"Virgil\",\n  \"Vulcan\",\n  \"Xanthus\",\n  \"Zephyrus\",\n  \"Zeu\",\n  \"Zeus\",\n];\n","import mt19937 from \"@stdlib/random-base-mt19937\";\n\nconst MAX = 4294967295;\n\nexport class Random {\n  public static getRandom(seed: number[]) {\n    var rand = mt19937.factory({\n      seed: seed,\n    });\n\n    return rand() / MAX;\n  }\n\n  public static getRandomInt(min: number, max: number, seed: number[]) {\n    return Math.floor(Random.getRandom(seed) * (max - min + 1) + min);\n  }\n\n  public static getRandomFloat(min: number, max: number, seed: number[]) {\n    return Random.getRandom(seed) * (max - min) + min;\n  }\n\n  public static coinToss(seed: number[]) {\n    return Random.getRandom(seed) <= 0.5;\n  }\n\n  public static getRandomFromArray(array: any[], seed: number[]) {\n    const index = this.getRandomInt(0, array.length - 1, seed);\n    return array[index];\n  }\n\n  /**\n   * Gets a random point of a sphere, evenly distributed over the sphere.\n   * The sphere is centered at (x0,y0,z0) with the passed in radius.\n   * The returned point is returned as a three element array [x,y,z].\n   *\n   * @return [x,y,z]\n   */\n  public static getRandomPointInSphere(radius: number, x0: number, y0: number, z0: number) {\n    if (!x0) {\n      x0 = 0;\n    }\n    if (!y0) {\n      y0 = 0;\n    }\n    if (!z0) {\n      z0 = 0;\n    }\n\n    var u = Math.random();\n    var v = Math.random();\n    var theta = 2 * Math.PI * u;\n    var phi = Math.acos(1 - 2 * v);\n    var x = x0 + radius * Math.sin(phi) * Math.cos(theta);\n    var y = y0 + radius * Math.sin(phi) * Math.sin(theta);\n    var z = z0 + radius * Math.cos(phi);\n\n    return [x, y, z];\n  }\n}\n","import { SolarSystem, SolarSystemEntity } from \"../models/SolarSystem\";\nimport { planetNames } from \"./planetNames\";\nimport { Random } from \"./Random\";\n\n// some real values from our own solar system to work from\n// distance in km, speeds in km/h\nconst solarSystemValues = {\n  solRadius: 695508,\n\n  earthOrbitSpeed: 110000,\n\n  minPlanetRadius: 2440, // mercury\n  maxPlanetRadius: 69911, // jupiter\n\n  minPlanetOrbitRadius: 59223859, // mercury\n  maxPlanetOrbitRadius: 4498438348, // neptune\n\n  maxPlanetOrbitSpeed: 172331, //mercury\n\n  minMoonOrbitRadius: 384400, // luna\n  maxMoonOrbitRadius: 1882709, // callisto\n\n  maxMoonOrbitSpeed: 62400, // io\n\n  // todo: gas planets spin fast than solid ones, factor this in when\n  // more planet types added\n  minPlanetSpinSpeed: 6.52, // venus\n  maxPlanetSpinSpeed: 45583, //jupiter\n\n  minDistanceBetweenPlanets: 41400000, //earth->venus\n};\n\nconst seedIndexes = {\n  radius: 0,\n  terrainHeight: 1,\n  colour: 2,\n  noiseMap: 3,\n  orbitDirection: 4,\n  orbitSpeed: 5,\n  spinSpeed: 6,\n  numberOfPlanets: 7,\n  orbitRadius: 8,\n  orbitInclanation: 9,\n  spinDirection: 10,\n  orbitStartPosition: 11,\n  planetName: 12,\n};\n\nexport class SolarSystemGenerator {\n  private entityId = 0;\n  private seed: number;\n\n  private solarSystem: SolarSystem = {\n    stars: [],\n    planets: [],\n  };\n\n  constructor(seed: number) {\n    this.seed = seed;\n  }\n\n  private getNextId(): number {\n    this.entityId++;\n    return this.entityId;\n  }\n\n  public generate(starRadius: number = 695508): SolarSystem {\n    const stars: SolarSystemEntity[] = [\n      {\n        id: this.getNextId(),\n        name: `Star ${this.entityId}`,\n        seed: [this.seed, 0],\n        position: [0, 0, 0],\n        radius: starRadius,\n        terrainHeight: 0,\n        moons: [],\n        orbitEntityId: 0,\n        orbitRadius: 0,\n        orbitSpeed: 0,\n        orbitDirection: 0,\n        orbitInclanation: 0,\n        orbitStartPosition: 0,\n        spinSpeed: Random.getRandomFloat(0.0001, 0.0003, [...[this.seed, 0], seedIndexes.spinSpeed]),\n        spinDirection: Random.coinToss([...[this.seed, 0], seedIndexes.spinDirection]) ? 1 : -1,\n      },\n    ];\n\n    for (let starIndex = 0; starIndex < stars.length; starIndex++) {\n      const star = stars[starIndex];\n      const baseSeed = [this.seed, starIndex];\n\n      const numberOfPlanets = Random.getRandomInt(1, 9, [...baseSeed, seedIndexes.numberOfPlanets]);\n\n      // generate random planet orbit radiuses\n      const planetOrbitRadiuses = this.createPlanetOrbitRadiuses(numberOfPlanets, baseSeed);\n\n      for (let planetIndex = 0; planetIndex < numberOfPlanets; planetIndex++) {\n        const baseSeed = [this.seed, starIndex, planetIndex];\n\n        const planetRadius = Random.getRandomInt(\n          solarSystemValues.minPlanetRadius,\n          solarSystemValues.maxPlanetRadius * 2,\n          [...baseSeed, seedIndexes.radius]\n        );\n\n        const planet = this.createPlanet(\n          planetIndex,\n          baseSeed,\n          planetRadius,\n          numberOfPlanets,\n          planetOrbitRadiuses[planetIndex],\n          star\n        );\n\n        // create the moons for the planet\n        const numberOfMoons = Random.getRandomInt(1, 10, [...baseSeed, seedIndexes.numberOfPlanets]);\n\n        // generate random moon orbit radiuses\n        const moonOrbitRadiuses = new Array(numberOfMoons)\n          .fill(null)\n          .map((item, index) =>\n            Random.getRandomInt(solarSystemValues.minMoonOrbitRadius, solarSystemValues.maxMoonOrbitRadius, [\n              ...baseSeed,\n              seedIndexes.orbitRadius,\n              index,\n            ])\n          )\n          .sort((a, b) => a - b);\n\n        for (let moonIndex = 0; moonIndex < numberOfMoons; moonIndex++) {\n          const baseSeed = [this.seed, starIndex, planetIndex, moonIndex];\n\n          const moonRadius = Random.getRandomInt(planetRadius / 12, planetRadius / 3, [\n            ...baseSeed,\n            seedIndexes.radius,\n          ]);\n\n          const moon = this.createMoon(moonIndex, baseSeed, moonRadius, moonOrbitRadiuses[moonIndex], numberOfMoons);\n          planet.moons.push(moon);\n        }\n        // Calculate orbit speeds based on distance from planet\n        for (const moon of planet.moons) {\n          const distanceFromPlanet = moon.orbitRadius;\n          const furthestMoonOrbitRadius = planet.moons[planet.moons.length - 1].orbitRadius;\n          const ratio = 1.5 - distanceFromPlanet / furthestMoonOrbitRadius;\n          moon.orbitSpeed = ratio * solarSystemValues.maxMoonOrbitSpeed;\n        }\n\n        this.solarSystem.planets.push(planet);\n      }\n\n      // Calculate orbit speeds based on distance from star\n      for (const planet of this.solarSystem.planets) {\n        const distanceFromStar = planet.orbitRadius;\n        const furthestPlanetOrbitRadius = this.solarSystem.planets[this.solarSystem.planets.length - 1].orbitRadius;\n        const ratio = 1.5 - distanceFromStar / furthestPlanetOrbitRadius;\n        planet.orbitSpeed = ratio * solarSystemValues.maxPlanetOrbitSpeed;\n      }\n\n      this.solarSystem.stars.push(star);\n    }\n\n    return this.solarSystem;\n  }\n\n  private createPlanetOrbitRadiuses(numberOfPlanets: number, baseSeed: number[]) {\n    const planetOrbitRadiuses = new Array(numberOfPlanets)\n      .fill(null)\n      .map((item, index) =>\n        Random.getRandomInt(solarSystemValues.minPlanetOrbitRadius, solarSystemValues.maxPlanetOrbitRadius, [\n          ...baseSeed,\n          seedIndexes.orbitRadius,\n          index,\n        ])\n      )\n      .sort((a, b) => a - b);\n\n    // Ensure a min distance between planets\n    for (let i = 0; i < planetOrbitRadiuses.length - 1; i++) {\n      const po1 = planetOrbitRadiuses[i];\n      const po2 = planetOrbitRadiuses[i + 1];\n\n      const distanceBetween = po2 - po1;\n\n      if (distanceBetween < solarSystemValues.minDistanceBetweenPlanets) {\n        // if the distance is too small, push all outer planets away by the difference and carry on the loop\n        for (let index = i + 1; index < planetOrbitRadiuses.length; index++) {\n          planetOrbitRadiuses[index] += solarSystemValues.minDistanceBetweenPlanets - distanceBetween;\n        }\n      }\n    }\n\n    return planetOrbitRadiuses;\n  }\n\n  private createMoon(index: number, baseSeed: number[], radius: number, orbitRadius: number, numberOfMoons: number) {\n    const randomOrbitDirection = Random.coinToss([...baseSeed, seedIndexes.orbitDirection]) ? 1 : -1;\n\n    const randomSpinSpeed = Random.getRandomFloat(0.001, 0.005, [...baseSeed, seedIndexes.spinSpeed]);\n\n    const moon: SolarSystemEntity = {\n      id: this.getNextId(),\n      name: `Moon ${index + 1}`,\n      seed: baseSeed,\n      radius: radius,\n      terrainHeight: Random.getRandom([...baseSeed, seedIndexes.terrainHeight]),\n      orbitEntityId: -1,\n      orbitRadius: orbitRadius,\n      orbitDirection: randomOrbitDirection,\n      orbitSpeed: (numberOfMoons - index) / numberOfMoons,\n      orbitInclanation: Random.getRandomInt(0, 45, [...baseSeed, seedIndexes.orbitInclanation]),\n      orbitStartPosition: Random.getRandom([...baseSeed, seedIndexes.orbitStartPosition]),\n      spinSpeed: randomSpinSpeed,\n      spinDirection: Random.coinToss([...baseSeed, seedIndexes.spinDirection]) ? 1 : -1,\n      rgb: getRandomRgb([...baseSeed, seedIndexes.colour]),\n      moons: [],\n    };\n\n    return moon;\n  }\n\n  private createPlanet(\n    index: number,\n    baseSeed: number[],\n    radius: number,\n    numberOfPlanets: number,\n    orbitRadius: number,\n    star: SolarSystemEntity\n  ) {\n    const randomOrbitDirection = Random.coinToss([...baseSeed, seedIndexes.orbitDirection]) ? 1 : -1;\n    const randomSpinSpeed = Random.getRandomFloat(0.002, 0.006, [...baseSeed, seedIndexes.spinSpeed]);\n    const planetName = Random.getRandomFromArray(planetNames, [...baseSeed, seedIndexes.planetName]);\n\n    // create the planet\n    const planet: SolarSystemEntity = {\n      id: this.getNextId(),\n      name: planetName,\n      seed: baseSeed,\n      radius: radius,\n      terrainHeight: 1,\n      orbitEntityId: star.id,\n      orbitRadius: orbitRadius,\n      orbitDirection: randomOrbitDirection,\n      orbitSpeed: (numberOfPlanets - index) / numberOfPlanets,\n      orbitInclanation: Random.getRandomInt(0, 15, [...baseSeed, seedIndexes.orbitInclanation]),\n      orbitStartPosition: Random.getRandom([...baseSeed, seedIndexes.orbitStartPosition]),\n      spinSpeed: randomSpinSpeed,\n      spinDirection: Random.coinToss([...baseSeed, seedIndexes.spinDirection]) ? 1 : -1,\n      moons: [],\n    };\n\n    return planet;\n  }\n}\n\nconst getRandomRgb = (seed: number[]): [number, number, number] => {\n  return [\n    Random.getRandomFloat(0.6, 1, [...seed, 0]),\n    Random.getRandomFloat(0.6, 1, [...seed, 1]),\n    Random.getRandomFloat(0.6, 1, [...seed, 2]),\n  ];\n};\n","import { Entity } from \"./Entity\";\n\nexport class Moon extends Entity {\n  protected maxTerrainHeight = 5;\n\n  protected _dispose(): void {}\n\n  protected getMapColour(height: number, y: number): number[] {\n    const ratio = height / 64;\n\n    const { r, g, b } = this.params.colour!;\n\n    const rgba = [Math.floor(r * 255), Math.floor(g * 255), Math.floor(b * 255), 255];\n\n    return [rgba[0] * ratio, rgba[1] * ratio, rgba[2] * ratio, rgba[3]];\n  }\n}\n","import { Random } from \"../utils/Random\";\nimport { Entity } from \"./Entity\";\n\nexport class ClassM extends Entity {\n  protected maxTerrainHeight = this.radius / 16;\n\n  protected _dispose(): void {}\n\n  private colours = {\n    oceanDark: this.getRandomColour(0),\n    oceanLight: this.getRandomColour(1),\n    beachDark: this.getRandomColour(2),\n    beachLight: this.getRandomColour(3),\n    forestDark: this.getRandomColour(4),\n    forestLight: this.getRandomColour(5),\n    jungleDark: this.getRandomColour(6),\n    jungleLight: this.getRandomColour(7),\n    savannahDark: this.getRandomColour(8),\n    savannahLight: this.getRandomColour(9),\n    desertDark: this.getRandomColour(10),\n    desertLight: this.getRandomColour(11),\n    snowDark: this.getRandomColour(12),\n    snowLight: this.getRandomColour(13),\n  };\n\n  protected getMapColour(height: number, y: number) {\n    const colour = this.getColourForHeight(height);\n    return colour;\n  }\n\n  private getColourForHeight(height: number) {\n    const levels = [\n      // sea\n      {\n        min: 0,\n        max: 60,\n        dark: this.colours.oceanDark,\n        light: this.colours.oceanLight,\n      },\n      // beach\n      {\n        min: 60,\n        max: 70,\n        dark: this.colours.oceanLight,\n        light: this.colours.beachLight,\n      },\n      // forest\n      {\n        min: 70,\n        max: 110,\n        dark: this.colours.forestDark,\n        light: this.colours.forestLight,\n      },\n      // jungle\n      {\n        min: 110,\n        max: 120,\n        dark: this.colours.jungleDark,\n        light: this.colours.jungleLight,\n      },\n      // savannah\n      {\n        min: 120,\n        max: 140,\n        dark: this.colours.savannahDark,\n        light: this.colours.savannahLight,\n      },\n      // desert\n      {\n        min: 120,\n        max: 150,\n        dark: this.colours.desertDark,\n        light: this.colours.desertLight,\n      },\n    ];\n\n    for (const level of levels) {\n      if (height < level.max) {\n        return this.getRangeColour(level, height);\n      }\n    }\n\n    return this.colours.snowLight;\n  }\n\n  private getRandomColour(colIndex: number) {\n    const seed = [...this.params.baseSeed, colIndex];\n\n    const min = 0.2;\n    return [\n      255 * Random.getRandomFloat(min, 1, [...seed, 0]),\n      255 * Random.getRandomFloat(min, 1, [...seed, 1]),\n      255 * Random.getRandomFloat(min, 1, [...seed, 2]),\n      255,\n    ];\n  }\n}\n","import { Entity, EntityParams, EntityType } from \"./Entity\";\n\nexport class Star extends Entity {\n  protected maxTerrainHeight = 0;\n\n  constructor(id: number, name: string, entityType: EntityType, radius: number, params: EntityParams) {\n    super(id, name, entityType, radius, params);\n\n    this.params.terrainHeight = 0;\n    this.params.texturePath = \"assets/sun.jpg\";\n  }\n\n  protected _dispose(): void {}\n\n  protected getMapColour(height: number, y: number): number[] {\n    const { r, g, b } = this.params.colour!;\n    const rgba = [Math.floor(r * 255), Math.floor(g * 255), Math.floor(b * 255), 255];\n    return [rgba[0], rgba[1], rgba[2], rgba[3]];\n  }\n}\n","import { Entity } from \"./Entity\";\n\nconst colours = {\n  oceanDark: [0, 24, 168, 255],\n  oceanLight: [0, 105, 148, 255],\n  beachDark: [140, 129, 95, 255],\n  beachLight: [221, 202, 146, 255],\n  forestDark: [0, 66, 37, 255],\n  forestLight: [0, 127, 72, 255],\n  jungleDark: [48, 102, 79, 255],\n  jungleLight: [57, 122, 94, 255],\n  savannahDark: [136, 155, 105, 255],\n  savannahLight: [165, 189, 126, 255],\n  desertDark: [175, 175, 144, 255],\n  desertLight: [198, 198, 167, 255],\n  snowDark: [200, 200, 200, 255],\n  snowLight: [255, 255, 255, 255],\n};\n\nexport class Earth extends Entity {\n  protected maxTerrainHeight = this.radius / 16;\n\n  protected _dispose(): void {}\n\n  protected getMapColour(height: number, y: number) {\n    const colour = this.getColourForHeight(height);\n\n    // if (y > this.textureHeight * 0.9) {\n    //   return this.lerpColour(colour, colours.snow, y / this.textureHeight);\n    // }\n\n    return colour;\n  }\n\n  private getColourForHeight(height: number) {\n    const levels = [\n      // sea\n      {\n        min: 0,\n        max: 60,\n        dark: colours.oceanDark,\n        light: colours.oceanLight,\n      },\n      // beach\n      {\n        min: 60,\n        max: 70,\n        dark: colours.oceanLight,\n        light: colours.beachLight,\n      },\n      // forest\n      {\n        min: 70,\n        max: 110,\n        dark: colours.forestDark,\n        light: colours.forestLight,\n      },\n      // jungle\n      {\n        min: 110,\n        max: 120,\n        dark: colours.jungleDark,\n        light: colours.jungleLight,\n      },\n      // savannah\n      {\n        min: 120,\n        max: 140,\n        dark: colours.savannahDark,\n        light: colours.savannahLight,\n      },\n      // desert\n      {\n        min: 120,\n        max: 150,\n        dark: colours.desertDark,\n        light: colours.desertLight,\n      },\n    ];\n\n    for (const level of levels) {\n      if (height < level.max) {\n        return this.getRangeColour(level, height);\n      }\n    }\n\n    return colours.snowLight;\n  }\n}\n","import \"normalize.css\";\nimport \"./index.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { App } from \"./components/App/App\";\nimport { SolarSystemApp } from \"./app/SolarSystemApp\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App solarSystemApp={new SolarSystemApp()}></App>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","import {\n  AmbientLight,\n  // AxesHelper,\n  Camera,\n  Clock,\n  Color,\n  CubeTextureLoader,\n  MathUtils,\n  PerspectiveCamera,\n  PointLight,\n  Scene,\n  Texture,\n  Vector3,\n  WebGLRenderer,\n} from \"three\";\nimport cloneDeep from \"lodash/cloneDeep\";\n\nimport { Entity, EntityParams, EntityType } from \"./entities/Entity\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport Stats from \"three/examples/jsm/libs/stats.module\";\nimport { GUI } from \"three/examples/jsm/libs/dat.gui.module\";\n\nimport { SolarSystemGenerator } from \"./utils/RealisticSolarSystemGenerator\";\n\nimport { Moon } from \"./entities/Moon\";\nimport { ClassM } from \"./entities/ClassM\";\nimport { Star } from \"./entities/Star\";\nimport { Earth } from \"./entities/Earth\";\nimport { SolarSystem, SolarSystemEntity } from \"./models/SolarSystem\";\n\nconst sunColour = 0xf7e096;\n\nexport class SolarSystemApp {\n  private solarSystem!: SolarSystem;\n\n  private isRunning = false;\n  private scene!: Scene;\n  private camera!: Camera;\n  private clock = new Clock();\n  private bodies: Entity[] = [];\n  private renderer!: WebGLRenderer;\n  private orbitControls!: OrbitControls;\n  private stats!: Stats;\n  private showPlanetId!: number;\n  private cameraInitialPosition!: [number, number, number];\n  private spaceTexture!: Texture;\n  private gui!: GUI;\n  private guiViewActionsFolder!: GUI;\n  private guiPlanetsFolder!: GUI;\n\n  private ambientLight!: AmbientLight;\n  private pointLight!: PointLight;\n\n  // events\n  public onInitialising!: () => void;\n  public onInitialised!: () => void;\n  public onSelectPlanet!: (planet?: SolarSystemEntity) => void;\n\n  private options = {\n    seed: 982174,\n    simulationSpeed: 3,\n    showOrbits: true,\n    followPlanetName: \"Star 1\",\n    realisticScale: false,\n  };\n\n  private buttonHandlers = {\n    resetView: () => {\n      this.resetView();\n    },\n    newSeed: () => {\n      this.options.seed = MathUtils.randInt(100000, 999999);\n      this.init();\n    },\n    changeSeed: () => {\n      this.init();\n    },\n  };\n\n  constructor() {\n    this.solarSystem = new SolarSystemGenerator(this.options.seed).generate();\n\n    this.scene = new Scene();\n    this.scene.background = new Color().setHex(0x000000);\n\n    const loader = new CubeTextureLoader();\n    this.spaceTexture = loader.load([\n      \"assets/kurt/space_ft.png\",\n      \"assets/kurt/space_bk.png\",\n      \"assets/kurt/space_up.png\",\n      \"assets/kurt/space_dn.png\",\n      \"assets/kurt/space_rt.png\",\n      \"assets/kurt/space_lf.png\",\n    ]);\n    this.scene.background = this.spaceTexture;\n\n    // Camera\n    this.camera = new Camera();\n    this.camera = new PerspectiveCamera(25, window.innerWidth / window.innerHeight, 50, 1e10);\n    this.cameraInitialPosition = [0, this.solarSystem.stars[0].radius * 6, this.solarSystem.stars[0].radius * 20];\n    this.camera.position.set(...this.cameraInitialPosition);\n\n    this.camera.lookAt(0, 0, 0);\n\n    // Renderer\n    this.renderer = new WebGLRenderer({\n      powerPreference: \"high-performance\",\n      antialias: true,\n    });\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n    this.renderer.shadowMap.enabled = true;\n    document.body.appendChild(this.renderer.domElement);\n\n    // Controls\n    this.orbitControls = new OrbitControls(this.camera, this.renderer.domElement);\n    this.orbitControls.enableDamping = true;\n    this.orbitControls.update();\n\n    // Stats\n    this.stats = new (Stats as any)();\n    document.body.appendChild(this.stats.dom);\n\n    // UI\n    this.gui = new GUI();\n    this.gui.width = 300;\n\n    this.gui.add(this.buttonHandlers, \"newSeed\").name(\"New Seed\");\n    this.gui.add(this.options, \"seed\").name(\"Seed\").onFinishChange(this.buttonHandlers.changeSeed);\n    this.gui.add(this.options, \"simulationSpeed\", 0, 20, 0.1).name(\"Simulation Speed\");\n  }\n\n  public init = () => {\n    if (this.onInitialising) {\n      this.onInitialising();\n    }\n\n    this.gui.updateDisplay();\n    this.clearScene();\n    this.solarSystem = new SolarSystemGenerator(this.options.seed).generate();\n\n    this._init().then(() => {\n      this.resetView();\n      this.animate();\n      if (this.onInitialised) {\n        this.onInitialised();\n      }\n    });\n  };\n\n  private _init = async () => {\n    this.showPlanetId = -1;\n\n    // var axesHelper = new AxesHelper(5000);\n    // scene.add(axesHelper);\n\n    // Lighting\n    this.ambientLight = new AmbientLight(0xffffff, 0.15);\n    this.scene.add(this.ambientLight);\n\n    this.pointLight = new PointLight(sunColour, 1);\n    this.pointLight.position.set(0, 0, 0);\n    this.scene.add(this.pointLight);\n\n    if (this.options.realisticScale) {\n      await this.renderRealisticSolarSystem();\n      this.camera.position.set(...this.cameraInitialPosition);\n    } else {\n      await this.renderSolarSystem();\n      this.camera.position.set(...this.cameraInitialPosition).divideScalar(500);\n    }\n\n    const planets = this.bodies.filter((b) => b.entityType === EntityType.Planet);\n    const star = this.bodies.filter((b) => b.entityType === EntityType.Star)[0];\n\n    this.guiViewActionsFolder = this.gui.addFolder(\"View Actions\");\n    this.guiViewActionsFolder.open();\n    this.guiViewActionsFolder.add(this.options, \"realisticScale\").name(\"True Scale\").onChange(this.init);\n    this.guiViewActionsFolder.add(this.options, \"showOrbits\").name(\"Show Orbits\").onChange(this.toggleOrbits);\n\n    this.guiViewActionsFolder\n      .add(this.options, \"followPlanetName\", [star.name, ...planets.map((p) => p.name)])\n      .name(\"Centre of View\");\n    this.guiViewActionsFolder.add(this.buttonHandlers, \"resetView\").name(\"Reset View\");\n\n    this.guiPlanetsFolder = this.gui.addFolder(\"Planets\");\n    for (let index = 0; index < planets.length; index++) {\n      const planet = planets[index];\n      this.guiPlanetsFolder.add(planet, \"show\").name(`#${index + 1}: ${planet.name}`);\n    }\n\n    this.isRunning = true;\n  };\n\n  public animate = () => {\n    if (!this.isRunning) {\n      return;\n    }\n    requestAnimationFrame(this.animate);\n\n    this.bodies.forEach((body) => {\n      body.animate(this.clock, this.options.simulationSpeed / 5, this.camera);\n    });\n\n    this.stats.update();\n\n    if (this.showPlanetId > -1) {\n      const planet = this.bodies.find((b) => b.id === this.showPlanetId);\n      if (planet) {\n        const pos = new Vector3();\n        planet.sphere.getWorldPosition(pos);\n        this.camera.position.set(pos.x + planet.radius * 2, pos.y + planet.radius * 2, pos.z + planet.radius * 8);\n        this.camera.lookAt(pos.x, pos.y, pos.z);\n      }\n    } else {\n      const planet = this.bodies.find((b) => b.name === this.options.followPlanetName);\n      if (planet) {\n        const pos = new Vector3();\n        planet.sphere.getWorldPosition(pos);\n        this.orbitControls.target.set(pos.x, pos.y, pos.z);\n        this.orbitControls.update();\n      }\n    }\n\n    this.renderer.render(this.scene, this.camera);\n  };\n\n  private clearScene = () => {\n    this.isRunning = false;\n\n    try {\n      this.gui.removeFolder(this.guiViewActionsFolder);\n      this.gui.removeFolder(this.guiPlanetsFolder);\n      this.guiViewActionsFolder.destroy();\n    } catch (error) {}\n\n    this.ambientLight?.dispose();\n    this.pointLight?.dispose();\n\n    for (const body of this.bodies) {\n      body.dispose();\n    }\n    this.bodies = [];\n    this.scene.clear();\n\n    this.renderer.render(this.scene, this.camera);\n  };\n\n  private resetView = () => {\n    this.showPlanetId = -1;\n\n    if (this.options.realisticScale) {\n      this.camera.position.set(...this.cameraInitialPosition);\n    } else {\n      this.camera.position.set(...this.cameraInitialPosition).divideScalar(500);\n    }\n\n    if (this.onSelectPlanet) {\n      this.onSelectPlanet(undefined);\n    }\n  };\n\n  private handleShowPlanet = (id: number) => {\n    this.showPlanetId = id;\n\n    if (this.onSelectPlanet) {\n      const planet = this.solarSystem.planets.find((p) => p.id === id) as SolarSystemEntity;\n      this.onSelectPlanet(planet);\n    }\n  };\n\n  private toggleOrbits = () => {\n    for (const body of this.bodies) {\n      if (body.orbit) {\n        body.orbit.opacity = body.orbit.opacity === 0 ? 0.5 : 0;\n      }\n    }\n  };\n\n  /**\n   * Renders a 1000th scale model of the solar system\n   */\n  private renderRealisticSolarSystem = async () => {\n    // scale radiuses and speeds down to displayable proportions\n    const viewScale = 1 / 1000;\n\n    for (const star of this.solarSystem.stars) {\n      const radius = star.radius * viewScale;\n      const orbitRadius = star.orbitRadius * viewScale;\n      const orbitSpeed = star.orbitSpeed * viewScale;\n\n      const starEntity = new Star(star.id, star.name, EntityType.Star, radius, {\n        baseSeed: star.seed,\n        position: star.position ? new Vector3(...star.position) : new Vector3(0, 0, 0),\n        colour: new Color(0xffca20),\n        orbitEntity: false,\n        orbitRadius: orbitRadius,\n        orbitDirection: star.orbitDirection,\n        orbitSpeed: orbitSpeed,\n        orbitInclanation: star.orbitInclanation,\n        orbitStartPosition: star.orbitStartPosition,\n        spinSpeed: star.spinSpeed,\n        spinDirection: star.spinDirection,\n      });\n      await starEntity.create();\n      this.bodies.push(starEntity);\n      this.scene.add(starEntity.entity);\n\n      for (let planetIndex = 0; planetIndex < this.solarSystem.planets.length; planetIndex++) {\n        const planet = this.solarSystem.planets[planetIndex];\n\n        const radius = planet.radius * viewScale;\n        const orbitRadius = planet.orbitRadius * viewScale;\n        const orbitSpeed = planet.orbitSpeed * viewScale;\n\n        const orbitEntity = this.bodies.find((b) => b.id === planet.orbitEntityId) as Entity;\n\n        const planetParams: EntityParams = {\n          baseSeed: planet.seed,\n          position: planet.position ? new Vector3(...planet.position) : orbitEntity.entity.position,\n          terrainHeight: planet.terrainHeight,\n          orbitEntity: orbitEntity,\n          orbitRadius: orbitRadius,\n          orbitDirection: planet.orbitDirection,\n          orbitSpeed: orbitSpeed,\n          orbitInclanation: planet.orbitInclanation,\n          orbitStartPosition: planet.orbitStartPosition,\n          spinSpeed: planet.spinSpeed,\n          spinDirection: planet.spinDirection,\n          hasLabel: true,\n          onShow: this.handleShowPlanet,\n        };\n\n        const planetEntity =\n          planetIndex === 2\n            ? new Earth(planet.id, planet.name, EntityType.Planet, radius, planetParams)\n            : new ClassM(planet.id, planet.name, EntityType.Planet, radius, planetParams);\n        await planetEntity.create();\n\n        for (const moon of planet.moons) {\n          const radius = moon.radius * viewScale;\n          const orbitRadius = moon.orbitRadius * viewScale;\n          const orbitSpeed = moon.orbitSpeed * viewScale;\n\n          const orbitEntity = planetEntity;\n\n          const moonEntity = new Moon(moon.id, moon.name, EntityType.Moon, radius, {\n            baseSeed: moon.seed,\n            position: moon.position ? new Vector3(...moon.position) : orbitEntity.entity.position,\n            colour: moon.rgb ? new Color(...moon.rgb) : new Color(1, 1, 1),\n            terrainHeight: moon.terrainHeight,\n            orbitEntity: orbitEntity,\n            orbitRadius: orbitRadius,\n            orbitDirection: moon.orbitDirection,\n            orbitSpeed: orbitSpeed,\n            orbitInclanation: moon.orbitInclanation,\n            orbitStartPosition: moon.orbitStartPosition,\n            spinSpeed: moon.spinSpeed,\n            spinDirection: planet.spinDirection,\n          });\n          await moonEntity.create();\n          this.bodies.push(moonEntity);\n          // add the moon to the planet (so it follows the planet's orbit)\n          planetEntity.entity.add(moonEntity.entity);\n        }\n\n        this.bodies.push(planetEntity);\n        this.scene.add(planetEntity.entity);\n      }\n    }\n  };\n\n  /**\n   * Renders a view friendly, compressed version of the solar system\n   */\n  private renderSolarSystem = async () => {\n    // scale radiuses and speeds down to displayable proportions\n    const viewScale = 1 / 1000;\n\n    for (const star of this.solarSystem.stars) {\n      const starRadius = star.radius * viewScale * 4;\n      const orbitRadius = star.orbitRadius * viewScale;\n      const orbitSpeed = star.orbitSpeed * viewScale;\n\n      const starEntity = new Star(star.id, star.name, EntityType.Star, starRadius, {\n        baseSeed: star.seed,\n        position: star.position ? new Vector3(...star.position) : new Vector3(0, 0, 0),\n        colour: new Color(0xffca20),\n        orbitEntity: false,\n        orbitRadius: orbitRadius,\n        orbitDirection: star.orbitDirection,\n        orbitSpeed: orbitSpeed,\n        orbitInclanation: star.orbitInclanation,\n        orbitStartPosition: star.orbitStartPosition,\n        spinSpeed: star.spinSpeed,\n        spinDirection: star.spinDirection,\n      });\n      await starEntity.create();\n      this.bodies.push(starEntity);\n      this.scene.add(starEntity.entity);\n\n      const planets = cloneDeep(this.solarSystem.planets);\n\n      // increase the radiuses (and moons to match)\n      for (const planet of planets) {\n        const scale = 4;\n        planet.radius *= scale;\n        for (const moon of planet.moons) {\n          moon.radius *= scale;\n          moon.orbitSpeed *= scale;\n        }\n      }\n\n      // compress the orbits\n      for (let i = 0; i < planets.length; i++) {\n        const planet = planets[i];\n        const planetMoonRadius = planet.moons[planet.moons.length - 1].orbitRadius;\n\n        if (i === 0) {\n          planet.orbitRadius = star.radius * 2 + planetMoonRadius * 2;\n        } else {\n          const prevPlanet = planets[i - 1];\n          const prevPlanetMoonRadius = prevPlanet.moons[prevPlanet.moons.length - 1].orbitRadius;\n          planet.orbitRadius = prevPlanet.orbitRadius + prevPlanetMoonRadius + planetMoonRadius;\n\n          // Extend the orbit slightly based on the actual orbit sizes\n          const r =\n            (this.solarSystem.planets[i].orbitRadius - this.solarSystem.planets[i - 1].orbitRadius) /\n            this.solarSystem.planets[this.solarSystem.planets.length - 1].orbitRadius;\n\n          planet.orbitRadius += r * planet.orbitRadius * 0.5;\n        }\n      }\n\n      for (let planetIndex = 0; planetIndex < planets.length; planetIndex++) {\n        const planet = planets[planetIndex];\n\n        const radius = planet.radius * viewScale;\n        const orbitRadius = planet.orbitRadius * viewScale;\n        const orbitSpeed = planet.orbitSpeed * viewScale;\n\n        const orbitEntity = this.bodies.find((b) => b.id === planet.orbitEntityId) as Entity;\n\n        const planetParams: EntityParams = {\n          baseSeed: planet.seed,\n          position: planet.position ? new Vector3(...planet.position) : orbitEntity.entity.position,\n          terrainHeight: planet.terrainHeight,\n          orbitEntity: orbitEntity,\n          orbitRadius: orbitRadius,\n          orbitDirection: planet.orbitDirection,\n          orbitSpeed: orbitSpeed,\n          orbitInclanation: planet.orbitInclanation,\n          orbitStartPosition: planet.orbitStartPosition,\n          spinSpeed: planet.spinSpeed,\n          spinDirection: planet.spinDirection,\n          hasLabel: true,\n          onShow: this.handleShowPlanet,\n        };\n\n        const planetEntity =\n          planetIndex === 2\n            ? new Earth(planet.id, planet.name, EntityType.Planet, radius, planetParams)\n            : new ClassM(planet.id, planet.name, EntityType.Planet, radius, planetParams);\n        await planetEntity.create();\n\n        for (const moon of planet.moons) {\n          const radius = moon.radius * viewScale;\n          const orbitRadius = moon.orbitRadius * viewScale;\n          const orbitSpeed = moon.orbitSpeed * viewScale * 4; // 4 = fudge factor to get moons moving\n          const orbitEntity = planetEntity;\n\n          const moonEntity = new Moon(moon.id, moon.name, EntityType.Moon, radius, {\n            baseSeed: moon.seed,\n            position: moon.position ? new Vector3(...moon.position) : orbitEntity.entity.position,\n            colour: moon.rgb ? new Color(...moon.rgb) : new Color(1, 1, 1),\n            terrainHeight: moon.terrainHeight,\n            orbitEntity: orbitEntity,\n            orbitRadius: orbitRadius,\n            orbitDirection: moon.orbitDirection,\n            orbitSpeed: orbitSpeed,\n            orbitInclanation: moon.orbitInclanation,\n            orbitStartPosition: moon.orbitStartPosition,\n            spinSpeed: moon.spinSpeed,\n            spinDirection: planet.spinDirection,\n          });\n          await moonEntity.create();\n          this.bodies.push(moonEntity);\n          // add the moon to the planet (so it follows the planet's orbit)\n          planetEntity.entity.add(moonEntity.entity);\n        }\n\n        this.bodies.push(planetEntity);\n        this.scene.add(planetEntity.entity);\n      }\n    }\n  };\n}\n"],"sourceRoot":""}