{"version":3,"sources":["app/planets/Entity.ts","components/LoadingIndicator.tsx","components/App.tsx","app/NoiseMapGenerator.ts","app/Random.ts","app/SolarSystemGenerator.ts","app/planets/Moon.ts","app/planets/ClassM.ts","app/planets/Sun.ts","app/planets/Earth.ts","index.tsx","app/SolarSystemApp.ts"],"names":["EntityType","LoadingIndicator","show","className","App","solarSystemApp","useState","isLoading","setIsLoading","useEffect","init","onInitialising","handleInitialising","onInitialised","handleInitialised","NoiseMapGenerator","seed","noiseGenerator","this","SimplexNoise","width","height","map","x","y","noise","getMixedFrequencyNoise","Math","pow","makeSeamlessVertically","makeSeamlessHorizontally","frequency","xOffset","yOffset","_x","_y","amplitude","n","noise2D","frequencies","sumOfAmplitudes","reduce","previous","index","getNoise","noiseMap","stitchWidth","length","v","o","MathUtils","lerp","stitchHeight","k","ceil","s1","s2","c","Entity","id","name","entityType","radius","params","entity","sphere","orbit","textureWidth","textureHeight","maxTerrainHeight","loader","TextureLoader","sphereGeometry","orbitGeometry","material","heightMapTexture","colourMapTexture","texture","Group","terrainHeight","terrainMaps","generateTerrainMaps","CanvasTexture","heightMap","canvas","mapping","EquirectangularReflectionMapping","MeshPhongMaterial","bumpMap","bumpScale","displacementMap","displacementScale","texturePath","loadAsync","MeshBasicMaterial","color","colour","SphereBufferGeometry","Mesh","castShadow","receiveShadow","orbitEntity","orbitEntityPos","position","orbitRadius","createOrbitCircle","add","set","z","rotation","degToRad","orbitInclanation","orbitStartPosition","clock","speed","getElapsedTime","orbitSpeed","orbitDirection","spinSpeed","spinDirection","onShow","dispose","_dispose","heightMapContext","getCanvasContext","heightMapImageData","createImageData","heightMapData","data","colourMapContext","colourMapImageData","colourMapData","baseSeed","acc","cur","generateNoiseMap","i","colourValue","heightColour","ci","mapColour","getMapColour","putImageData","level","lerpColour","dark","light","min","max","col1","col2","ratio","convertToColor","toArray","Color","setRGB","ctx","document","createElement","getContext","fillStyle","fillRect","BufferGeometry","verts","LineBasicMaterial","opacity","transparent","theta","PI","push","cos","sin","vertices","Float32Array","setAttribute","BufferAttribute","Line","Random","mt19937","factory","rand","floor","getRandom","x0","y0","z0","u","random","phi","acos","seedIndexes","SolarSystemGenerator","EntityId","solarSystem","suns","planets","getNextId","moons","orbitEntityId","getRandomFloat","coinToss","sunIndex","sun","numberOfPlanets","getRandomInt","planetIndex","jupiterRadius","mercuryRadius","planetRadius","numberOfMoons","planetMoons","moonIndex","randomOrbitDirection","randomSpinSpeed","minOrbitRadius","moonRadius","moon","rgb","getRandomRgb","prevPlanet","undefined","currentPlanetMoonRadius","firstPlanetOrbitRadius","prevPlanetOrbitRadius","prevPlanetMoonRadius","orbitPadding","planet","Moon","r","g","b","rgba","ClassM","colours","oceanDark","getRandomColour","oceanLight","beachDark","beachLight","forestDark","forestLight","jungleDark","jungleLight","savannahDark","savannahLight","desertDark","desertLight","snowDark","snowLight","getColourForHeight","getRangeColour","colIndex","Sun","Earth","ReactDOM","render","StrictMode","isRunning","scene","camera","Clock","bodies","renderer","orbitControls","stats","showPlanetId","cameraInitialPosition","spaceTexture","gui","guiViewActionsFolder","ambientLight","pointLight","options","simulationSpeed","showOrbits","followPlanetName","buttonHandlers","resetView","newSeed","randInt","changeSeed","updateDisplay","clearScene","generate","_init","then","animate","a","AmbientLight","PointLight","createSolarSystem","filter","Planet","addFolder","open","onChange","toggleOrbits","p","requestAnimationFrame","forEach","body","update","find","pos","Vector3","getWorldPosition","lookAt","target","removeFolder","destroy","error","clear","OrbitControls","domElement","handleShowPlanet","maxPlanetOrbitSpeed","maxMoonOrbitSpeed","sunEntity","create","planetParams","planetEntity","moonEntity","Scene","background","setHex","CubeTextureLoader","load","Camera","PerspectiveCamera","window","innerWidth","innerHeight","WebGLRenderer","powerPreference","antialias","setSize","setPixelRatio","devicePixelRatio","shadowMap","enabled","appendChild","Stats","dom","GUI","onFinishChange","getElementById"],"mappings":"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","file":"static/js/main.234f47e0.chunk.js","sourcesContent":["import {\n  CanvasTexture,\n  Clock,\n  Color,\n  EquirectangularReflectionMapping,\n  Group,\n  Line,\n  LineBasicMaterial,\n  Material,\n  Mesh,\n  MeshBasicMaterial,\n  MeshPhongMaterial,\n  SphereBufferGeometry,\n  TextureLoader,\n  Vector3,\n  BufferGeometry,\n  BufferAttribute,\n  Texture,\n  MathUtils,\n} from \"three\";\n\nimport { NoiseMapGenerator } from \"../NoiseMapGenerator\";\n\nexport enum EntityType {\n  Sun,\n  Planet,\n  Moon,\n}\n\ntype TerrainMaps = {\n  heightMap: CanvasRenderingContext2D;\n  map: CanvasRenderingContext2D;\n};\n\nexport type EntityParams = {\n  baseSeed: number[];\n  position: Vector3;\n  orbitEntity: Entity | false;\n  orbitDirection: number;\n  orbitSpeed: number;\n  orbitRadius: number;\n  orbitInclanation: number;\n  orbitStartPosition: number;\n  spinSpeed: number;\n  spinDirection: number;\n\n  terrainHeight?: number;\n  colour?: Color;\n  castShadow?: boolean;\n  receiveShadow?: boolean;\n  texturePath?: string;\n  onShow?: (id: number) => void;\n};\n\nexport abstract class Entity {\n  public id: number;\n  public name: string;\n  public entityType: EntityType;\n  public entity: Group;\n  public params: EntityParams;\n  public radius: number;\n  public sphere!: Mesh;\n  public orbit!: Material;\n\n  protected textureWidth: number;\n  protected textureHeight: number;\n  protected abstract maxTerrainHeight: number;\n\n  private loader = new TextureLoader();\n  private sphereGeometry!: SphereBufferGeometry;\n  private orbitGeometry!: BufferGeometry;\n  private material!: Material;\n  private heightMapTexture!: CanvasTexture;\n  private colourMapTexture!: CanvasTexture;\n  private texture!: Texture;\n\n  constructor(id: number, name: string, entityType: EntityType, radius: number, params: EntityParams) {\n    this.id = id;\n    this.name = name;\n    this.entityType = entityType;\n    this.radius = radius;\n    this.params = params;\n\n    this.entity = new Group();\n\n    this.textureWidth = 512;\n    this.textureHeight = 256;\n  }\n\n  public async create() {\n    if (this.params.terrainHeight && this.params.terrainHeight > 0) {\n      const terrainMaps = this.generateTerrainMaps();\n\n      this.heightMapTexture = new CanvasTexture(terrainMaps.heightMap.canvas);\n      this.colourMapTexture = new CanvasTexture(terrainMaps.map.canvas);\n\n      this.heightMapTexture.mapping = EquirectangularReflectionMapping;\n      this.colourMapTexture.mapping = EquirectangularReflectionMapping;\n\n      const terrainHeight = Math.ceil(this.params.terrainHeight * this.maxTerrainHeight);\n\n      this.material = new MeshPhongMaterial({\n        bumpMap: this.heightMapTexture,\n        bumpScale: terrainHeight,\n        map: this.colourMapTexture,\n        displacementMap: this.heightMapTexture,\n        displacementScale: terrainHeight,\n      });\n    } else {\n      if (this.params.texturePath) {\n        this.texture = await this.loader.loadAsync(this.params.texturePath);\n        this.material = new MeshBasicMaterial({ map: this.texture, color: this.params.colour });\n      } else {\n        this.material = new MeshBasicMaterial({\n          color: this.params.colour,\n        });\n      }\n    }\n\n    this.sphereGeometry = new SphereBufferGeometry(this.radius, 64, 48);\n    this.sphere = new Mesh(this.sphereGeometry, this.material);\n\n    this.sphere.castShadow = !!this.params.castShadow;\n    this.sphere.receiveShadow = !!this.params.receiveShadow;\n\n    // const geom = new PlaneGeometry(this.textureWidth, this.textureHeight);\n    // this.sphere = new Mesh(geom, material);\n\n    if (this.params.orbitEntity) {\n      const orbitEntityPos = this.params.orbitEntity.sphere.position;\n      const orbitRadius = this.params.orbitRadius || 400;\n\n      // create an orbit cirlce and add it to the entity\n      const orbit = this.createOrbitCircle(orbitRadius);\n      this.entity.add(orbit);\n\n      // position the sphere at the edge of the orbit circle\n      this.sphere.position.set(orbitRadius, 0, 0);\n\n      // position the whole entity at the orbit entity position\n      this.entity.position.set(orbitEntityPos.x, orbitEntityPos.y, orbitEntityPos.z);\n\n      // set orbit inclanation/tilt\n      this.entity.rotation.x = MathUtils.degToRad(this.params.orbitInclanation);\n\n      // set initial orbit position\n      this.entity.rotation.y = MathUtils.degToRad(360 * this.params.orbitStartPosition);\n    }\n\n    this.entity.add(this.sphere);\n\n    return this;\n  }\n\n  public animate(clock: Clock, speed: number) {\n    clock.getElapsedTime();\n\n    if (this.params.orbitEntity) {\n      const orbitSpeed = this.params.orbitSpeed * speed;\n      const orbitDirection = this.params.orbitDirection;\n      this.entity.rotation.y += orbitSpeed * orbitDirection;\n    }\n\n    if (this.params.spinSpeed) {\n      this.sphere.rotation.y += this.params.spinSpeed * speed * this.params.spinDirection;\n    }\n  }\n\n  public show() {\n    if (this.params.onShow) {\n      this.params.onShow(this.id);\n    }\n  }\n\n  protected abstract _dispose(): void;\n  public dispose() {\n    // geometries\n    this.sphereGeometry?.dispose();\n    this.orbitGeometry?.dispose();\n\n    // materials\n    this.orbit?.dispose();\n    this.material?.dispose();\n\n    // textures\n    this.heightMapTexture?.dispose();\n    this.colourMapTexture?.dispose();\n    this.texture?.dispose();\n\n    // call implemented dispose method\n    this._dispose();\n  }\n\n  protected generateTerrainMaps(): TerrainMaps {\n    const recordSize = 4;\n\n    const heightMapContext = this.getCanvasContext();\n    const heightMapImageData = heightMapContext.createImageData(this.textureWidth, this.textureHeight);\n    const heightMapData = heightMapImageData.data;\n\n    const colourMapContext = this.getCanvasContext();\n    const colourMapImageData = colourMapContext.createImageData(this.textureWidth, this.textureHeight);\n    const colourMapData = colourMapImageData.data;\n\n    const seed = [...this.params.baseSeed, 99999].reduce((acc, cur) => (acc += cur));\n    const ng = new NoiseMapGenerator(seed);\n    const noiseMap = ng.generateNoiseMap(this.textureWidth, this.textureHeight);\n\n    for (let i = 0; i < heightMapData.length; i += recordSize) {\n      const x = (i / recordSize) % this.textureWidth;\n      const y = ~~(i / recordSize / this.textureWidth);\n\n      const noise = noiseMap[x][y];\n      const generatedColourValue = 255 * noise;\n\n      let colourValue = generatedColourValue;\n\n      // RGBA\n      const heightColour = [colourValue, colourValue, colourValue, 255];\n      for (let ci = 0; ci < heightColour.length; ci++) {\n        heightMapData[i + ci] = heightColour[ci];\n      }\n\n      let mapColour = this.getMapColour(colourValue, y);\n\n      for (let ci = 0; ci < mapColour.length; ci++) {\n        colourMapData[i + ci] = mapColour[ci];\n      }\n    }\n\n    heightMapContext.putImageData(heightMapImageData, 0, 0);\n    colourMapContext.putImageData(colourMapImageData, 0, 0);\n\n    return {\n      heightMap: heightMapContext,\n      map: colourMapContext,\n    };\n  }\n\n  protected abstract getMapColour(height: number, y: number): number[];\n\n  protected getRangeColour(level: { min: number; max: number; dark: number[]; light: number[] }, height: number) {\n    return this.lerpColour(level.dark, level.light, (height - level.min) / (level.max - level.min));\n  }\n\n  protected lerpColour(col1: number[], col2: number[], ratio: number) {\n    const c = this.convertToColor(col1).lerp(this.convertToColor(col2), ratio);\n    return [...c.toArray(), 255];\n  }\n\n  protected convertToColor(colour: number[]) {\n    return new Color().setRGB(colour[0], colour[1], colour[2]);\n  }\n\n  protected getCanvasContext() {\n    const ctx = document.createElement(\"canvas\").getContext(\"2d\") as CanvasRenderingContext2D;\n    ctx.canvas.width = this.textureWidth;\n    ctx.canvas.height = this.textureHeight;\n    ctx.fillStyle = \"#fff\";\n    ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    return ctx;\n  }\n\n  private createOrbitCircle(radius: number) {\n    var segmentCount = 128;\n    this.orbitGeometry = new BufferGeometry();\n    const verts = [];\n    this.orbit = new LineBasicMaterial({ color: 0xffffff, opacity: 0.5, transparent: true });\n\n    for (var i = 0; i <= segmentCount; i++) {\n      var theta = (i / segmentCount) * Math.PI * 2;\n      verts.push(Math.cos(theta) * radius, 0, Math.sin(theta) * radius);\n    }\n    const vertices = new Float32Array(verts);\n    this.orbitGeometry.setAttribute(\"position\", new BufferAttribute(vertices, 3));\n    return new Line(this.orbitGeometry, this.orbit);\n  }\n}\n","import React from \"react\";\n\nimport \"./LoadingIndicator.css\";\n\ntype Props = {\n  show?: boolean;\n};\n\nexport const LoadingIndicator: React.FC<Props> = ({ show }) => {\n  return show ? <div className=\"loading-indicator\">Generating Solar System...</div> : null;\n};\n","import React, { useEffect, useState } from \"react\";\nimport { LoadingIndicator } from \"./LoadingIndicator\";\nimport { SolarSystemApp } from \"../app/SolarSystemApp\";\n\ntype Props = {\n  solarSystemApp: SolarSystemApp;\n};\n\nexport const App: React.FC<Props> = ({ solarSystemApp }) => {\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    solarSystemApp.init();\n    solarSystemApp.onInitialising = handleInitialising;\n    solarSystemApp.onInitialised = handleInitialised;\n  }, [solarSystemApp]);\n\n  const handleInitialising = () => {\n    setIsLoading(true);\n  };\n\n  const handleInitialised = () => {\n    setIsLoading(false);\n  };\n\n  return <LoadingIndicator show={isLoading} />;\n};\n","import SimplexNoise from \"simplex-noise\";\nimport { MathUtils } from \"three\";\n\nexport class NoiseMapGenerator {\n  private noiseGenerator: SimplexNoise;\n\n  constructor(seed?: number) {\n    this.noiseGenerator = new SimplexNoise(seed);\n  }\n\n  public generateNoiseMap(width: number, height: number): number[][] {\n    const map: number[][] = [];\n\n    for (let x = 0; x < width; x++) {\n      map[x] = [];\n      for (let y = 0; y < height; y++) {\n        // add noise at various frequencies\n        let noise = this.getMixedFrequencyNoise(\n          x,\n          y,\n          [0.01, 0.02, 0.04, 0.08, 0.16, 0.32, 0.64, 1.28]\n        );\n        noise = Math.pow(noise, 2.3);\n\n        map[x][y] = noise;\n      }\n    }\n\n    this.makeSeamlessVertically(map, height * 0.2);\n    this.makeSeamlessHorizontally(map, width * 0.05);\n\n    return map;\n  }\n\n  private getNoise(\n    x: number,\n    y: number,\n    frequency: number,\n    xOffset: number = 0,\n    yOffset: number = 0\n  ) {\n    const _x = frequency * x + xOffset;\n    const _y = frequency * y + yOffset;\n    const amplitude = 1 / frequency;\n\n    // get noise in the range 0-1\n    const n = this.noiseGenerator.noise2D(_x, _y) / 2 + 0.5;\n\n    let noise = amplitude * n;\n    return noise;\n  }\n\n  private getMixedFrequencyNoise(x: number, y: number, frequencies: number[]) {\n    let sumOfAmplitudes = 0;\n    const noise = frequencies.reduce(\n      (previous: number, frequency: number, index: number) => {\n        sumOfAmplitudes += 1 / frequency;\n\n        // add offsets so different frequencies (octaves)\n        // sample from a different part of the noise space\n        const xOffset = index * 10;\n        const yOffset = index * 100;\n        return previous + this.getNoise(x, y, frequency, xOffset, yOffset);\n      },\n      0\n    );\n    return noise / sumOfAmplitudes;\n  }\n\n  // ported from here:\n  // https://medium.com/nerd-for-tech/making-a-seamless-perlin-noise-in-c-4cfc12a90f93\n  private makeSeamlessHorizontally(noiseMap: number[][], stitchWidth: number) {\n    const width = noiseMap.length;\n    const height = noiseMap[0].length;\n\n    // iterate on the stitch band (on the left\n    // of the noise)\n    for (let x = 0; x < stitchWidth; x++) {\n      // get the transparency value from\n      // a linear gradient\n      const v = x / stitchWidth;\n\n      for (let y = 0; y < height; y++) {\n        // compute the \"mirrored x position\":\n        // the far left is copied on the right\n        // and the far right on the left\n        const o = ~~(width - stitchWidth + x);\n        // copy the value on the right of the noise\n        noiseMap[o][y] = MathUtils.lerp(\n          noiseMap[o][y],\n          noiseMap[~~(stitchWidth - x)][y],\n          v\n        );\n      }\n    }\n  }\n\n  // ported from here:\n  // https://medium.com/nerd-for-tech/making-a-seamless-perlin-noise-in-c-4cfc12a90f93\n  private makeSeamlessVertically(noiseMap: number[][], stitchHeight: number) {\n    const width = noiseMap.length;\n    const height = noiseMap[0].length;\n\n    // iterate through the stitch band (both\n    // top and bottom sides are treated\n    // simultaneously because its mirrored)\n    for (let y = 0; y < stitchHeight; y++) {\n      // number of neighbour pixels to\n      // consider for the average (= kernel size)\n      const k = Math.ceil(stitchHeight - y);\n      // go through the entire row\n      for (let x = 0; x < width; x++) {\n        // compute the sum of pixel values\n        // in the top and the bottom bands\n        let s1 = 0.0;\n        let s2 = 0.0;\n        let c = 0;\n        for (let o = x - k; o < x + k; o++) {\n          if (o < 0 || o >= width) {\n            continue;\n          }\n\n          s1 += noiseMap[o][y];\n          s2 += noiseMap[o][height - y - 1];\n          c++;\n        }\n        // compute the means and assign them to\n        // the pixels in the top and the bottom\n        // rows\n        noiseMap[x][y] = s1 / c;\n        noiseMap[x][height - y - 1] = s2 / c;\n      }\n    }\n  }\n}\n","import mt19937 from \"@stdlib/random-base-mt19937\";\n\nconst MAX = 4294967295;\n\nexport class Random {\n  public static getRandom(seed: number[]) {\n    var rand = mt19937.factory({\n      seed: seed,\n    });\n\n    return rand() / MAX;\n  }\n\n  public static getRandomInt(min: number, max: number, seed: number[]) {\n    return Math.floor(Random.getRandom(seed) * (max - min + 1) + min);\n  }\n\n  public static getRandomFloat(min: number, max: number, seed: number[]) {\n    return Random.getRandom(seed) * (max - min) + min;\n  }\n\n  public static coinToss(seed: number[]) {\n    return Random.getRandom(seed) <= 0.5;\n  }\n\n  /**\n   * Gets a random point of a sphere, evenly distributed over the sphere.\n   * The sphere is centered at (x0,y0,z0) with the passed in radius.\n   * The returned point is returned as a three element array [x,y,z].\n   *\n   * @return [x,y,z]\n   */\n  public static getRandomPointInSphere(radius: number, x0: number, y0: number, z0: number) {\n    if (!x0) {\n      x0 = 0;\n    }\n    if (!y0) {\n      y0 = 0;\n    }\n    if (!z0) {\n      z0 = 0;\n    }\n\n    var u = Math.random();\n    var v = Math.random();\n    var theta = 2 * Math.PI * u;\n    var phi = Math.acos(1 - 2 * v);\n    var x = x0 + radius * Math.sin(phi) * Math.cos(theta);\n    var y = y0 + radius * Math.sin(phi) * Math.sin(theta);\n    var z = z0 + radius * Math.cos(phi);\n\n    return [x, y, z];\n  }\n}\n","import { Random } from \"./Random\";\n\nexport type SolarSystemEntity = {\n  id: number;\n  name: string;\n  seed: number[];\n  radius: number;\n  terrainHeight: number;\n  moons: SolarSystemEntity[];\n  orbitEntityId: number;\n  orbitRadius: number;\n  orbitDirection: number;\n  orbitSpeed: number;\n  orbitInclanation: number;\n  orbitStartPosition: number;\n  spinSpeed: number;\n  spinDirection: number;\n\n  position?: [number, number, number];\n  rgb?: [number, number, number];\n};\n\nexport type SolarSystem = {\n  suns: SolarSystemEntity[];\n  planets: SolarSystemEntity[];\n};\n\nconst seedIndexes = {\n  radius: 0,\n  terrainHeight: 1,\n  colour: 2,\n  noiseMap: 3,\n  orbitDirection: 4,\n  orbitSpeed: 5,\n  spinSpeed: 6,\n  numberOfPlanets: 7,\n  orbitRadius: 8,\n  orbitInclanation: 9,\n  spinDirection: 10,\n  orbitStartPosition: 11,\n};\n\nexport class SolarSystemGenerator {\n  private EntityId = 0;\n\n  private getNextId(): number {\n    this.EntityId++;\n    return this.EntityId;\n  }\n\n  public generate(seed: number): SolarSystem {\n    const solarSystem: SolarSystem = {\n      suns: [],\n      planets: [],\n    };\n\n    const suns: SolarSystemEntity[] = [\n      {\n        id: this.getNextId(),\n        name: `Sun ${this.EntityId}`,\n        seed: [seed, 0],\n        position: [0, 0, 0],\n        radius: 1280,\n        terrainHeight: 0,\n        moons: [],\n        orbitEntityId: 0,\n        orbitRadius: 0,\n        orbitSpeed: 0,\n        orbitDirection: 0,\n        orbitInclanation: 0,\n        orbitStartPosition: 0,\n        spinSpeed: Random.getRandomFloat(0.0001, 0.0003, [...[seed, 0], seedIndexes.spinSpeed]),\n        spinDirection: Random.coinToss([...[seed, 0], seedIndexes.spinDirection]) ? 1 : -1,\n      },\n    ];\n\n    for (let sunIndex = 0; sunIndex < suns.length; sunIndex++) {\n      const sun = suns[sunIndex];\n\n      // const neptuneOrbitRadius = oneAU * 30;\n      const numberOfPlanets = Random.getRandomInt(1, 9, [seed, sunIndex, seedIndexes.numberOfPlanets]);\n\n      for (let planetIndex = 0; planetIndex < numberOfPlanets; planetIndex++) {\n        const baseSeed = [seed, sunIndex, planetIndex];\n\n        // let's base our planet sizes off something from reality\n        // choose a size somewhere between mercury and double jupiter\n        const jupiterRadius = sun.radius / 10;\n        const mercuryRadius = sun.radius / 327;\n\n        const planetRadius = Random.getRandomInt(mercuryRadius, jupiterRadius * 2, [...baseSeed, seedIndexes.radius]);\n        const numberOfMoons = Random.getRandomInt(1, 10, [...baseSeed, seedIndexes.numberOfPlanets]);\n\n        // create the moons for the planet\n        const planetMoons = [];\n        for (let moonIndex = 0; moonIndex < numberOfMoons; moonIndex++) {\n          const baseSeed = [seed, sunIndex, planetIndex, moonIndex];\n          const randomOrbitDirection = Random.coinToss([...baseSeed, seedIndexes.orbitDirection]) ? 1 : -1;\n\n          const randomSpinSpeed = Random.getRandomFloat(0.001, 0.005, [...baseSeed, seedIndexes.spinSpeed]);\n          const minOrbitRadius = Random.getRandomInt(planetRadius * 3 * 0.5, planetRadius * 4, [\n            ...baseSeed,\n            seedIndexes.orbitRadius,\n            0,\n          ]);\n          const orbitRadius =\n            moonIndex === 0\n              ? minOrbitRadius\n              : planetMoons[moonIndex - 1].orbitRadius +\n                Random.getRandomInt(minOrbitRadius * 0.2, minOrbitRadius, [...baseSeed, seedIndexes.orbitRadius, 1]);\n          const moonRadius = Random.getRandomInt(planetRadius / 12, planetRadius / 4, [\n            ...baseSeed,\n            seedIndexes.radius,\n          ]);\n\n          const moon: SolarSystemEntity = {\n            id: this.getNextId(),\n            name: `Moon ${moonIndex + 1}`,\n            seed: baseSeed,\n            radius: moonRadius,\n            terrainHeight: Random.getRandom([...baseSeed, seedIndexes.terrainHeight]), // Random.getRandomInt(1, 5, [...baseSeed, seedIndexes.terrainHeight]),\n            orbitEntityId: -1,\n            orbitRadius: orbitRadius,\n            orbitDirection: randomOrbitDirection,\n            orbitSpeed: (numberOfMoons - moonIndex) / numberOfMoons,\n            orbitInclanation: Random.getRandomInt(0, 45, [...baseSeed, seedIndexes.orbitInclanation]),\n            orbitStartPosition: Random.getRandom([...baseSeed, seedIndexes.orbitStartPosition]),\n            spinSpeed: randomSpinSpeed,\n            spinDirection: Random.coinToss([...baseSeed, seedIndexes.spinDirection]) ? 1 : -1,\n            rgb: getRandomRgb([...baseSeed, seedIndexes.colour]),\n            moons: [],\n          };\n\n          planetMoons.push(moon);\n        }\n\n        // now create the planet - ensuring the orbit is large enough to accomodate all the moons\n        const randomOrbitDirection = Random.coinToss([...baseSeed, seedIndexes.orbitDirection]) ? 1 : -1;\n        const randomSpinSpeed = Random.getRandomFloat(0.002, 0.006, [...baseSeed, seedIndexes.spinSpeed]);\n\n        // ensure orbits of planets/moons don't overlap\n        const prevPlanet =\n          solarSystem.planets.length > 0 ? solarSystem.planets[solarSystem.planets.length - 1] : undefined;\n        const currentPlanetMoonRadius = planetMoons[planetMoons.length - 1].orbitRadius;\n        const firstPlanetOrbitRadius = Random.getRandomInt(currentPlanetMoonRadius * 1.5, currentPlanetMoonRadius * 3, [\n          ...baseSeed,\n          seedIndexes.orbitRadius,\n          0,\n        ]);\n        const prevPlanetOrbitRadius = planetIndex === 0 ? firstPlanetOrbitRadius : prevPlanet!.orbitRadius;\n        const prevPlanetMoonRadius =\n          planetIndex === 0 ? 0 : prevPlanet!.moons[prevPlanet!.moons.length - 1].orbitRadius;\n        const orbitPadding = planetRadius;\n        // create the planet\n        const planet: SolarSystemEntity = {\n          id: this.getNextId(),\n          name: `Planet ${planetIndex + 1}`,\n          seed: baseSeed,\n          radius: planetRadius,\n          terrainHeight: 1,\n          orbitEntityId: sun.id,\n          orbitRadius: prevPlanetOrbitRadius + prevPlanetMoonRadius + currentPlanetMoonRadius + orbitPadding,\n          orbitDirection: randomOrbitDirection,\n          orbitSpeed: (numberOfPlanets - planetIndex) / numberOfPlanets,\n          orbitInclanation: Random.getRandomInt(0, 15, [...baseSeed, seedIndexes.orbitInclanation]),\n          orbitStartPosition: Random.getRandom([...baseSeed, seedIndexes.orbitStartPosition]),\n          spinSpeed: randomSpinSpeed,\n          spinDirection: Random.coinToss([...baseSeed, seedIndexes.spinDirection]) ? 1 : -1,\n          moons: planetMoons,\n        };\n\n        solarSystem.planets.push(planet);\n      }\n\n      solarSystem.suns.push(sun);\n    }\n\n    return solarSystem;\n  }\n}\n\nconst getRandomRgb = (seed: number[]): [number, number, number] => {\n  return [\n    Random.getRandomFloat(0.6, 1, [...seed, 0]),\n    Random.getRandomFloat(0.6, 1, [...seed, 1]),\n    Random.getRandomFloat(0.6, 1, [...seed, 2]),\n  ];\n};\n","import { Entity } from \"./Entity\";\n\nexport class Moon extends Entity {\n  protected maxTerrainHeight = 5;\n\n  protected _dispose(): void {}\n\n  protected getMapColour(height: number, y: number): number[] {\n    const ratio = height / 64;\n\n    const { r, g, b } = this.params.colour!;\n\n    const rgba = [Math.floor(r * 255), Math.floor(g * 255), Math.floor(b * 255), 255];\n\n    return [rgba[0] * ratio, rgba[1] * ratio, rgba[2] * ratio, rgba[3]];\n  }\n}\n","import { Random } from \"../Random\";\nimport { Entity } from \"./Entity\";\n\nexport class ClassM extends Entity {\n  protected maxTerrainHeight = this.radius / 16;\n\n  protected _dispose(): void {}\n\n  private colours = {\n    oceanDark: this.getRandomColour(0),\n    oceanLight: this.getRandomColour(1),\n    beachDark: this.getRandomColour(2),\n    beachLight: this.getRandomColour(3),\n    forestDark: this.getRandomColour(4),\n    forestLight: this.getRandomColour(5),\n    jungleDark: this.getRandomColour(6),\n    jungleLight: this.getRandomColour(7),\n    savannahDark: this.getRandomColour(8),\n    savannahLight: this.getRandomColour(9),\n    desertDark: this.getRandomColour(10),\n    desertLight: this.getRandomColour(11),\n    snowDark: this.getRandomColour(12),\n    snowLight: this.getRandomColour(13),\n  };\n\n  protected getMapColour(height: number, y: number) {\n    const colour = this.getColourForHeight(height);\n    return colour;\n  }\n\n  private getColourForHeight(height: number) {\n    const levels = [\n      // sea\n      {\n        min: 0,\n        max: 60,\n        dark: this.colours.oceanDark,\n        light: this.colours.oceanLight,\n      },\n      // beach\n      {\n        min: 60,\n        max: 70,\n        dark: this.colours.oceanLight,\n        light: this.colours.beachLight,\n      },\n      // forest\n      {\n        min: 70,\n        max: 110,\n        dark: this.colours.forestDark,\n        light: this.colours.forestLight,\n      },\n      // jungle\n      {\n        min: 110,\n        max: 120,\n        dark: this.colours.jungleDark,\n        light: this.colours.jungleLight,\n      },\n      // savannah\n      {\n        min: 120,\n        max: 140,\n        dark: this.colours.savannahDark,\n        light: this.colours.savannahLight,\n      },\n      // desert\n      {\n        min: 120,\n        max: 150,\n        dark: this.colours.desertDark,\n        light: this.colours.desertLight,\n      },\n    ];\n\n    for (const level of levels) {\n      if (height < level.max) {\n        return this.getRangeColour(level, height);\n      }\n    }\n\n    return this.colours.snowLight;\n  }\n\n  private getRandomColour(colIndex: number) {\n    const seed = [...this.params.baseSeed, colIndex];\n\n    const min = 0.2;\n    return [\n      255 * Random.getRandomFloat(min, 1, [...seed, 0]),\n      255 * Random.getRandomFloat(min, 1, [...seed, 1]),\n      255 * Random.getRandomFloat(min, 1, [...seed, 2]),\n      255,\n    ];\n  }\n}\n","import { Entity, EntityParams, EntityType } from \"./Entity\";\n\nexport class Sun extends Entity {\n  protected maxTerrainHeight = 0;\n\n  constructor(id: number, name: string, entityType: EntityType, radius: number, params: EntityParams) {\n    super(id, name, entityType, radius, params);\n\n    this.params.terrainHeight = 0;\n    this.params.texturePath = \"assets/sun.jpg\";\n  }\n\n  protected _dispose(): void {}\n\n  protected getMapColour(height: number, y: number): number[] {\n    const { r, g, b } = this.params.colour!;\n    const rgba = [Math.floor(r * 255), Math.floor(g * 255), Math.floor(b * 255), 255];\n    return [rgba[0], rgba[1], rgba[2], rgba[3]];\n  }\n}\n","import { Entity } from \"./Entity\";\n\nconst colours = {\n  oceanDark: [0, 24, 168, 255],\n  oceanLight: [0, 105, 148, 255],\n  beachDark: [140, 129, 95, 255],\n  beachLight: [221, 202, 146, 255],\n  forestDark: [0, 66, 37, 255],\n  forestLight: [0, 127, 72, 255],\n  jungleDark: [48, 102, 79, 255],\n  jungleLight: [57, 122, 94, 255],\n  savannahDark: [136, 155, 105, 255],\n  savannahLight: [165, 189, 126, 255],\n  desertDark: [175, 175, 144, 255],\n  desertLight: [198, 198, 167, 255],\n  snowDark: [200, 200, 200, 255],\n  snowLight: [255, 255, 255, 255],\n};\n\nexport class Earth extends Entity {\n  protected maxTerrainHeight = this.radius / 16;\n\n  protected _dispose(): void {}\n\n  protected getMapColour(height: number, y: number) {\n    const colour = this.getColourForHeight(height);\n\n    // if (y > this.textureHeight * 0.9) {\n    //   return this.lerpColour(colour, colours.snow, y / this.textureHeight);\n    // }\n\n    return colour;\n  }\n\n  private getColourForHeight(height: number) {\n    const levels = [\n      // sea\n      {\n        min: 0,\n        max: 60,\n        dark: colours.oceanDark,\n        light: colours.oceanLight,\n      },\n      // beach\n      {\n        min: 60,\n        max: 70,\n        dark: colours.oceanLight,\n        light: colours.beachLight,\n      },\n      // forest\n      {\n        min: 70,\n        max: 110,\n        dark: colours.forestDark,\n        light: colours.forestLight,\n      },\n      // jungle\n      {\n        min: 110,\n        max: 120,\n        dark: colours.jungleDark,\n        light: colours.jungleLight,\n      },\n      // savannah\n      {\n        min: 120,\n        max: 140,\n        dark: colours.savannahDark,\n        light: colours.savannahLight,\n      },\n      // desert\n      {\n        min: 120,\n        max: 150,\n        dark: colours.desertDark,\n        light: colours.desertLight,\n      },\n    ];\n\n    for (const level of levels) {\n      if (height < level.max) {\n        return this.getRangeColour(level, height);\n      }\n    }\n\n    return colours.snowLight;\n  }\n}\n","import \"normalize.css\";\nimport \"./index.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { App } from \"./components/App\";\nimport { SolarSystemApp } from \"./app/SolarSystemApp\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App solarSystemApp={new SolarSystemApp()}></App>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","import {\n  AmbientLight,\n  // AxesHelper,\n  Camera,\n  Clock,\n  Color,\n  CubeTextureLoader,\n  MathUtils,\n  PerspectiveCamera,\n  PointLight,\n  Scene,\n  Texture,\n  Vector3,\n  WebGLRenderer,\n} from \"three\";\nimport { Entity, EntityParams, EntityType } from \"./planets/Entity\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport Stats from \"three/examples/jsm/libs/stats.module\";\nimport { GUI } from \"three/examples/jsm/libs/dat.gui.module\";\n\nimport { SolarSystem, SolarSystemGenerator } from \"./SolarSystemGenerator\";\nimport { Moon } from \"./planets/Moon\";\nimport { ClassM } from \"./planets/ClassM\";\nimport { Sun } from \"./planets/Sun\";\nimport { Earth } from \"./planets/Earth\";\n\nconst sunColour = 0xf7e096;\n\nexport class SolarSystemApp {\n  private solarSystem!: SolarSystem;\n\n  private isRunning = false;\n  private scene!: Scene;\n  private camera!: Camera;\n  private clock = new Clock();\n  private bodies: Entity[] = [];\n  private renderer!: WebGLRenderer;\n  private orbitControls!: OrbitControls;\n  private stats!: Stats;\n  private showPlanetId!: number;\n  private cameraInitialPosition!: [number, number, number];\n  private spaceTexture!: Texture;\n  private gui!: GUI;\n  private guiViewActionsFolder!: GUI;\n  // private planetInfoBox: HTMLElement;\n\n  private ambientLight!: AmbientLight;\n  private pointLight!: PointLight;\n\n  // events\n  public onInitialising!: () => void;\n  public onInitialised!: () => void;\n\n  private options = {\n    seed: 2,\n    simulationSpeed: 3,\n    showOrbits: true,\n    followPlanetName: \"Sun 1\",\n  };\n\n  private buttonHandlers = {\n    resetView: () => {\n      this.resetView();\n    },\n    newSeed: () => {\n      this.options.seed = MathUtils.randInt(100000, 999999);\n      this.init();\n    },\n    changeSeed: () => {\n      this.init();\n    },\n  };\n\n  constructor() {\n    this.solarSystem = new SolarSystemGenerator().generate(this.options.seed);\n\n    this.scene = new Scene();\n    this.scene.background = new Color().setHex(0x000000);\n\n    const loader = new CubeTextureLoader();\n    this.spaceTexture = loader.load([\n      \"assets/kurt/space_ft.png\",\n      \"assets/kurt/space_bk.png\",\n      \"assets/kurt/space_up.png\",\n      \"assets/kurt/space_dn.png\",\n      \"assets/kurt/space_rt.png\",\n      \"assets/kurt/space_lf.png\",\n    ]);\n    this.scene.background = this.spaceTexture;\n\n    // Camera\n    this.camera = new Camera();\n    this.camera = new PerspectiveCamera(25, window.innerWidth / window.innerHeight, 50, 1e7);\n    this.cameraInitialPosition = [0, this.solarSystem.suns[0].radius * 6, this.solarSystem.suns[0].radius * 20];\n    this.camera.position.set(...this.cameraInitialPosition);\n\n    this.camera.lookAt(0, 0, 0);\n\n    // Renderer\n    this.renderer = new WebGLRenderer({\n      powerPreference: \"high-performance\",\n      antialias: true,\n    });\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n    this.renderer.shadowMap.enabled = true;\n    document.body.appendChild(this.renderer.domElement);\n\n    // Controls\n    this.orbitControls = new OrbitControls(this.camera, this.renderer.domElement);\n\n    // Stats\n    this.stats = new (Stats as any)();\n    document.body.appendChild(this.stats.dom);\n\n    // UI\n    this.gui = new GUI();\n    this.gui.width = 300;\n\n    this.gui.add(this.buttonHandlers, \"newSeed\").name(\"New Seed\");\n    this.gui.add(this.options, \"seed\").name(\"Seed\").onFinishChange(this.buttonHandlers.changeSeed);\n    this.gui.add(this.options, \"simulationSpeed\", 0, 20, 0.1).name(\"Simulation Speed\");\n\n    // this.planetInfoBox = document.createElement(\"div\");\n    // this.planetInfoBox.className = \"planet-info-box\";\n    // this.planetInfoBox.innerHTML = `\n    // <h1 class='planet-info-box__name'></h1>\n    // <div class='planet-info-box__prop-container'>\n\n    // </div>\n    // `;\n    // document.body.appendChild(this.planetInfoBox);\n  }\n\n  public init = () => {\n    if (this.onInitialising) {\n      this.onInitialising();\n    }\n\n    this.gui.updateDisplay();\n    this.clearScene();\n    this.solarSystem = new SolarSystemGenerator().generate(this.options.seed);\n\n    this.resetView();\n\n    this._init().then(() => {\n      this.animate();\n      if (this.onInitialised) {\n        this.onInitialised();\n      }\n    });\n  };\n\n  private _init = async () => {\n    this.showPlanetId = -1;\n\n    // var axesHelper = new AxesHelper(5000);\n    // scene.add(axesHelper);\n\n    // Lighting\n    this.ambientLight = new AmbientLight(0xffffff, 0.15);\n    this.scene.add(this.ambientLight);\n\n    this.pointLight = new PointLight(sunColour, 1);\n    this.pointLight.position.set(0, 0, 0);\n    this.scene.add(this.pointLight);\n\n    await this.createSolarSystem();\n\n    const planets = this.bodies.filter((b) => b.entityType === EntityType.Planet);\n    const sun = this.bodies.filter((b) => b.entityType === EntityType.Sun)[0];\n\n    this.guiViewActionsFolder = this.gui.addFolder(\"View Actions\");\n    this.guiViewActionsFolder.open();\n    this.guiViewActionsFolder.add(this.options, \"showOrbits\").name(\"Show Orbits\").onChange(this.toggleOrbits);\n    this.guiViewActionsFolder\n      .add(this.options, \"followPlanetName\", [sun.name, ...planets.map((p) => p.name)])\n      .name(\"Centre of View\");\n    this.guiViewActionsFolder.add(this.buttonHandlers, \"resetView\").name(\"Reset View\");\n\n    for (const planet of planets) {\n      this.guiViewActionsFolder.add(planet, \"show\").name(planet.name || \"A Planet\");\n    }\n\n    this.isRunning = true;\n  };\n\n  public animate = () => {\n    if (!this.isRunning) {\n      return;\n    }\n    requestAnimationFrame(this.animate);\n\n    this.bodies.forEach((body) => {\n      body.animate(this.clock, this.options.simulationSpeed / 5);\n    });\n\n    this.orbitControls.update();\n    this.stats.update();\n\n    if (this.showPlanetId > -1) {\n      const planet = this.bodies.find((b) => b.id === this.showPlanetId);\n      if (planet) {\n        const pos = new Vector3();\n        planet.sphere.getWorldPosition(pos);\n        this.camera.position.set(pos.x + planet.radius * 2, pos.y + planet.radius * 2, pos.z + planet.radius * 8);\n        this.camera.lookAt(pos.x, pos.y, pos.z);\n      }\n    } else {\n      const planet = this.bodies.find((b) => b.name === this.options.followPlanetName);\n      if (planet) {\n        const pos = new Vector3();\n        planet.sphere.getWorldPosition(pos);\n        this.orbitControls.target.set(pos.x, pos.y, pos.z);\n      }\n    }\n\n    this.renderer.render(this.scene, this.camera);\n  };\n\n  private clearScene = () => {\n    this.isRunning = false;\n\n    try {\n      this.gui.removeFolder(this.guiViewActionsFolder);\n      this.guiViewActionsFolder.destroy();\n    } catch (error) {}\n\n    this.ambientLight?.dispose();\n    this.pointLight?.dispose();\n\n    for (const body of this.bodies) {\n      body.dispose();\n    }\n    this.bodies = [];\n    this.scene.clear();\n\n    this.renderer.render(this.scene, this.camera);\n  };\n\n  private resetView = () => {\n    this.showPlanetId = -1;\n    this.camera.position.set(...this.cameraInitialPosition);\n    this.orbitControls = new OrbitControls(this.camera, this.renderer.domElement);\n  };\n\n  private handleShowPlanet = (id: number) => {\n    this.showPlanetId = id;\n    // const ssPlanet = this.solarSystem.planets.find((p) => p.id === id) as SolarSystemEntity;\n\n    // document.body.getElementsByClassName(\"planet-info-box__name\")[0].textContent = ssPlanet.name;\n\n    // let html = \"\";\n    // [[\"Radius\", ssPlanet.radius]].forEach((prop: any) => {\n    //   html += `<p class='planet-info-box__prop-name'>${prop[0]}</p>`;\n    //   html += `<p class='planet-info-box__prop-value'>${prop[1]}</p>`;\n    // });\n\n    // document.body.getElementsByClassName(\"planet-info-box__prop-container\")[0].innerHTML = html;\n  };\n\n  private toggleOrbits = () => {\n    for (const body of this.bodies) {\n      if (body.orbit) {\n        body.orbit.opacity = body.orbit.opacity === 0 ? 0.5 : 0;\n      }\n    }\n  };\n\n  private createSolarSystem = async () => {\n    const maxPlanetOrbitSpeed = 0.005; // Random.getRandomFloat(0.001, 0.005, [this.options.seed, seedIndexes.orbitSpeed]);\n    const maxMoonOrbitSpeed = 0.005; // Random.getRandomFloat(0.001, 0.005, [this.options.seed, seedIndexes.orbitSpeed]);\n\n    for (const sun of this.solarSystem.suns) {\n      const sunEntity = new Sun(sun.id, sun.name, EntityType.Sun, sun.radius, {\n        baseSeed: sun.seed,\n        position: sun.position ? new Vector3(...sun.position) : new Vector3(0, 0, 0),\n        colour: new Color(0xffca20),\n        orbitEntity: false,\n        orbitRadius: sun.orbitRadius,\n        orbitDirection: sun.orbitDirection,\n        orbitSpeed: sun.orbitSpeed,\n        orbitInclanation: sun.orbitInclanation,\n        orbitStartPosition: sun.orbitStartPosition,\n        spinSpeed: sun.spinSpeed,\n        spinDirection: sun.spinDirection,\n      });\n      await sunEntity.create();\n      this.bodies.push(sunEntity);\n      this.scene.add(sunEntity.entity);\n\n      for (let planetIndex = 0; planetIndex < this.solarSystem.planets.length; planetIndex++) {\n        const planet = this.solarSystem.planets[planetIndex];\n\n        const orbitEntity = this.bodies.find((b) => b.id === planet.orbitEntityId) as Entity;\n        const planetParams: EntityParams = {\n          baseSeed: planet.seed,\n          position: planet.position ? new Vector3(...planet.position) : orbitEntity.entity.position,\n          terrainHeight: planet.terrainHeight,\n          orbitEntity: orbitEntity,\n          orbitRadius: planet.orbitRadius,\n          orbitDirection: planet.orbitDirection,\n          orbitSpeed: planet.orbitSpeed * maxPlanetOrbitSpeed,\n          orbitInclanation: planet.orbitInclanation,\n          orbitStartPosition: planet.orbitStartPosition,\n          spinSpeed: planet.spinSpeed,\n          spinDirection: planet.spinDirection,\n          onShow: this.handleShowPlanet,\n        };\n\n        const planetEntity =\n          planetIndex === 2\n            ? new Earth(planet.id, planet.name, EntityType.Planet, planet.radius, planetParams)\n            : new ClassM(planet.id, planet.name, EntityType.Planet, planet.radius, planetParams);\n        await planetEntity.create();\n\n        for (const moon of planet.moons) {\n          const orbitEntity = planetEntity;\n          const moonEntity = new Moon(moon.id, moon.name, EntityType.Moon, moon.radius, {\n            baseSeed: moon.seed,\n            position: moon.position ? new Vector3(...moon.position) : orbitEntity.entity.position,\n            colour: moon.rgb ? new Color(...moon.rgb) : new Color(1, 1, 1),\n            terrainHeight: moon.terrainHeight,\n            orbitEntity: orbitEntity,\n            orbitRadius: moon.orbitRadius,\n            orbitDirection: moon.orbitDirection,\n            orbitSpeed: moon.orbitSpeed * maxMoonOrbitSpeed,\n            orbitInclanation: moon.orbitInclanation,\n            orbitStartPosition: moon.orbitStartPosition,\n            spinSpeed: moon.spinSpeed,\n            spinDirection: planet.spinDirection,\n          });\n          await moonEntity.create();\n          this.bodies.push(moonEntity);\n          // add the moon to the planet (so it follows the planet's orbit)\n          planetEntity.entity.add(moonEntity.entity);\n        }\n\n        this.bodies.push(planetEntity);\n        this.scene.add(planetEntity.entity);\n      }\n    }\n  };\n}\n"],"sourceRoot":""}