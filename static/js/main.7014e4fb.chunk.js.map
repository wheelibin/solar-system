{"version":3,"sources":["app/planets/Entity.ts","app/NoiseMapGenerator.ts","app/Random.ts","app/SolarSystemGenerator.ts","app/planets/Moon.ts","app/planets/ClassM.ts","app/planets/Sun.ts","app/planets/Earth.ts","index.tsx","app/App.ts"],"names":["EntityType","NoiseMapGenerator","seed","noiseGenerator","this","SimplexNoise","width","height","map","x","y","noise","getMixedFrequencyNoise","Math","pow","makeSeamlessVertically","makeSeamlessHorizontally","frequency","xOffset","yOffset","_x","_y","amplitude","n","noise2D","frequencies","sumOfAmplitudes","reduce","previous","index","getNoise","noiseMap","stitchWidth","length","v","o","MathUtils","lerp","stitchHeight","k","ceil","s1","s2","c","Entity","id","entityType","radius","params","entity","sphere","orbit","textureWidth","textureHeight","loader","TextureLoader","sphereGeometry","orbitGeometry","material","heightMapTexture","colourMapTexture","texture","Group","terrainHeight","terrainMaps","generateTerrainMaps","CanvasTexture","heightMap","canvas","mapping","EquirectangularReflectionMapping","MeshPhongMaterial","bumpMap","bumpScale","displacementMap","displacementScale","texturePath","loadAsync","MeshBasicMaterial","color","colour","SphereBufferGeometry","Mesh","castShadow","receiveShadow","orbitEntity","orbitEntityPos","position","orbitRadius","createOrbitCircle","add","set","z","clock","getElapsedTime","orbitSpeed","orbitDirection","rotation","spinSpeed","onShow","dispose","_dispose","heightMapContext","getCanvasContext","heightMapImageData","createImageData","heightMapData","data","colourMapContext","colourMapImageData","colourMapData","baseSeed","acc","cur","generateNoiseMap","i","colourValue","heightColour","ci","mapColour","getMapColour","putImageData","level","lerpColour","dark","light","min","max","col1","col2","ratio","convertToColor","toArray","Color","setRGB","ctx","document","createElement","getContext","fillStyle","fillRect","BufferGeometry","verts","LineBasicMaterial","opacity","transparent","theta","PI","push","cos","sin","vertices","Float32Array","setAttribute","BufferAttribute","Line","Random","mt19937","factory","rand","floor","getRandom","x0","y0","z0","u","random","phi","acos","seedIndexes","SolarSystemGenerator","EntityId","solarSystem","suns","planets","getNextId","name","moons","orbitEntityId","getRandomFloat","sunIndex","sun","numberOfPlanets","getRandomInt","planetIndex","planetRadius","numberOfMoons","planetMoons","moonIndex","randomOrbitDirection","coinToss","randomOrbitSpeed","randomSpinSpeed","minOrbitRadius","moon","rgb","getRandomRgb","orbitRadiusInc","prevPlanet","undefined","prevPlanetOrbitRadius","prevPlanetMoonRadius","currentPlanetMoonRadius","orbitPadding","planet","Moon","r","g","b","rgba","ClassM","colours","oceanDark","getRandomColour","oceanLight","beachDark","beachLight","forestDark","forestLight","jungleDark","jungleLight","savannahDark","savannahLight","desertDark","desertLight","snowDark","snowLight","getColourForHeight","getRangeColour","colIndex","Sun","Earth","app","isRunning","scene","camera","Clock","bodies","renderer","orbitControls","stats","showPlanetId","cameraInitialPosition","spaceTexture","gui","guiViewActionsFolder","ambientLight","pointLight","options","buttonHandlers","resetView","OrbitControls","domElement","toggleOrbits","body","newSeed","randInt","reset","changeSeed","init","a","AmbientLight","PointLight","createSolarSystem","addFolder","open","filter","Planet","ssPlanet","find","p","animate","requestAnimationFrame","forEach","update","pos","Vector3","getWorldPosition","lookAt","render","clearScene","removeFolder","destroy","error","clear","updateDisplay","generate","then","handleShowPlanet","sunEntity","create","planetParams","planetEntity","moonEntity","Scene","background","setHex","CubeTextureLoader","load","Camera","PerspectiveCamera","window","innerWidth","innerHeight","WebGLRenderer","powerPreference","antialias","setSize","setPixelRatio","devicePixelRatio","shadowMap","enabled","appendChild","Stats","dom","GUI","onFinishChange"],"mappings":"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","file":"static/js/main.7014e4fb.chunk.js","sourcesContent":["import {\n  CanvasTexture,\n  Clock,\n  Color,\n  EquirectangularReflectionMapping,\n  Group,\n  Line,\n  LineBasicMaterial,\n  Material,\n  Mesh,\n  MeshBasicMaterial,\n  MeshPhongMaterial,\n  SphereBufferGeometry,\n  TextureLoader,\n  Vector3,\n  BufferGeometry,\n  BufferAttribute,\n  Texture,\n} from \"three\";\n\nimport { NoiseMapGenerator } from \"../NoiseMapGenerator\";\n\nexport enum EntityType {\n  Sun,\n  Planet,\n  Moon,\n}\n\ntype TerrainMaps = {\n  heightMap: CanvasRenderingContext2D;\n  map: CanvasRenderingContext2D;\n};\n\nexport type EntityParams = {\n  baseSeed: number[];\n  position: Vector3;\n  terrainHeight: number;\n  orbitEntity: Entity | false;\n  orbitDirection: number;\n  orbitSpeed: number;\n  orbitRadius: number;\n  spinSpeed: number;\n\n  colour?: Color;\n  castShadow?: boolean;\n  receiveShadow?: boolean;\n  texturePath?: string;\n  onShow?: (id: number) => void;\n};\n\nexport abstract class Entity {\n  public id: number;\n  public entityType: EntityType;\n  public entity: Group;\n  public params: EntityParams;\n  public radius: number;\n  public sphere!: Mesh;\n  public orbit!: Material;\n\n  protected textureWidth: number;\n  protected textureHeight: number;\n\n  private loader = new TextureLoader();\n  private sphereGeometry!: SphereBufferGeometry;\n  private orbitGeometry!: BufferGeometry;\n  private material!: Material;\n  private heightMapTexture!: CanvasTexture;\n  private colourMapTexture!: CanvasTexture;\n  private texture!: Texture;\n\n  constructor(id: number, entityType: EntityType, radius: number, params: EntityParams) {\n    this.id = id;\n    this.entityType = entityType;\n    this.radius = radius;\n    this.params = params;\n\n    this.entity = new Group();\n\n    this.textureWidth = 512;\n    this.textureHeight = 256;\n  }\n\n  public async create() {\n    if (this.params.terrainHeight > 0) {\n      const terrainMaps = this.generateTerrainMaps();\n\n      this.heightMapTexture = new CanvasTexture(terrainMaps.heightMap.canvas);\n      this.colourMapTexture = new CanvasTexture(terrainMaps.map.canvas);\n\n      this.heightMapTexture.mapping = EquirectangularReflectionMapping;\n      this.colourMapTexture.mapping = EquirectangularReflectionMapping;\n\n      this.material = new MeshPhongMaterial({\n        bumpMap: this.heightMapTexture,\n        bumpScale: this.params.terrainHeight,\n        map: this.colourMapTexture,\n        displacementMap: this.heightMapTexture,\n        displacementScale: this.params.terrainHeight,\n      });\n    } else {\n      if (this.params.texturePath) {\n        this.texture = await this.loader.loadAsync(this.params.texturePath);\n        this.material = new MeshBasicMaterial({ map: this.texture, color: this.params.colour });\n      } else {\n        this.material = new MeshBasicMaterial({\n          color: this.params.colour,\n        });\n      }\n    }\n\n    this.sphereGeometry = new SphereBufferGeometry(this.radius, 64, 48);\n    this.sphere = new Mesh(this.sphereGeometry, this.material);\n\n    this.sphere.castShadow = !!this.params.castShadow;\n    this.sphere.receiveShadow = !!this.params.receiveShadow;\n\n    // const geom = new PlaneGeometry(this.textureWidth, this.textureHeight);\n    // this.sphere = new Mesh(geom, material);\n\n    if (this.params.orbitEntity) {\n      const orbitEntityPos = this.params.orbitEntity.sphere.position;\n      const orbitRadius = this.params.orbitRadius || 400;\n\n      // create an orbit cirlce and add it to the entity\n      const orbit = this.createOrbitCircle(orbitRadius);\n      this.entity.add(orbit);\n\n      // position the sphere at the edge of the orbit circle\n      this.sphere.position.set(orbitRadius, 0, 0);\n\n      // position the whole entity at the orbit entity position\n      this.entity.position.set(orbitEntityPos.x, orbitEntityPos.y, orbitEntityPos.z);\n    }\n\n    this.entity.add(this.sphere);\n\n    return this;\n  }\n\n  public animate(clock: Clock) {\n    clock.getElapsedTime();\n\n    if (this.params.orbitEntity) {\n      const orbitSpeed = this.params.orbitSpeed;\n      const orbitDirection = this.params.orbitDirection;\n      this.entity.rotation.y += orbitSpeed * orbitDirection;\n    }\n\n    if (this.params.spinSpeed) {\n      this.sphere.rotation.y += this.params.spinSpeed;\n    }\n  }\n\n  public show() {\n    if (this.params.onShow) {\n      this.params.onShow(this.id);\n    }\n  }\n\n  protected abstract _dispose(): void;\n  public dispose() {\n    // geometries\n    this.sphereGeometry?.dispose();\n    this.orbitGeometry?.dispose();\n\n    // materials\n    this.orbit?.dispose();\n    this.material?.dispose();\n\n    // textures\n    this.heightMapTexture?.dispose();\n    this.colourMapTexture?.dispose();\n    this.texture?.dispose();\n\n    // call implemented dispose method\n    this._dispose();\n  }\n\n  protected generateTerrainMaps(): TerrainMaps {\n    const recordSize = 4;\n\n    const heightMapContext = this.getCanvasContext();\n    const heightMapImageData = heightMapContext.createImageData(this.textureWidth, this.textureHeight);\n    const heightMapData = heightMapImageData.data;\n\n    const colourMapContext = this.getCanvasContext();\n    const colourMapImageData = colourMapContext.createImageData(this.textureWidth, this.textureHeight);\n    const colourMapData = colourMapImageData.data;\n\n    const seed = [...this.params.baseSeed, 99999].reduce((acc, cur) => (acc += cur));\n    const ng = new NoiseMapGenerator(seed);\n    const noiseMap = ng.generateNoiseMap(this.textureWidth, this.textureHeight);\n\n    for (let i = 0; i < heightMapData.length; i += recordSize) {\n      const x = (i / recordSize) % this.textureWidth;\n      const y = ~~(i / recordSize / this.textureWidth);\n\n      const noise = noiseMap[x][y];\n      const generatedColourValue = 255 * noise;\n\n      let colourValue = generatedColourValue;\n\n      // RGBA\n      const heightColour = [colourValue, colourValue, colourValue, 255];\n      for (let ci = 0; ci < heightColour.length; ci++) {\n        heightMapData[i + ci] = heightColour[ci];\n      }\n\n      let mapColour = this.getMapColour(colourValue, y);\n\n      for (let ci = 0; ci < mapColour.length; ci++) {\n        colourMapData[i + ci] = mapColour[ci];\n      }\n    }\n\n    heightMapContext.putImageData(heightMapImageData, 0, 0);\n    colourMapContext.putImageData(colourMapImageData, 0, 0);\n\n    return {\n      heightMap: heightMapContext,\n      map: colourMapContext,\n    };\n  }\n\n  protected abstract getMapColour(height: number, y: number): number[];\n\n  protected getRangeColour(level: { min: number; max: number; dark: number[]; light: number[] }, height: number) {\n    return this.lerpColour(level.dark, level.light, (height - level.min) / (level.max - level.min));\n  }\n\n  protected lerpColour(col1: number[], col2: number[], ratio: number) {\n    const c = this.convertToColor(col1).lerp(this.convertToColor(col2), ratio);\n    return [...c.toArray(), 255];\n  }\n\n  protected convertToColor(colour: number[]) {\n    return new Color().setRGB(colour[0], colour[1], colour[2]);\n  }\n\n  protected getCanvasContext() {\n    const ctx = document.createElement(\"canvas\").getContext(\"2d\") as CanvasRenderingContext2D;\n    ctx.canvas.width = this.textureWidth;\n    ctx.canvas.height = this.textureHeight;\n    ctx.fillStyle = \"#fff\";\n    ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    return ctx;\n  }\n\n  private createOrbitCircle(radius: number) {\n    var segmentCount = 128;\n    this.orbitGeometry = new BufferGeometry();\n    const verts = [];\n    this.orbit = new LineBasicMaterial({ color: 0xffffff, opacity: 0.5, transparent: true });\n\n    for (var i = 0; i <= segmentCount; i++) {\n      var theta = (i / segmentCount) * Math.PI * 2;\n      verts.push(Math.cos(theta) * radius, 0, Math.sin(theta) * radius);\n    }\n    const vertices = new Float32Array(verts);\n    this.orbitGeometry.setAttribute(\"position\", new BufferAttribute(vertices, 3));\n    return new Line(this.orbitGeometry, this.orbit);\n  }\n}\n","import SimplexNoise from \"simplex-noise\";\nimport { MathUtils } from \"three\";\n\nexport class NoiseMapGenerator {\n  private noiseGenerator: SimplexNoise;\n\n  constructor(seed?: number) {\n    this.noiseGenerator = new SimplexNoise(seed);\n  }\n\n  public generateNoiseMap(width: number, height: number): number[][] {\n    const map: number[][] = [];\n\n    for (let x = 0; x < width; x++) {\n      map[x] = [];\n      for (let y = 0; y < height; y++) {\n        // add noise at various frequencies\n        let noise = this.getMixedFrequencyNoise(\n          x,\n          y,\n          [0.01, 0.02, 0.04, 0.08, 0.16, 0.32, 0.64, 1.28]\n        );\n        noise = Math.pow(noise, 2.3);\n\n        map[x][y] = noise;\n      }\n    }\n\n    this.makeSeamlessVertically(map, height * 0.2);\n    this.makeSeamlessHorizontally(map, width * 0.05);\n\n    return map;\n  }\n\n  private getNoise(\n    x: number,\n    y: number,\n    frequency: number,\n    xOffset: number = 0,\n    yOffset: number = 0\n  ) {\n    const _x = frequency * x + xOffset;\n    const _y = frequency * y + yOffset;\n    const amplitude = 1 / frequency;\n\n    // get noise in the range 0-1\n    const n = this.noiseGenerator.noise2D(_x, _y) / 2 + 0.5;\n\n    let noise = amplitude * n;\n    return noise;\n  }\n\n  private getMixedFrequencyNoise(x: number, y: number, frequencies: number[]) {\n    let sumOfAmplitudes = 0;\n    const noise = frequencies.reduce(\n      (previous: number, frequency: number, index: number) => {\n        sumOfAmplitudes += 1 / frequency;\n\n        // add offsets so different frequencies (octaves)\n        // sample from a different part of the noise space\n        const xOffset = index * 10;\n        const yOffset = index * 100;\n        return previous + this.getNoise(x, y, frequency, xOffset, yOffset);\n      },\n      0\n    );\n    return noise / sumOfAmplitudes;\n  }\n\n  // ported from here:\n  // https://medium.com/nerd-for-tech/making-a-seamless-perlin-noise-in-c-4cfc12a90f93\n  private makeSeamlessHorizontally(noiseMap: number[][], stitchWidth: number) {\n    const width = noiseMap.length;\n    const height = noiseMap[0].length;\n\n    // iterate on the stitch band (on the left\n    // of the noise)\n    for (let x = 0; x < stitchWidth; x++) {\n      // get the transparency value from\n      // a linear gradient\n      const v = x / stitchWidth;\n\n      for (let y = 0; y < height; y++) {\n        // compute the \"mirrored x position\":\n        // the far left is copied on the right\n        // and the far right on the left\n        const o = ~~(width - stitchWidth + x);\n        // copy the value on the right of the noise\n        noiseMap[o][y] = MathUtils.lerp(\n          noiseMap[o][y],\n          noiseMap[~~(stitchWidth - x)][y],\n          v\n        );\n      }\n    }\n  }\n\n  // ported from here:\n  // https://medium.com/nerd-for-tech/making-a-seamless-perlin-noise-in-c-4cfc12a90f93\n  private makeSeamlessVertically(noiseMap: number[][], stitchHeight: number) {\n    const width = noiseMap.length;\n    const height = noiseMap[0].length;\n\n    // iterate through the stitch band (both\n    // top and bottom sides are treated\n    // simultaneously because its mirrored)\n    for (let y = 0; y < stitchHeight; y++) {\n      // number of neighbour pixels to\n      // consider for the average (= kernel size)\n      const k = Math.ceil(stitchHeight - y);\n      // go through the entire row\n      for (let x = 0; x < width; x++) {\n        // compute the sum of pixel values\n        // in the top and the bottom bands\n        let s1 = 0.0;\n        let s2 = 0.0;\n        let c = 0;\n        for (let o = x - k; o < x + k; o++) {\n          if (o < 0 || o >= width) {\n            continue;\n          }\n\n          s1 += noiseMap[o][y];\n          s2 += noiseMap[o][height - y - 1];\n          c++;\n        }\n        // compute the means and assign them to\n        // the pixels in the top and the bottom\n        // rows\n        noiseMap[x][y] = s1 / c;\n        noiseMap[x][height - y - 1] = s2 / c;\n      }\n    }\n  }\n}\n","import mt19937 from \"@stdlib/random-base-mt19937\";\n\nconst MAX = 4294967295;\n\nexport class Random {\n  public static getRandom(seed: number[]) {\n    var rand = mt19937.factory({\n      seed: seed,\n    });\n\n    return rand() / MAX;\n  }\n\n  public static getRandomInt(min: number, max: number, seed: number[]) {\n    return Math.floor(Random.getRandom(seed) * (max - min + 1) + min);\n  }\n\n  public static getRandomFloat(min: number, max: number, seed: number[]) {\n    return Random.getRandom(seed) * (max - min) + min;\n  }\n\n  public static coinToss(seed: number[]) {\n    return Random.getRandom(seed) <= 0.5;\n  }\n\n  /**\n   * Gets a random point of a sphere, evenly distributed over the sphere.\n   * The sphere is centered at (x0,y0,z0) with the passed in radius.\n   * The returned point is returned as a three element array [x,y,z].\n   *\n   * @return [x,y,z]\n   */\n  public static getRandomPointInSphere(radius: number, x0: number, y0: number, z0: number) {\n    if (!x0) {\n      x0 = 0;\n    }\n    if (!y0) {\n      y0 = 0;\n    }\n    if (!z0) {\n      z0 = 0;\n    }\n\n    var u = Math.random();\n    var v = Math.random();\n    var theta = 2 * Math.PI * u;\n    var phi = Math.acos(1 - 2 * v);\n    var x = x0 + radius * Math.sin(phi) * Math.cos(theta);\n    var y = y0 + radius * Math.sin(phi) * Math.sin(theta);\n    var z = z0 + radius * Math.cos(phi);\n\n    return [x, y, z];\n  }\n}\n","import { Random } from \"./Random\";\n\ntype SolarSystemEntity = {\n  id: number;\n  name: string;\n  seed: number[];\n  radius: number;\n  terrainHeight: number;\n  moons: SolarSystemEntity[];\n  orbitEntityId: number;\n  orbitRadius: number;\n  orbitDirection: number;\n  orbitSpeed: number;\n  spinSpeed: number;\n\n  position?: [number, number, number];\n  rgb?: [number, number, number];\n};\n\nexport type SolarSystem = {\n  suns: SolarSystemEntity[];\n  planets: SolarSystemEntity[];\n};\n\nconst seedIndexes = {\n  radius: 0,\n  terrainHeight: 1,\n  colour: 2,\n  noiseMap: 3,\n  orbitDirection: 4,\n  orbitSpeed: 5,\n  spinSpeed: 6,\n  numberOfPlanets: 7,\n  orbitRadius: 8,\n};\n\nexport class SolarSystemGenerator {\n  private EntityId = 0;\n\n  private getNextId(): number {\n    this.EntityId++;\n    return this.EntityId;\n  }\n\n  public generate(seed: number): SolarSystem {\n    const solarSystem: SolarSystem = {\n      suns: [],\n      planets: [],\n    };\n\n    const suns: SolarSystemEntity[] = [\n      {\n        id: this.getNextId(),\n        name: `Sun ${this.EntityId}`,\n        seed: [seed, 0],\n        position: [0, 0, 0],\n        radius: 1280,\n        terrainHeight: 0,\n        moons: [],\n        orbitEntityId: 0,\n        orbitRadius: 0,\n        orbitSpeed: 0,\n        orbitDirection: 0,\n        spinSpeed: Random.getRandomFloat(0.0001, 0.0003, [...[seed, 0], seedIndexes.spinSpeed]),\n      },\n    ];\n\n    for (let sunIndex = 0; sunIndex < suns.length; sunIndex++) {\n      const sun = suns[sunIndex];\n\n      const numberOfPlanets = Random.getRandomInt(1, 9, [seed, sunIndex, seedIndexes.numberOfPlanets]);\n\n      for (let planetIndex = 0; planetIndex < numberOfPlanets; planetIndex++) {\n        const baseSeed = [seed, sunIndex, planetIndex];\n\n        const planetRadius = Random.getRandomInt(sun.radius * 0.1, sun.radius * 0.3, [...baseSeed, seedIndexes.radius]);\n        const numberOfMoons = Random.getRandomInt(1, 5, [...baseSeed, seedIndexes.numberOfPlanets]);\n\n        // create the moons for the planet\n        const planetMoons = [];\n        for (let moonIndex = 0; moonIndex < numberOfMoons; moonIndex++) {\n          const baseSeed = [seed, sunIndex, planetIndex, moonIndex];\n          const randomOrbitDirection = Random.coinToss([...baseSeed, seedIndexes.orbitDirection]) ? 1 : -1;\n          const randomOrbitSpeed = Random.getRandomFloat(0.001, 0.005, [...baseSeed, seedIndexes.orbitSpeed]);\n          const randomSpinSpeed = Random.getRandomFloat(0.001, 0.005, [...baseSeed, seedIndexes.spinSpeed]);\n          const minOrbitRadius = Random.getRandomInt(planetRadius * 3 * 0.5, planetRadius * 4, [\n            ...baseSeed,\n            seedIndexes.orbitRadius,\n            0,\n          ]);\n\n          const moon: SolarSystemEntity = {\n            id: this.getNextId(),\n            name: `Moon ${moonIndex}`,\n            seed: baseSeed,\n            radius: Random.getRandomInt(planetRadius / 24, planetRadius / 8, [...baseSeed, seedIndexes.radius]),\n            terrainHeight: Random.getRandomInt(1, 10, [...baseSeed, seedIndexes.terrainHeight]),\n            orbitEntityId: -1,\n            orbitRadius:\n              moonIndex === 0\n                ? minOrbitRadius\n                : planetMoons[moonIndex - 1].orbitRadius +\n                  Random.getRandomInt(minOrbitRadius * 0.2, minOrbitRadius, [...baseSeed, seedIndexes.orbitRadius, 1]),\n            orbitDirection: randomOrbitDirection,\n            orbitSpeed: randomOrbitSpeed,\n            spinSpeed: randomSpinSpeed,\n            rgb: getRandomRgb([...baseSeed, seedIndexes.colour]),\n            moons: [],\n          };\n\n          planetMoons.push(moon);\n        }\n\n        // now create the planet - ensuring the orbit is large enough to accomodate all the moons\n        const randomOrbitDirection = Random.coinToss([...baseSeed, seedIndexes.orbitDirection]) ? 1 : -1;\n        const randomOrbitSpeed = Random.getRandomFloat(0.001, 0.005, [...baseSeed, seedIndexes.orbitSpeed]);\n        const randomSpinSpeed = Random.getRandomFloat(0.002, 0.006, [...baseSeed, seedIndexes.spinSpeed]);\n        const orbitRadiusInc = Random.getRandomInt(\n          planetMoons[planetMoons.length - 1].orbitRadius * 1.1,\n          planetMoons[planetMoons.length - 1].orbitRadius * 2,\n          [...baseSeed, seedIndexes.orbitRadius, 0]\n        );\n\n        // ensure orbits of planets/moons don't overlap\n        const prevPlanet =\n          solarSystem.planets.length > 0 ? solarSystem.planets[solarSystem.planets.length - 1] : undefined;\n        const prevPlanetOrbitRadius = planetIndex === 0 ? orbitRadiusInc : prevPlanet!.orbitRadius;\n        const prevPlanetMoonRadius =\n          planetIndex === 0 ? 0 : prevPlanet!.moons[prevPlanet!.moons.length - 1].orbitRadius;\n        const currentPlanetMoonRadius = planetMoons[planetMoons.length - 1].orbitRadius;\n        const orbitPadding = planetRadius;\n\n        // create the planet\n        const planet: SolarSystemEntity = {\n          id: this.getNextId(),\n          name: `Planet ${planetIndex}`,\n          seed: baseSeed,\n          radius: planetRadius,\n          terrainHeight: 8,\n          orbitEntityId: sun.id,\n          orbitRadius: prevPlanetOrbitRadius + prevPlanetMoonRadius + currentPlanetMoonRadius + orbitPadding,\n          orbitDirection: randomOrbitDirection,\n          orbitSpeed: randomOrbitSpeed,\n          spinSpeed: randomSpinSpeed,\n          moons: planetMoons,\n        };\n\n        solarSystem.planets.push(planet);\n      }\n\n      solarSystem.suns.push(sun);\n    }\n\n    return solarSystem;\n  }\n}\n\nconst getRandomRgb = (seed: number[]): [number, number, number] => {\n  return [\n    Random.getRandomFloat(0.6, 1, [...seed, 0]),\n    Random.getRandomFloat(0.6, 1, [...seed, 1]),\n    Random.getRandomFloat(0.6, 1, [...seed, 2]),\n  ];\n};\n","import { Entity } from \"./Entity\";\n\nexport class Moon extends Entity {\n  protected _dispose(): void {}\n  protected getMapColour(height: number, y: number): number[] {\n    const ratio = height / 255;\n\n    const { r, g, b } = this.params.colour!;\n\n    const rgba = [Math.floor(r * 255), Math.floor(g * 255), Math.floor(b * 255), 255];\n\n    return [rgba[0] * ratio, rgba[1] * ratio, rgba[2] * ratio, rgba[3]];\n  }\n}\n","import { Random } from \"../Random\";\nimport { Entity } from \"./Entity\";\n\nexport class ClassM extends Entity {\n  protected _dispose(): void {}\n  private colours = {\n    oceanDark: this.getRandomColour(0),\n    oceanLight: this.getRandomColour(1),\n    beachDark: this.getRandomColour(2),\n    beachLight: this.getRandomColour(3),\n    forestDark: this.getRandomColour(4),\n    forestLight: this.getRandomColour(5),\n    jungleDark: this.getRandomColour(6),\n    jungleLight: this.getRandomColour(7),\n    savannahDark: this.getRandomColour(8),\n    savannahLight: this.getRandomColour(9),\n    desertDark: this.getRandomColour(10),\n    desertLight: this.getRandomColour(11),\n    snowDark: this.getRandomColour(12),\n    snowLight: this.getRandomColour(13),\n  };\n\n  protected getMapColour(height: number, y: number) {\n    const colour = this.getColourForHeight(height);\n    return colour;\n  }\n\n  private getColourForHeight(height: number) {\n    const levels = [\n      // sea\n      {\n        min: 0,\n        max: 60,\n        dark: this.colours.oceanDark,\n        light: this.colours.oceanLight,\n      },\n      // beach\n      {\n        min: 60,\n        max: 70,\n        dark: this.colours.oceanLight,\n        light: this.colours.beachLight,\n      },\n      // forest\n      {\n        min: 70,\n        max: 110,\n        dark: this.colours.forestDark,\n        light: this.colours.forestLight,\n      },\n      // jungle\n      {\n        min: 110,\n        max: 120,\n        dark: this.colours.jungleDark,\n        light: this.colours.jungleLight,\n      },\n      // savannah\n      {\n        min: 120,\n        max: 140,\n        dark: this.colours.savannahDark,\n        light: this.colours.savannahLight,\n      },\n      // desert\n      {\n        min: 120,\n        max: 150,\n        dark: this.colours.desertDark,\n        light: this.colours.desertLight,\n      },\n    ];\n\n    for (const level of levels) {\n      if (height < level.max) {\n        return this.getRangeColour(level, height);\n      }\n    }\n\n    return this.colours.snowLight;\n  }\n\n  private getRandomColour(colIndex: number) {\n    const seed = [...this.params.baseSeed, colIndex];\n\n    const min = 0.2;\n    return [\n      255 * Random.getRandomFloat(min, 1, [...seed, 0]),\n      255 * Random.getRandomFloat(min, 1, [...seed, 1]),\n      255 * Random.getRandomFloat(min, 1, [...seed, 2]),\n      255,\n    ];\n  }\n}\n","import { Entity } from \"./Entity\";\n\nexport class Sun extends Entity {\n  protected _dispose(): void {}\n  protected getMapColour(height: number, y: number): number[] {\n    const { r, g, b } = this.params.colour!;\n    const rgba = [Math.floor(r * 255), Math.floor(g * 255), Math.floor(b * 255), 255];\n    return [rgba[0], rgba[1], rgba[2], rgba[3]];\n  }\n}\n","import { Entity } from \"./Entity\";\n\nconst colours = {\n  oceanDark: [0, 24, 168, 255],\n  oceanLight: [0, 105, 148, 255],\n  beachDark: [140, 129, 95, 255],\n  beachLight: [221, 202, 146, 255],\n  forestDark: [0, 66, 37, 255],\n  forestLight: [0, 127, 72, 255],\n  jungleDark: [48, 102, 79, 255],\n  jungleLight: [57, 122, 94, 255],\n  savannahDark: [136, 155, 105, 255],\n  savannahLight: [165, 189, 126, 255],\n  desertDark: [175, 175, 144, 255],\n  desertLight: [198, 198, 167, 255],\n  snowDark: [200, 200, 200, 255],\n  snowLight: [255, 255, 255, 255],\n};\n\nexport class Earth extends Entity {\n  protected _dispose(): void {}\n  protected getMapColour(height: number, y: number) {\n    const colour = this.getColourForHeight(height);\n\n    // if (y > this.textureHeight * 0.9) {\n    //   return this.lerpColour(colour, colours.snow, y / this.textureHeight);\n    // }\n\n    return colour;\n  }\n\n  private getColourForHeight(height: number) {\n    const levels = [\n      // sea\n      {\n        min: 0,\n        max: 60,\n        dark: colours.oceanDark,\n        light: colours.oceanLight,\n      },\n      // beach\n      {\n        min: 60,\n        max: 70,\n        dark: colours.oceanLight,\n        light: colours.beachLight,\n      },\n      // forest\n      {\n        min: 70,\n        max: 110,\n        dark: colours.forestDark,\n        light: colours.forestLight,\n      },\n      // jungle\n      {\n        min: 110,\n        max: 120,\n        dark: colours.jungleDark,\n        light: colours.jungleLight,\n      },\n      // savannah\n      {\n        min: 120,\n        max: 140,\n        dark: colours.savannahDark,\n        light: colours.savannahLight,\n      },\n      // desert\n      {\n        min: 120,\n        max: 150,\n        dark: colours.desertDark,\n        light: colours.desertLight,\n      },\n    ];\n\n    for (const level of levels) {\n      if (height < level.max) {\n        return this.getRangeColour(level, height);\n      }\n    }\n\n    return colours.snowLight;\n  }\n}\n","import \"./index.css\";\n\nimport { App } from \"./app/App\";\n\nconst app = new App();\n\napp.init().then(() => {\n  app.animate();\n});\n","import {\n  AmbientLight,\n  // AxesHelper,\n  Camera,\n  Clock,\n  Color,\n  CubeTextureLoader,\n  MathUtils,\n  PerspectiveCamera,\n  PointLight,\n  Scene,\n  Texture,\n  Vector3,\n  WebGLRenderer,\n} from \"three\";\nimport { Entity, EntityParams, EntityType } from \"./planets/Entity\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport Stats from \"three/examples/jsm/libs/stats.module\";\nimport { GUI } from \"three/examples/jsm/libs/dat.gui.module\";\n\nimport { SolarSystem, SolarSystemGenerator } from \"./SolarSystemGenerator\";\nimport { Moon } from \"./planets/Moon\";\nimport { ClassM } from \"./planets/ClassM\";\nimport { Sun } from \"./planets/Sun\";\nimport { Earth } from \"./planets/Earth\";\n\nconst sunColour = 0xf7e096;\n\nexport class App {\n  private solarSystem!: SolarSystem;\n\n  private isRunning = false;\n  private scene!: Scene;\n  private camera!: Camera;\n  private clock = new Clock();\n  private bodies: Entity[] = [];\n  private renderer!: WebGLRenderer;\n  private orbitControls!: OrbitControls;\n  private stats!: Stats;\n  private showPlanetId!: number;\n  private cameraInitialPosition!: [number, number, number];\n  private spaceTexture!: Texture;\n  private gui!: GUI;\n  private guiViewActionsFolder!: GUI;\n\n  private ambientLight!: AmbientLight;\n  private pointLight!: PointLight;\n\n  private options = {\n    seed: 2,\n  };\n\n  private buttonHandlers = {\n    resetView: () => {\n      this.showPlanetId = -1;\n      this.camera.position.set(...this.cameraInitialPosition);\n      this.orbitControls = new OrbitControls(this.camera, this.renderer.domElement);\n    },\n    toggleOrbits: () => {\n      for (const body of this.bodies) {\n        if (body.orbit) {\n          body.orbit.opacity = body.orbit.opacity === 0 ? 0.5 : 0;\n        }\n      }\n    },\n    newSeed: () => {\n      this.options.seed = MathUtils.randInt(10000, 100000);\n      this.reset();\n    },\n    changeSeed: () => {\n      this.reset();\n    },\n  };\n\n  constructor() {\n    this.solarSystem = new SolarSystemGenerator().generate(this.options.seed);\n\n    this.scene = new Scene();\n    this.scene.background = new Color().setHex(0x000000);\n\n    const loader = new CubeTextureLoader();\n    this.spaceTexture = loader.load([\n      \"assets/kurt/space_ft.png\",\n      \"assets/kurt/space_bk.png\",\n      \"assets/kurt/space_up.png\",\n      \"assets/kurt/space_dn.png\",\n      \"assets/kurt/space_rt.png\",\n      \"assets/kurt/space_lf.png\",\n    ]);\n    this.scene.background = this.spaceTexture;\n\n    // Camera\n    this.camera = new Camera();\n    this.camera = new PerspectiveCamera(25, window.innerWidth / window.innerHeight, 50, 1e7);\n    this.cameraInitialPosition = [0, this.solarSystem.suns[0].radius * 6, this.solarSystem.suns[0].radius * 20];\n    this.camera.position.set(...this.cameraInitialPosition);\n\n    this.camera.lookAt(0, 0, 0);\n\n    // Renderer\n    this.renderer = new WebGLRenderer({\n      powerPreference: \"high-performance\",\n      antialias: true,\n    });\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n    this.renderer.shadowMap.enabled = true;\n    document.body.appendChild(this.renderer.domElement);\n\n    // Controls\n    this.orbitControls = new OrbitControls(this.camera, this.renderer.domElement);\n\n    // Stats\n    this.stats = new (Stats as any)();\n    document.body.appendChild(this.stats.dom);\n\n    // UI\n    this.gui = new GUI();\n\n    this.gui.add(this.buttonHandlers, \"newSeed\").name(\"New Seed\");\n    this.gui.add(this.options, \"seed\").name(\"Seed\").onFinishChange(this.buttonHandlers.changeSeed);\n  }\n\n  public init = async () => {\n    this.showPlanetId = -1;\n\n    // var axesHelper = new AxesHelper(5000);\n    // scene.add(axesHelper);\n\n    // Lighting\n    this.ambientLight = new AmbientLight(0xffffff, 0.15);\n    this.scene.add(this.ambientLight);\n\n    this.pointLight = new PointLight(sunColour, 1);\n    this.pointLight.position.set(0, 0, 0);\n    this.scene.add(this.pointLight);\n\n    await this.createSolarSystem();\n\n    this.guiViewActionsFolder = this.gui.addFolder(\"View Actions\");\n    this.guiViewActionsFolder.open();\n    this.guiViewActionsFolder.add(this.buttonHandlers, \"toggleOrbits\").name(\"Toggle Orbits\");\n    this.guiViewActionsFolder.add(this.buttonHandlers, \"resetView\").name(\"Reset View\");\n    for (const planet of this.bodies.filter((b) => b.entityType === EntityType.Planet)) {\n      const ssPlanet = this.solarSystem.planets.find((p) => p.id === planet.id);\n      this.guiViewActionsFolder.add(planet, \"show\").name(ssPlanet?.name || \"A Planet\");\n    }\n\n    this.isRunning = true;\n  };\n\n  public animate = () => {\n    if (!this.isRunning) {\n      return;\n    }\n    requestAnimationFrame(this.animate);\n\n    this.bodies.forEach((body) => {\n      body.animate(this.clock);\n    });\n\n    this.orbitControls.update();\n    this.stats.update();\n\n    if (this.showPlanetId > -1) {\n      const planet = this.bodies.find((b) => b.id === this.showPlanetId);\n      if (planet) {\n        const pos = new Vector3();\n        planet.sphere.getWorldPosition(pos);\n\n        this.camera.position.set(pos.x + planet.radius * 2, pos.y + planet.radius * 2, pos.z + planet.radius * 8);\n        this.camera.lookAt(pos.x, pos.y, pos.z);\n      }\n    }\n\n    this.renderer.render(this.scene, this.camera);\n  };\n\n  private clearScene = () => {\n    this.isRunning = false;\n\n    try {\n      // this.gui.destroy();\n      this.gui.removeFolder(this.guiViewActionsFolder);\n      this.guiViewActionsFolder.destroy();\n    } catch (error) {}\n\n    // this.spaceTexture.dispose();\n    this.ambientLight.dispose();\n    this.pointLight.dispose();\n\n    for (const body of this.bodies) {\n      body.dispose();\n    }\n    this.bodies = [];\n    this.scene.clear();\n\n    this.renderer.render(this.scene, this.camera);\n\n    // this.camera.remove();\n    // this.renderer.dispose();\n    // this.orbitControls.dispose();\n\n    // const canvasElements = document.getElementsByTagName(\"canvas\");\n    // for (let i = 0; i < canvasElements.length; i++) {\n    //   const canvas = canvasElements[i];\n    //   canvas.remove();\n    // }\n\n    // this.init();\n  };\n\n  private reset = () => {\n    this.gui.updateDisplay();\n    this.clearScene();\n    this.solarSystem = new SolarSystemGenerator().generate(this.options.seed);\n\n    this.init().then(() => {\n      this.animate();\n    });\n  };\n\n  createSolarSystem = async () => {\n    const handleShowPlanet = (id: number) => {\n      this.showPlanetId = id;\n    };\n\n    for (const sun of this.solarSystem.suns) {\n      const sunEntity = new Sun(sun.id, EntityType.Sun, sun.radius, {\n        baseSeed: sun.seed,\n        position: sun.position ? new Vector3(...sun.position) : new Vector3(0, 0, 0),\n        colour: new Color(0xffca20),\n        terrainHeight: 0,\n        texturePath: \"assets/sun.jpg\",\n        orbitEntity: false,\n        orbitRadius: sun.orbitRadius,\n        orbitDirection: sun.orbitDirection,\n        orbitSpeed: sun.orbitSpeed,\n        spinSpeed: sun.spinSpeed,\n      });\n      await sunEntity.create();\n      this.bodies.push(sunEntity);\n      this.scene.add(sunEntity.entity);\n\n      for (let planetIndex = 0; planetIndex < this.solarSystem.planets.length; planetIndex++) {\n        const planet = this.solarSystem.planets[planetIndex];\n\n        const orbitEntity = this.bodies.find((b) => b.id === planet.orbitEntityId) as Entity;\n        const planetParams: EntityParams = {\n          baseSeed: planet.seed,\n          position: planet.position ? new Vector3(...planet.position) : orbitEntity.entity.position,\n          terrainHeight: planet.terrainHeight,\n          orbitEntity: orbitEntity,\n          orbitRadius: planet.orbitRadius,\n          orbitDirection: planet.orbitDirection,\n          orbitSpeed: planet.orbitSpeed,\n          spinSpeed: planet.spinSpeed,\n          onShow: handleShowPlanet,\n        };\n\n        const planetEntity =\n          planetIndex === 2\n            ? new Earth(planet.id, EntityType.Planet, planet.radius, planetParams)\n            : new ClassM(planet.id, EntityType.Planet, planet.radius, planetParams);\n        await planetEntity.create();\n\n        for (const moon of planet.moons) {\n          const orbitEntity = planetEntity;\n          const moonEntity = new Moon(moon.id, EntityType.Moon, moon.radius, {\n            baseSeed: moon.seed,\n            position: moon.position ? new Vector3(...moon.position) : orbitEntity.entity.position,\n            colour: moon.rgb ? new Color(...moon.rgb) : new Color(1, 1, 1),\n            terrainHeight: moon.terrainHeight,\n            orbitEntity: orbitEntity,\n            orbitRadius: moon.orbitRadius,\n            orbitDirection: moon.orbitDirection,\n            orbitSpeed: moon.orbitSpeed,\n            spinSpeed: moon.spinSpeed,\n          });\n          await moonEntity.create();\n          this.bodies.push(moonEntity);\n          // add the moon to the planet (so it follows the planet's orbit)\n          planetEntity.entity.add(moonEntity.entity);\n        }\n\n        this.bodies.push(planetEntity);\n        this.scene.add(planetEntity.entity);\n      }\n    }\n  };\n}\n"],"sourceRoot":""}